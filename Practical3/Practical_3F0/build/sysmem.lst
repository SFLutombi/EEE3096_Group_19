ARM GAS  C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"sysmem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/sysmem.c"
  18              		.section	.bss.__sbrk_heap_end,"aw",%nobits
  19              		.align	2
  22              	__sbrk_heap_end:
  23 0000 00000000 		.space	4
  24              		.section	.text._sbrk,"ax",%progbits
  25              		.align	1
  26              		.global	_sbrk
  27              		.syntax unified
  28              		.code	16
  29              		.thumb_func
  31              	_sbrk:
  32              	.LFB0:
   1:Core/Src/sysmem.c **** /**
   2:Core/Src/sysmem.c ****  ******************************************************************************
   3:Core/Src/sysmem.c ****  * @file      sysmem.c
   4:Core/Src/sysmem.c ****  * @author    Generated by STM32CubeMX
   5:Core/Src/sysmem.c ****  * @brief     System Memory calls file
   6:Core/Src/sysmem.c ****  *
   7:Core/Src/sysmem.c ****  *            For more information about which C functions
   8:Core/Src/sysmem.c ****  *            need which of these lowlevel functions
   9:Core/Src/sysmem.c ****  *            please consult the Newlib or Picolibc libc manual
  10:Core/Src/sysmem.c ****  ******************************************************************************
  11:Core/Src/sysmem.c ****  * @attention
  12:Core/Src/sysmem.c ****  *
  13:Core/Src/sysmem.c ****  * Copyright (c) 2025 STMicroelectronics.
  14:Core/Src/sysmem.c ****  * All rights reserved.
  15:Core/Src/sysmem.c ****  *
  16:Core/Src/sysmem.c ****  * This software is licensed under terms that can be found in the LICENSE file
  17:Core/Src/sysmem.c ****  * in the root directory of this software component.
  18:Core/Src/sysmem.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  19:Core/Src/sysmem.c ****  *
  20:Core/Src/sysmem.c ****  ******************************************************************************
  21:Core/Src/sysmem.c ****  */
  22:Core/Src/sysmem.c **** 
  23:Core/Src/sysmem.c **** /* Includes */
  24:Core/Src/sysmem.c **** #include <errno.h>
  25:Core/Src/sysmem.c **** #include <stdint.h>
  26:Core/Src/sysmem.c **** #include <stddef.h>
  27:Core/Src/sysmem.c **** 
  28:Core/Src/sysmem.c **** /**
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s 			page 2


  29:Core/Src/sysmem.c ****  * Pointer to the current high watermark of the heap usage
  30:Core/Src/sysmem.c ****  */
  31:Core/Src/sysmem.c **** static uint8_t *__sbrk_heap_end = NULL;
  32:Core/Src/sysmem.c **** 
  33:Core/Src/sysmem.c **** /**
  34:Core/Src/sysmem.c ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  35:Core/Src/sysmem.c ****  *        and others from the C library
  36:Core/Src/sysmem.c ****  *
  37:Core/Src/sysmem.c ****  * @verbatim
  38:Core/Src/sysmem.c ****  * ############################################################################
  39:Core/Src/sysmem.c ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  40:Core/Src/sysmem.c ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  41:Core/Src/sysmem.c ****  * ############################################################################
  42:Core/Src/sysmem.c ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  43:Core/Src/sysmem.c ****  * @endverbatim
  44:Core/Src/sysmem.c ****  *
  45:Core/Src/sysmem.c ****  * This implementation starts allocating at the '_end' linker symbol
  46:Core/Src/sysmem.c ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  47:Core/Src/sysmem.c ****  * The implementation considers '_estack' linker symbol to be RAM end
  48:Core/Src/sysmem.c ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  49:Core/Src/sysmem.c ****  * reserved size, please increase the '_Min_Stack_Size'.
  50:Core/Src/sysmem.c ****  *
  51:Core/Src/sysmem.c ****  * @param incr Memory size
  52:Core/Src/sysmem.c ****  * @return Pointer to allocated memory
  53:Core/Src/sysmem.c ****  */
  54:Core/Src/sysmem.c **** void *_sbrk(ptrdiff_t incr)
  55:Core/Src/sysmem.c **** {
  33              		.loc 1 55 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 24
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 86B0     		sub	sp, sp, #24
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 32
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
  56:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  57:Core/Src/sysmem.c ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  58:Core/Src/sysmem.c ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  59:Core/Src/sysmem.c ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  49              		.loc 1 59 32
  50 0008 144A     		ldr	r2, .L5
  51              		.loc 1 59 53
  52 000a 154B     		ldr	r3, .L5+4
  53              		.loc 1 59 18
  54 000c D31A     		subs	r3, r2, r3
  55 000e 7B61     		str	r3, [r7, #20]
  60:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  56              		.loc 1 60 18
  57 0010 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s 			page 3


  58 0012 3B61     		str	r3, [r7, #16]
  61:Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  62:Core/Src/sysmem.c **** 
  63:Core/Src/sysmem.c ****   /* Initialize heap end at first call */
  64:Core/Src/sysmem.c ****   if (NULL == __sbrk_heap_end)
  59              		.loc 1 64 12
  60 0014 134B     		ldr	r3, .L5+8
  61 0016 1B68     		ldr	r3, [r3]
  62              		.loc 1 64 6
  63 0018 002B     		cmp	r3, #0
  64 001a 02D1     		bne	.L2
  65:Core/Src/sysmem.c ****   {
  66:Core/Src/sysmem.c ****     __sbrk_heap_end = &_end;
  65              		.loc 1 66 21
  66 001c 114B     		ldr	r3, .L5+8
  67 001e 124A     		ldr	r2, .L5+12
  68 0020 1A60     		str	r2, [r3]
  69              	.L2:
  67:Core/Src/sysmem.c ****   }
  68:Core/Src/sysmem.c **** 
  69:Core/Src/sysmem.c ****   /* Protect heap from growing into the reserved MSP stack */
  70:Core/Src/sysmem.c ****   if (__sbrk_heap_end + incr > max_heap)
  70              		.loc 1 70 23
  71 0022 104B     		ldr	r3, .L5+8
  72 0024 1A68     		ldr	r2, [r3]
  73 0026 7B68     		ldr	r3, [r7, #4]
  74 0028 D318     		adds	r3, r2, r3
  75              		.loc 1 70 6
  76 002a 3A69     		ldr	r2, [r7, #16]
  77 002c 9A42     		cmp	r2, r3
  78 002e 07D2     		bcs	.L3
  71:Core/Src/sysmem.c ****   {
  72:Core/Src/sysmem.c ****     errno = ENOMEM;
  79              		.loc 1 72 5
  80 0030 FFF7FEFF 		bl	__errno
  81 0034 0300     		movs	r3, r0
  82              		.loc 1 72 11 discriminator 1
  83 0036 0C22     		movs	r2, #12
  84 0038 1A60     		str	r2, [r3]
  73:Core/Src/sysmem.c ****     return (void *)-1;
  85              		.loc 1 73 12
  86 003a 0123     		movs	r3, #1
  87 003c 5B42     		rsbs	r3, r3, #0
  88 003e 09E0     		b	.L4
  89              	.L3:
  74:Core/Src/sysmem.c ****   }
  75:Core/Src/sysmem.c **** 
  76:Core/Src/sysmem.c ****   prev_heap_end = __sbrk_heap_end;
  90              		.loc 1 76 17
  91 0040 084B     		ldr	r3, .L5+8
  92 0042 1B68     		ldr	r3, [r3]
  93 0044 FB60     		str	r3, [r7, #12]
  77:Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  94              		.loc 1 77 19
  95 0046 074B     		ldr	r3, .L5+8
  96 0048 1A68     		ldr	r2, [r3]
  97 004a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s 			page 4


  98 004c D218     		adds	r2, r2, r3
  99 004e 054B     		ldr	r3, .L5+8
 100 0050 1A60     		str	r2, [r3]
  78:Core/Src/sysmem.c **** 
  79:Core/Src/sysmem.c ****   return (void *)prev_heap_end;
 101              		.loc 1 79 10
 102 0052 FB68     		ldr	r3, [r7, #12]
 103              	.L4:
  80:Core/Src/sysmem.c **** }
 104              		.loc 1 80 1
 105 0054 1800     		movs	r0, r3
 106 0056 BD46     		mov	sp, r7
 107 0058 06B0     		add	sp, sp, #24
 108              		@ sp needed
 109 005a 80BD     		pop	{r7, pc}
 110              	.L6:
 111              		.align	2
 112              	.L5:
 113 005c 00000000 		.word	_estack
 114 0060 00000000 		.word	_Min_Stack_Size
 115 0064 00000000 		.word	__sbrk_heap_end
 116 0068 00000000 		.word	_end
 117              		.cfi_endproc
 118              	.LFE0:
 120              		.text
 121              	.Letext0:
 122              		.file 2 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 123              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 124              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 125              		.file 5 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 sysmem.c
C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s:19     .bss.__sbrk_heap_end:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s:22     .bss.__sbrk_heap_end:00000000 __sbrk_heap_end
C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s:25     .text._sbrk:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s:31     .text._sbrk:00000000 _sbrk
C:\Users\einom\AppData\Local\Temp\ccX9dMfV.s:113    .text._sbrk:0000005c $d

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
