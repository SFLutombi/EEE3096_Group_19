ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.kMaxIter,"a"
  21              		.align	2
  24              	kMaxIter:
  25 0000 64000000 		.word	100
  26              		.section	.rodata.kNumResolutions,"a"
  27              		.align	2
  30              	kNumResolutions:
  31 0000 05000000 		.word	5
  32              		.section	.rodata.kWidths,"a"
  33              		.align	2
  36              	kWidths:
  37 0000 8000     		.short	128
  38 0002 A000     		.short	160
  39 0004 C000     		.short	192
  40 0006 E000     		.short	224
  41 0008 0001     		.short	256
  42              		.section	.rodata.kHeights,"a"
  43              		.align	2
  46              	kHeights:
  47 0000 8000     		.short	128
  48 0002 A000     		.short	160
  49 0004 C000     		.short	192
  50 0006 E000     		.short	224
  51 0008 0001     		.short	256
  52              		.global	g_current_width
  53              		.section	.bss.g_current_width,"aw",%nobits
  54              		.align	2
  57              	g_current_width:
  58 0000 00000000 		.space	4
  59              		.global	g_current_height
  60              		.section	.bss.g_current_height,"aw",%nobits
  61              		.align	2
  64              	g_current_height:
  65 0000 00000000 		.space	4
  66              		.global	g_current_cycles
  67              		.section	.bss.g_current_cycles,"aw",%nobits
  68              		.align	2
  71              	g_current_cycles:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 2


  72 0000 00000000 		.space	4
  73              		.global	g_current_checksum
  74              		.section	.bss.g_current_checksum,"aw",%nobits
  75              		.align	2
  78              	g_current_checksum:
  79 0000 00000000 		.space	4
  80              		.global	g_current_execution_time
  81              		.section	.bss.g_current_execution_time,"aw",%nobits
  82              		.align	3
  85              	g_current_execution_time:
  86 0000 00000000 		.space	8
  86      00000000 
  87              		.global	g_current_throughput
  88              		.section	.bss.g_current_throughput,"aw",%nobits
  89              		.align	3
  92              	g_current_throughput:
  93 0000 00000000 		.space	8
  93      00000000 
  94              		.global	checksum_float
  95              		.section	.bss.checksum_float,"aw",%nobits
  96              		.align	2
  99              	checksum_float:
 100 0000 00000000 		.space	20
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.global	execution_time_ms_float
 102              		.section	.bss.execution_time_ms_float,"aw",%nobits
 103              		.align	3
 106              	execution_time_ms_float:
 107 0000 00000000 		.space	40
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	cpu_cycles_float
 109              		.section	.bss.cpu_cycles_float,"aw",%nobits
 110              		.align	2
 113              	cpu_cycles_float:
 114 0000 00000000 		.space	20
 114      00000000 
 114      00000000 
 114      00000000 
 114      00000000 
 115              		.global	throughput_pps_float
 116              		.section	.bss.throughput_pps_float,"aw",%nobits
 117              		.align	3
 120              	throughput_pps_float:
 121 0000 00000000 		.space	40
 121      00000000 
 121      00000000 
 121      00000000 
 121      00000000 
 122              		.global	checksum_double
 123              		.section	.bss.checksum_double,"aw",%nobits
 124              		.align	2
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 3


 127              	checksum_double:
 128 0000 00000000 		.space	20
 128      00000000 
 128      00000000 
 128      00000000 
 128      00000000 
 129              		.global	execution_time_ms_double
 130              		.section	.bss.execution_time_ms_double,"aw",%nobits
 131              		.align	3
 134              	execution_time_ms_double:
 135 0000 00000000 		.space	40
 135      00000000 
 135      00000000 
 135      00000000 
 135      00000000 
 136              		.global	cpu_cycles_double
 137              		.section	.bss.cpu_cycles_double,"aw",%nobits
 138              		.align	2
 141              	cpu_cycles_double:
 142 0000 00000000 		.space	20
 142      00000000 
 142      00000000 
 142      00000000 
 142      00000000 
 143              		.global	throughput_pps_double
 144              		.section	.bss.throughput_pps_double,"aw",%nobits
 145              		.align	3
 148              	throughput_pps_double:
 149 0000 00000000 		.space	40
 149      00000000 
 149      00000000 
 149      00000000 
 149      00000000 
 150              		.global	accuracy_diff_percent
 151              		.section	.bss.accuracy_diff_percent,"aw",%nobits
 152              		.align	3
 155              	accuracy_diff_percent:
 156 0000 00000000 		.space	40
 156      00000000 
 156      00000000 
 156      00000000 
 156      00000000 
 157              		.global	speedup_factor
 158              		.section	.bss.speedup_factor,"aw",%nobits
 159              		.align	3
 162              	speedup_factor:
 163 0000 00000000 		.space	40
 163      00000000 
 163      00000000 
 163      00000000 
 163      00000000 
 164              		.global	g_current_test_mode
 165              		.section	.bss.g_current_test_mode,"aw",%nobits
 166              		.align	2
 169              	g_current_test_mode:
 170 0000 00000000 		.space	4
 171              		.global	g_fpu_enabled
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 4


 172              		.section	.data.g_fpu_enabled,"aw"
 173              		.align	2
 176              	g_fpu_enabled:
 177 0000 01000000 		.word	1
 178              		.global	g_total_program_cycles
 179              		.section	.bss.g_total_program_cycles,"aw",%nobits
 180              		.align	2
 183              	g_total_program_cycles:
 184 0000 00000000 		.space	4
 185              		.global	g_total_program_time_ms
 186              		.section	.bss.g_total_program_time_ms,"aw",%nobits
 187              		.align	3
 190              	g_total_program_time_ms:
 191 0000 00000000 		.space	8
 191      00000000 
 192              		.global	g_total_time_sum
 193              		.section	.bss.g_total_time_sum,"aw",%nobits
 194              		.align	3
 197              	g_total_time_sum:
 198 0000 00000000 		.space	8
 198      00000000 
 199              		.section	.rodata.kNumScalingFactors,"a"
 200              		.align	2
 203              	kNumScalingFactors:
 204 0000 03000000 		.word	3
 205              		.section	.rodata.kScalingFactors,"a"
 206              		.align	2
 209              	kScalingFactors:
 210 0000 E8030000 		.word	1000
 211 0004 10270000 		.word	10000
 212 0008 40420F00 		.word	1000000
 213              		.section	.rodata
 214              		.align	2
 215              	.LC0:
 216 0000 31305E33 		.ascii	"10^3\000"
 216      00
 217 0005 000000   		.align	2
 218              	.LC1:
 219 0008 31305E34 		.ascii	"10^4\000"
 219      00
 220 000d 000000   		.align	2
 221              	.LC2:
 222 0010 31305E36 		.ascii	"10^6\000"
 222      00
 223              		.section	.data.kScalingFactorNames,"aw"
 224              		.align	2
 227              	kScalingFactorNames:
 228 0000 00000000 		.word	.LC0
 229 0004 08000000 		.word	.LC1
 230 0008 10000000 		.word	.LC2
 231              		.global	g_fixed_checksum
 232              		.section	.bss.g_fixed_checksum,"aw",%nobits
 233              		.align	2
 236              	g_fixed_checksum:
 237 0000 00000000 		.space	60
 237      00000000 
 237      00000000 
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 5


 237      00000000 
 237      00000000 
 238              		.global	g_fixed_execution_time_ms
 239              		.section	.bss.g_fixed_execution_time_ms,"aw",%nobits
 240              		.align	3
 243              	g_fixed_execution_time_ms:
 244 0000 00000000 		.space	120
 244      00000000 
 244      00000000 
 244      00000000 
 244      00000000 
 245              		.global	g_fixed_overflow_count
 246              		.section	.bss.g_fixed_overflow_count,"aw",%nobits
 247              		.align	2
 250              	g_fixed_overflow_count:
 251 0000 00000000 		.space	12
 251      00000000 
 251      00000000 
 252              		.global	g_current_scaling_factor
 253              		.section	.bss.g_current_scaling_factor,"aw",%nobits
 254              		.align	2
 257              	g_current_scaling_factor:
 258 0000 00000000 		.space	4
 259              		.global	g_current_scaling_index
 260              		.section	.bss.g_current_scaling_index,"aw",%nobits
 261              		.align	2
 264              	g_current_scaling_index:
 265 0000 00000000 		.space	4
 266              		.section	.rodata
 267 0015 000000   		.align	2
 268              	.LC3:
 269 0018 0D0A4545 		.ascii	"\015\012EEE3096S Practical 3 - STM32F4 Mandelbrot B"
 269      45333039 
 269      36532050 
 269      72616374 
 269      6963616C 
 270 0045 656E6368 		.ascii	"enchmark\015\000"
 270      6D61726B 
 270      0D00
 271 004f 00       		.align	2
 272              	.LC4:
 273 0050 53595343 		.ascii	"SYSCLK: %lu Hz\015\012\000"
 273      4C4B3A20 
 273      256C7520 
 273      487A0D0A 
 273      00
 274 0061 000000   		.align	2
 275              	.LC5:
 276 0064 0D0A3D3D 		.ascii	"\015\012=== FPU Impact Analysis: FLOAT PRECISION =="
 276      3D204650 
 276      5520496D 
 276      70616374 
 276      20416E61 
 277 0091 3D0D00   		.ascii	"=\015\000"
 278              		.global	__aeabi_ui2d
 279              		.global	__aeabi_ddiv
 280              		.global	__aeabi_dmul
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 6


 281              		.align	2
 282              	.LC6:
 283 0094 464C4F41 		.ascii	"FLOAT\000"
 283      5400
 284 009a 0000     		.align	2
 285              	.LC7:
 286 009c 0D0A3D3D 		.ascii	"\015\012=== FPU Impact Analysis: DOUBLE PRECISION ="
 286      3D204650 
 286      5520496D 
 286      70616374 
 286      20416E61 
 287 00c9 3D3D0D00 		.ascii	"==\015\000"
 288 00cd 000000   		.align	2
 289              	.LC8:
 290 00d0 444F5542 		.ascii	"DOUBLE\000"
 290      4C4500
 291 00d7 00       		.align	2
 292              	.LC9:
 293 00d8 0D0A3D3D 		.ascii	"\015\012=== FPU Impact Analysis: COMPARISON ===\015"
 293      3D204650 
 293      5520496D 
 293      70616374 
 293      20416E61 
 294 0102 00       		.ascii	"\000"
 295              		.global	__aeabi_dsub
 296              		.global	__aeabi_dcmpeq
 297              		.global	__aeabi_dadd
 298 0103 00       		.align	2
 299              	.LC10:
 300 0104 0D0A3D3D 		.ascii	"\015\012=== Task 7: Fixed-Point Arithmetic Analysis"
 300      3D205461 
 300      736B2037 
 300      3A204669 
 300      7865642D 
 301 0131 203D3D3D 		.ascii	" ===\015\000"
 301      0D00
 302 0137 00       		.align	2
 303              	.LC11:
 304 0138 0D0A2D2D 		.ascii	"\015\012--- Scaling Factor: %s (%lu) ---\015\012\000"
 304      2D205363 
 304      616C696E 
 304      67204661 
 304      63746F72 
 305 015d 000000   		.align	2
 306              	.LC12:
 307 0160 5265736F 		.ascii	"Resolution %ux%u: %.3f ms, cycles %lu, checksum %lu"
 307      6C757469 
 307      6F6E2025 
 307      75782575 
 307      3A20252E 
 308 0193 2C206F76 		.ascii	", overflows %lu\015\012\000"
 308      6572666C 
 308      6F777320 
 308      256C750D 
 308      0A00
 309 01a5 000000   		.align	2
 310              	.LC13:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 7


 311 01a8 0D0A3D3D 		.ascii	"\015\012=== Fixed-Point Analysis Summary ===\015\000"
 311      3D204669 
 311      7865642D 
 311      506F696E 
 311      7420416E 
 312              		.align	2
 313              	.LC14:
 314 01d0 5363616C 		.ascii	"Scaling Factor %s: Total overflows = %lu\015\012\000"
 314      696E6720 
 314      46616374 
 314      6F722025 
 314      733A2054 
 315              		.section	.text.main,"ax",%progbits
 316              		.align	1
 317              		.global	main
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 322              	main:
 323              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdio.h>
  25:Core/Src/main.c **** #include <stdint.h>
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 8


  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** //TODO: Define variables you think you might need
  48:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  49:Core/Src/main.c **** /* Task 5: FPU Impact Analysis - compare float vs double, FPU enabled vs disabled */
  50:Core/Src/main.c **** static const uint32_t kMaxIter = 100u;
  51:Core/Src/main.c **** static const uint32_t kNumResolutions = 5;
  52:Core/Src/main.c **** static const uint16_t kWidths[5]  = {128, 160, 192, 224, 256};  /* Practical 1B sizes */
  53:Core/Src/main.c **** static const uint16_t kHeights[5] = {128, 160, 192, 224, 256};
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Memory management for large images */
  56:Core/Src/main.c **** #define MAX_TILE_SIZE 256  /* Maximum tile size that fits in available SRAM */
  57:Core/Src/main.c **** #define TILE_OVERLAP 0     /* No overlap needed for Mandelbrot calculation */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Live Expressions: current benchmark metrics */
  60:Core/Src/main.c **** volatile uint32_t g_current_width = 0u;
  61:Core/Src/main.c **** volatile uint32_t g_current_height = 0u;
  62:Core/Src/main.c **** volatile uint32_t g_current_cycles = 0u;
  63:Core/Src/main.c **** volatile uint32_t g_current_checksum = 0u;
  64:Core/Src/main.c **** volatile double g_current_execution_time = 0.0;
  65:Core/Src/main.c **** volatile double g_current_throughput = 0.0;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Task 5: FPU Impact Analysis Results */
  68:Core/Src/main.c **** /* Float precision results */
  69:Core/Src/main.c **** volatile uint32_t checksum_float[5] = {0u, 0u, 0u, 0u, 0u};
  70:Core/Src/main.c **** volatile double execution_time_ms_float[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  71:Core/Src/main.c **** volatile uint32_t cpu_cycles_float[5] = {0u, 0u, 0u, 0u, 0u};
  72:Core/Src/main.c **** volatile double throughput_pps_float[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Double precision results */
  75:Core/Src/main.c **** volatile uint32_t checksum_double[5] = {0u, 0u, 0u, 0u, 0u};
  76:Core/Src/main.c **** volatile double execution_time_ms_double[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  77:Core/Src/main.c **** volatile uint32_t cpu_cycles_double[5] = {0u, 0u, 0u, 0u, 0u};
  78:Core/Src/main.c **** volatile double throughput_pps_double[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Accuracy comparison */
  81:Core/Src/main.c **** volatile double accuracy_diff_percent[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  82:Core/Src/main.c **** volatile double speedup_factor[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /* Current test configuration */
  85:Core/Src/main.c **** volatile uint32_t g_current_test_mode = 0u; /* 0=float, 1=double */
  86:Core/Src/main.c **** volatile uint32_t g_fpu_enabled = 1u; /* 1=FPU enabled, 0=FPU disabled */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /* Task 6: Total program runtime measurement */
  89:Core/Src/main.c **** volatile uint32_t g_total_program_cycles = 0u;
  90:Core/Src/main.c **** volatile double g_total_program_time_ms = 0.0;
  91:Core/Src/main.c **** volatile double g_total_time_sum = 0.0;
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Task 7: Fixed-Point Arithmetic Analysis */
  94:Core/Src/main.c **** /* Fixed-point scaling factors to test */
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 9


  95:Core/Src/main.c **** static const uint32_t kNumScalingFactors = 3;
  96:Core/Src/main.c **** static const uint32_t kScalingFactors[3] = {1000u, 10000u, 1000000u};  /* 10^3, 10^4, 10^6 */
  97:Core/Src/main.c **** static const char* kScalingFactorNames[3] = {"10^3", "10^4", "10^6"};
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* Fixed-point results for each scaling factor */
 100:Core/Src/main.c **** volatile uint32_t g_fixed_checksum[3][5] = {{0}};  /* [scaling_factor][resolution] */
 101:Core/Src/main.c **** volatile double g_fixed_execution_time_ms[3][5] = {{0.0}};
 102:Core/Src/main.c **** volatile uint32_t g_fixed_overflow_count[3] = {0u, 0u, 0u};  /* Overflow counter per scaling factor
 103:Core/Src/main.c **** volatile uint32_t g_current_scaling_factor = 0u;  /* Current scaling factor being tested */
 104:Core/Src/main.c **** volatile uint32_t g_current_scaling_index = 0u;   /* Index of current scaling factor */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /* USER CODE END PV */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 109:Core/Src/main.c **** void SystemClock_Config(void);
 110:Core/Src/main.c **** static void MX_GPIO_Init(void);
 111:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 112:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
 113:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_float(uint16_t width, uint16_t height, uint32_t max_it
 114:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_double(uint16_t width, uint16_t height, uint32_t max_i
 115:Core/Src/main.c **** static void dwt_cycle_counter_init(void);
 116:Core/Src/main.c **** static inline uint32_t dwt_get_cycles(void);
 117:Core/Src/main.c **** static void log_fpu_benchmark(uint16_t width, uint16_t height, uint32_t cycles, uint32_t checksum, 
 118:Core/Src/main.c **** static void log_fpu_comparison(uint16_t width, uint16_t height, uint32_t checksum_float, uint32_t c
 119:Core/Src/main.c **** int __io_putchar(int ch);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* Task 7: Fixed-point arithmetic functions */
 122:Core/Src/main.c **** static int64_t fixed_multiply(int64_t a, int64_t b, uint32_t scale);
 123:Core/Src/main.c **** static int64_t fixed_add(int64_t a, int64_t b);
 124:Core/Src/main.c **** static int64_t double_to_fixed(double value, uint32_t scale);
 125:Core/Src/main.c **** static double fixed_to_double(int64_t value, uint32_t scale);
 126:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_fixed_point(uint16_t width, uint16_t height, uint32_t 
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /* USER CODE END PFP */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 131:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** /* USER CODE END 0 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** /**
 136:Core/Src/main.c ****   * @brief  The application entry point.
 137:Core/Src/main.c ****   * @retval int
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c **** int main(void)
 140:Core/Src/main.c **** {
 324              		.loc 1 140 1
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 184
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328 0000 B0B5     		push	{r4, r5, r7, lr}
 329              	.LCFI0:
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 4, -16
 332              		.cfi_offset 5, -12
 333              		.cfi_offset 7, -8
 334              		.cfi_offset 14, -4
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 10


 335 0002 B4B0     		sub	sp, sp, #208
 336              	.LCFI1:
 337              		.cfi_def_cfa_offset 224
 338 0004 06AF     		add	r7, sp, #24
 339              	.LCFI2:
 340              		.cfi_def_cfa 7, 200
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE END 1 */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 149:Core/Src/main.c ****   HAL_Init();
 341              		.loc 1 149 3
 342 0006 FFF7FEFF 		bl	HAL_Init
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE END Init */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* Configure the system clock */
 156:Core/Src/main.c ****   SystemClock_Config();
 343              		.loc 1 156 3
 344 000a FFF7FEFF 		bl	SystemClock_Config
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE END SysInit */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* Initialize all configured peripherals */
 163:Core/Src/main.c ****   MX_GPIO_Init();
 345              		.loc 1 163 3
 346 000e FFF7FEFF 		bl	MX_GPIO_Init
 164:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 165:Core/Src/main.c ****   dwt_cycle_counter_init();
 347              		.loc 1 165 3
 348 0012 FFF7FEFF 		bl	dwt_cycle_counter_init
 166:Core/Src/main.c ****   printf("\r\nEEE3096S Practical 3 - STM32F4 Mandelbrot Benchmark\r\n");
 349              		.loc 1 166 3
 350 0016 6948     		ldr	r0, .L21
 351 0018 FFF7FEFF 		bl	puts
 167:Core/Src/main.c ****   printf("SYSCLK: %lu Hz\r\n", SystemCoreClock);
 352              		.loc 1 167 3
 353 001c 684B     		ldr	r3, .L21+4
 354 001e 1B68     		ldr	r3, [r3]
 355 0020 1946     		mov	r1, r3
 356 0022 6848     		ldr	r0, .L21+8
 357 0024 FFF7FEFF 		bl	printf
 358              	.L19:
 359              	.LBB4:
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /* USER CODE END 2 */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /* Infinite loop */
 172:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 11


 173:Core/Src/main.c ****   while (1)
 174:Core/Src/main.c ****   {
 175:Core/Src/main.c ****     /* USER CODE END WHILE */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 178:Core/Src/main.c ****       /* Start total program timing */
 179:Core/Src/main.c ****       DWT->CYCCNT = 0;
 360              		.loc 1 179 10
 361 0028 674B     		ldr	r3, .L21+12
 362              		.loc 1 179 19
 363 002a 0022     		movs	r2, #0
 364 002c 5A60     		str	r2, [r3, #4]
 180:Core/Src/main.c ****       uint32_t program_start_cycles = dwt_get_cycles();
 365              		.loc 1 180 39
 366 002e FFF7FEFF 		bl	dwt_get_cycles
 367 0032 C7F88400 		str	r0, [r7, #132]
 181:Core/Src/main.c ****       
 182:Core/Src/main.c ****       /* Visual indicator: LED0 ON */
 183:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 368              		.loc 1 183 7
 369 0036 0122     		movs	r2, #1
 370 0038 0121     		movs	r1, #1
 371 003a 6448     		ldr	r0, .L21+16
 372 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****       /* Task 5: FPU Impact Analysis - Test both float and double precision */
 186:Core/Src/main.c ****       
 187:Core/Src/main.c ****       /* Test 1: Float precision */
 188:Core/Src/main.c ****       g_current_test_mode = 0u; /* float */
 373              		.loc 1 188 27
 374 0040 634B     		ldr	r3, .L21+20
 375 0042 0022     		movs	r2, #0
 376 0044 1A60     		str	r2, [r3]
 189:Core/Src/main.c ****       printf("\r\n=== FPU Impact Analysis: FLOAT PRECISION ===\r\n");
 377              		.loc 1 189 7
 378 0046 6348     		ldr	r0, .L21+24
 379 0048 FFF7FEFF 		bl	puts
 380              	.LBB5:
 190:Core/Src/main.c ****       for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 381              		.loc 1 190 21
 382 004c 0023     		movs	r3, #0
 383 004e C7F8B430 		str	r3, [r7, #180]
 384              		.loc 1 190 7
 385 0052 A2E0     		b	.L2
 386              	.L3:
 387              	.LBB6:
 191:Core/Src/main.c ****       {
 192:Core/Src/main.c ****         uint16_t w = kWidths[size_index];
 388              		.loc 1 192 18
 389 0054 604A     		ldr	r2, .L21+28
 390 0056 D7F8B430 		ldr	r3, [r7, #180]
 391 005a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 392 005e FB85     		strh	r3, [r7, #46]	@ movhi
 193:Core/Src/main.c ****         uint16_t h = kHeights[size_index];
 393              		.loc 1 193 18
 394 0060 5E4A     		ldr	r2, .L21+32
 395 0062 D7F8B430 		ldr	r3, [r7, #180]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 12


 396 0066 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 397 006a BB85     		strh	r3, [r7, #44]	@ movhi
 194:Core/Src/main.c ****         g_current_width = (uint32_t)w;
 398              		.loc 1 194 27
 399 006c FB8D     		ldrh	r3, [r7, #46]
 400              		.loc 1 194 25
 401 006e 5C4A     		ldr	r2, .L21+36
 402 0070 1360     		str	r3, [r2]
 195:Core/Src/main.c ****         g_current_height = (uint32_t)h;
 403              		.loc 1 195 28
 404 0072 BB8D     		ldrh	r3, [r7, #44]
 405              		.loc 1 195 26
 406 0074 5B4A     		ldr	r2, .L21+40
 407 0076 1360     		str	r3, [r2]
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****         DWT->CYCCNT = 0; // reset cycle counter
 408              		.loc 1 197 12
 409 0078 534B     		ldr	r3, .L21+12
 410              		.loc 1 197 21
 411 007a 0022     		movs	r2, #0
 412 007c 5A60     		str	r2, [r3, #4]
 198:Core/Src/main.c ****         uint32_t start_cycles = dwt_get_cycles();
 413              		.loc 1 198 33
 414 007e FFF7FEFF 		bl	dwt_get_cycles
 415 0082 B862     		str	r0, [r7, #40]
 199:Core/Src/main.c ****         uint32_t result_checksum = generate_mandelbrot_checksum_float(w, h, kMaxIter);
 416              		.loc 1 199 36
 417 0084 6422     		movs	r2, #100
 418 0086 B98D     		ldrh	r1, [r7, #44]
 419 0088 FB8D     		ldrh	r3, [r7, #46]
 420 008a 1846     		mov	r0, r3
 421 008c FFF7FEFF 		bl	generate_mandelbrot_checksum_float
 422 0090 7862     		str	r0, [r7, #36]
 200:Core/Src/main.c ****         uint32_t end_cycles = dwt_get_cycles();
 423              		.loc 1 200 31
 424 0092 FFF7FEFF 		bl	dwt_get_cycles
 425 0096 3862     		str	r0, [r7, #32]
 201:Core/Src/main.c ****         uint32_t elapsed_cycles = end_cycles - start_cycles;
 426              		.loc 1 201 18
 427 0098 3A6A     		ldr	r2, [r7, #32]
 428 009a BB6A     		ldr	r3, [r7, #40]
 429 009c D31A     		subs	r3, r2, r3
 430 009e FB61     		str	r3, [r7, #28]
 202:Core/Src/main.c ****         double elapsed_seconds = (double)elapsed_cycles / (double)SystemCoreClock;
 431              		.loc 1 202 34
 432 00a0 F869     		ldr	r0, [r7, #28]
 433 00a2 FFF7FEFF 		bl	__aeabi_ui2d
 434 00a6 0446     		mov	r4, r0
 435 00a8 0D46     		mov	r5, r1
 436              		.loc 1 202 59
 437 00aa 454B     		ldr	r3, .L21+4
 438 00ac 1B68     		ldr	r3, [r3]
 439 00ae 1846     		mov	r0, r3
 440 00b0 FFF7FEFF 		bl	__aeabi_ui2d
 441 00b4 0246     		mov	r2, r0
 442 00b6 0B46     		mov	r3, r1
 443              		.loc 1 202 16
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 13


 444 00b8 2046     		mov	r0, r4
 445 00ba 2946     		mov	r1, r5
 446 00bc FFF7FEFF 		bl	__aeabi_ddiv
 447 00c0 0246     		mov	r2, r0
 448 00c2 0B46     		mov	r3, r1
 449 00c4 C7E90423 		strd	r2, [r7, #16]
 203:Core/Src/main.c ****         double total_pixels = (double)w * (double)h;
 450              		.loc 1 203 31
 451 00c8 FB8D     		ldrh	r3, [r7, #46]
 452 00ca 1846     		mov	r0, r3
 453 00cc FFF7FEFF 		bl	__aeabi_ui2d
 454 00d0 0446     		mov	r4, r0
 455 00d2 0D46     		mov	r5, r1
 456              		.loc 1 203 43
 457 00d4 BB8D     		ldrh	r3, [r7, #44]
 458 00d6 1846     		mov	r0, r3
 459 00d8 FFF7FEFF 		bl	__aeabi_ui2d
 460 00dc 0246     		mov	r2, r0
 461 00de 0B46     		mov	r3, r1
 462              		.loc 1 203 16
 463 00e0 2046     		mov	r0, r4
 464 00e2 2946     		mov	r1, r5
 465 00e4 FFF7FEFF 		bl	__aeabi_dmul
 466 00e8 0246     		mov	r2, r0
 467 00ea 0B46     		mov	r3, r1
 468 00ec C7E90223 		strd	r2, [r7, #8]
 204:Core/Src/main.c ****         double throughput = total_pixels / elapsed_seconds;
 469              		.loc 1 204 16
 470 00f0 D7E90423 		ldrd	r2, [r7, #16]
 471 00f4 D7E90201 		ldrd	r0, [r7, #8]
 472 00f8 FFF7FEFF 		bl	__aeabi_ddiv
 473 00fc 0246     		mov	r2, r0
 474 00fe 0B46     		mov	r3, r1
 475 0100 C7E90023 		strd	r2, [r7]
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****         /* Update Live Expressions */
 207:Core/Src/main.c ****         g_current_cycles = elapsed_cycles;
 476              		.loc 1 207 26
 477 0104 384A     		ldr	r2, .L21+44
 478 0106 FB69     		ldr	r3, [r7, #28]
 479 0108 1360     		str	r3, [r2]
 208:Core/Src/main.c ****         g_current_checksum = result_checksum;
 480              		.loc 1 208 28
 481 010a 384A     		ldr	r2, .L21+48
 482 010c 7B6A     		ldr	r3, [r7, #36]
 483 010e 1360     		str	r3, [r2]
 209:Core/Src/main.c ****         g_current_execution_time = elapsed_seconds * 1000.0;
 484              		.loc 1 209 52
 485 0110 4FF00002 		mov	r2, #0
 486 0114 364B     		ldr	r3, .L21+52
 487 0116 D7E90401 		ldrd	r0, [r7, #16]
 488 011a FFF7FEFF 		bl	__aeabi_dmul
 489 011e 0246     		mov	r2, r0
 490 0120 0B46     		mov	r3, r1
 491              		.loc 1 209 34
 492 0122 3449     		ldr	r1, .L21+56
 493 0124 C1E90023 		strd	r2, [r1]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 14


 210:Core/Src/main.c ****         g_current_throughput = throughput;
 494              		.loc 1 210 30
 495 0128 3349     		ldr	r1, .L21+60
 496 012a D7E90023 		ldrd	r2, [r7]
 497 012e C1E90023 		strd	r2, [r1]
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****         /* Store float results */
 213:Core/Src/main.c ****         checksum_float[size_index] = result_checksum;
 498              		.loc 1 213 36
 499 0132 3249     		ldr	r1, .L21+64
 500 0134 D7F8B430 		ldr	r3, [r7, #180]
 501 0138 7A6A     		ldr	r2, [r7, #36]
 502 013a 41F82320 		str	r2, [r1, r3, lsl #2]
 214:Core/Src/main.c ****         execution_time_ms_float[size_index] = elapsed_seconds * 1000.0;
 503              		.loc 1 214 63
 504 013e 4FF00002 		mov	r2, #0
 505 0142 2B4B     		ldr	r3, .L21+52
 506 0144 D7E90401 		ldrd	r0, [r7, #16]
 507 0148 FFF7FEFF 		bl	__aeabi_dmul
 508 014c 0246     		mov	r2, r0
 509 014e 0B46     		mov	r3, r1
 510              		.loc 1 214 45
 511 0150 2B48     		ldr	r0, .L21+68
 512 0152 D7F8B410 		ldr	r1, [r7, #180]
 513 0156 C900     		lsls	r1, r1, #3
 514 0158 0144     		add	r1, r1, r0
 515 015a C1E90023 		strd	r2, [r1]
 215:Core/Src/main.c ****         cpu_cycles_float[size_index] = elapsed_cycles;
 516              		.loc 1 215 38
 517 015e 2949     		ldr	r1, .L21+72
 518 0160 D7F8B430 		ldr	r3, [r7, #180]
 519 0164 FA69     		ldr	r2, [r7, #28]
 520 0166 41F82320 		str	r2, [r1, r3, lsl #2]
 216:Core/Src/main.c ****         throughput_pps_float[size_index] = throughput;
 521              		.loc 1 216 42
 522 016a 274A     		ldr	r2, .L21+76
 523 016c D7F8B430 		ldr	r3, [r7, #180]
 524 0170 DB00     		lsls	r3, r3, #3
 525 0172 D118     		adds	r1, r2, r3
 526 0174 D7E90023 		ldrd	r2, [r7]
 527 0178 C1E90023 		strd	r2, [r1]
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****         log_fpu_benchmark(w, h, elapsed_cycles, result_checksum, throughput, "FLOAT");
 528              		.loc 1 218 9
 529 017c B98D     		ldrh	r1, [r7, #44]
 530 017e F88D     		ldrh	r0, [r7, #46]
 531 0180 224B     		ldr	r3, .L21+80
 532 0182 0093     		str	r3, [sp]
 533 0184 97ED000B 		vldr.64	d0, [r7]
 534 0188 7B6A     		ldr	r3, [r7, #36]
 535 018a FA69     		ldr	r2, [r7, #28]
 536 018c FFF7FEFF 		bl	log_fpu_benchmark
 537              	.LBE6:
 190:Core/Src/main.c ****       {
 538              		.loc 1 190 67 discriminator 3
 539 0190 D7F8B430 		ldr	r3, [r7, #180]
 540 0194 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 15


 541 0196 C7F8B430 		str	r3, [r7, #180]
 542              	.L2:
 190:Core/Src/main.c ****       {
 543              		.loc 1 190 48 discriminator 1
 544 019a 0522     		movs	r2, #5
 545 019c D7F8B430 		ldr	r3, [r7, #180]
 546 01a0 9342     		cmp	r3, r2
 547 01a2 FFF457AF 		bcc	.L3
 548              	.LBE5:
 219:Core/Src/main.c ****       }
 220:Core/Src/main.c ****       
 221:Core/Src/main.c ****       /* Test 2: Double precision */
 222:Core/Src/main.c ****       g_current_test_mode = 1u; /* double */
 549              		.loc 1 222 27
 550 01a6 0A4B     		ldr	r3, .L21+20
 551 01a8 0122     		movs	r2, #1
 552 01aa 1A60     		str	r2, [r3]
 223:Core/Src/main.c ****       printf("\r\n=== FPU Impact Analysis: DOUBLE PRECISION ===\r\n");
 553              		.loc 1 223 7
 554 01ac 1848     		ldr	r0, .L21+84
 555 01ae FFF7FEFF 		bl	puts
 556              	.LBB7:
 224:Core/Src/main.c ****       for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 557              		.loc 1 224 21
 558 01b2 0023     		movs	r3, #0
 559 01b4 C7F8B030 		str	r3, [r7, #176]
 560              		.loc 1 224 7
 561 01b8 D9E0     		b	.L4
 562              	.L22:
 563 01ba 00BF     		.align	2
 564              	.L21:
 565 01bc 18000000 		.word	.LC3
 566 01c0 00000000 		.word	SystemCoreClock
 567 01c4 50000000 		.word	.LC4
 568 01c8 001000E0 		.word	-536866816
 569 01cc 00040240 		.word	1073873920
 570 01d0 00000000 		.word	g_current_test_mode
 571 01d4 64000000 		.word	.LC5
 572 01d8 00000000 		.word	kWidths
 573 01dc 00000000 		.word	kHeights
 574 01e0 00000000 		.word	g_current_width
 575 01e4 00000000 		.word	g_current_height
 576 01e8 00000000 		.word	g_current_cycles
 577 01ec 00000000 		.word	g_current_checksum
 578 01f0 00408F40 		.word	1083129856
 579 01f4 00000000 		.word	g_current_execution_time
 580 01f8 00000000 		.word	g_current_throughput
 581 01fc 00000000 		.word	checksum_float
 582 0200 00000000 		.word	execution_time_ms_float
 583 0204 00000000 		.word	cpu_cycles_float
 584 0208 00000000 		.word	throughput_pps_float
 585 020c 94000000 		.word	.LC6
 586 0210 9C000000 		.word	.LC7
 587              	.L5:
 588              	.LBB8:
 225:Core/Src/main.c ****       {
 226:Core/Src/main.c ****         uint16_t w = kWidths[size_index];
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 16


 589              		.loc 1 226 18
 590 0214 5C4A     		ldr	r2, .L23
 591 0216 D7F8B030 		ldr	r3, [r7, #176]
 592 021a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 593 021e A7F85A30 		strh	r3, [r7, #90]	@ movhi
 227:Core/Src/main.c ****         uint16_t h = kHeights[size_index];
 594              		.loc 1 227 18
 595 0222 5A4A     		ldr	r2, .L23+4
 596 0224 D7F8B030 		ldr	r3, [r7, #176]
 597 0228 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 598 022c A7F85830 		strh	r3, [r7, #88]	@ movhi
 228:Core/Src/main.c ****         g_current_width = (uint32_t)w;
 599              		.loc 1 228 27
 600 0230 B7F85A30 		ldrh	r3, [r7, #90]
 601              		.loc 1 228 25
 602 0234 564A     		ldr	r2, .L23+8
 603 0236 1360     		str	r3, [r2]
 229:Core/Src/main.c ****         g_current_height = (uint32_t)h;
 604              		.loc 1 229 28
 605 0238 B7F85830 		ldrh	r3, [r7, #88]
 606              		.loc 1 229 26
 607 023c 554A     		ldr	r2, .L23+12
 608 023e 1360     		str	r3, [r2]
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****         DWT->CYCCNT = 0; // reset cycle counter
 609              		.loc 1 231 12
 610 0240 554B     		ldr	r3, .L23+16
 611              		.loc 1 231 21
 612 0242 0022     		movs	r2, #0
 613 0244 5A60     		str	r2, [r3, #4]
 232:Core/Src/main.c ****         uint32_t start_cycles = dwt_get_cycles();
 614              		.loc 1 232 33
 615 0246 FFF7FEFF 		bl	dwt_get_cycles
 616 024a 7865     		str	r0, [r7, #84]
 233:Core/Src/main.c ****         uint32_t result_checksum = generate_mandelbrot_checksum_double(w, h, kMaxIter);
 617              		.loc 1 233 36
 618 024c 6422     		movs	r2, #100
 619 024e B7F85810 		ldrh	r1, [r7, #88]
 620 0252 B7F85A30 		ldrh	r3, [r7, #90]
 621 0256 1846     		mov	r0, r3
 622 0258 FFF7FEFF 		bl	generate_mandelbrot_checksum_double
 623 025c 3865     		str	r0, [r7, #80]
 234:Core/Src/main.c ****         uint32_t end_cycles = dwt_get_cycles();
 624              		.loc 1 234 31
 625 025e FFF7FEFF 		bl	dwt_get_cycles
 626 0262 F864     		str	r0, [r7, #76]
 235:Core/Src/main.c ****         uint32_t elapsed_cycles = end_cycles - start_cycles;
 627              		.loc 1 235 18
 628 0264 FA6C     		ldr	r2, [r7, #76]
 629 0266 7B6D     		ldr	r3, [r7, #84]
 630 0268 D31A     		subs	r3, r2, r3
 631 026a BB64     		str	r3, [r7, #72]
 236:Core/Src/main.c ****         double elapsed_seconds = (double)elapsed_cycles / (double)SystemCoreClock;
 632              		.loc 1 236 34
 633 026c B86C     		ldr	r0, [r7, #72]
 634 026e FFF7FEFF 		bl	__aeabi_ui2d
 635 0272 0446     		mov	r4, r0
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 17


 636 0274 0D46     		mov	r5, r1
 637              		.loc 1 236 59
 638 0276 494B     		ldr	r3, .L23+20
 639 0278 1B68     		ldr	r3, [r3]
 640 027a 1846     		mov	r0, r3
 641 027c FFF7FEFF 		bl	__aeabi_ui2d
 642 0280 0246     		mov	r2, r0
 643 0282 0B46     		mov	r3, r1
 644              		.loc 1 236 16
 645 0284 2046     		mov	r0, r4
 646 0286 2946     		mov	r1, r5
 647 0288 FFF7FEFF 		bl	__aeabi_ddiv
 648 028c 0246     		mov	r2, r0
 649 028e 0B46     		mov	r3, r1
 650 0290 C7E91023 		strd	r2, [r7, #64]
 237:Core/Src/main.c ****         double total_pixels = (double)w * (double)h;
 651              		.loc 1 237 31
 652 0294 B7F85A30 		ldrh	r3, [r7, #90]
 653 0298 1846     		mov	r0, r3
 654 029a FFF7FEFF 		bl	__aeabi_ui2d
 655 029e 0446     		mov	r4, r0
 656 02a0 0D46     		mov	r5, r1
 657              		.loc 1 237 43
 658 02a2 B7F85830 		ldrh	r3, [r7, #88]
 659 02a6 1846     		mov	r0, r3
 660 02a8 FFF7FEFF 		bl	__aeabi_ui2d
 661 02ac 0246     		mov	r2, r0
 662 02ae 0B46     		mov	r3, r1
 663              		.loc 1 237 16
 664 02b0 2046     		mov	r0, r4
 665 02b2 2946     		mov	r1, r5
 666 02b4 FFF7FEFF 		bl	__aeabi_dmul
 667 02b8 0246     		mov	r2, r0
 668 02ba 0B46     		mov	r3, r1
 669 02bc C7E90E23 		strd	r2, [r7, #56]
 238:Core/Src/main.c ****         double throughput = total_pixels / elapsed_seconds;
 670              		.loc 1 238 16
 671 02c0 D7E91023 		ldrd	r2, [r7, #64]
 672 02c4 D7E90E01 		ldrd	r0, [r7, #56]
 673 02c8 FFF7FEFF 		bl	__aeabi_ddiv
 674 02cc 0246     		mov	r2, r0
 675 02ce 0B46     		mov	r3, r1
 676 02d0 C7E90C23 		strd	r2, [r7, #48]
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****         /* Update Live Expressions */
 241:Core/Src/main.c ****         g_current_cycles = elapsed_cycles;
 677              		.loc 1 241 26
 678 02d4 324A     		ldr	r2, .L23+24
 679 02d6 BB6C     		ldr	r3, [r7, #72]
 680 02d8 1360     		str	r3, [r2]
 242:Core/Src/main.c ****         g_current_checksum = result_checksum;
 681              		.loc 1 242 28
 682 02da 324A     		ldr	r2, .L23+28
 683 02dc 3B6D     		ldr	r3, [r7, #80]
 684 02de 1360     		str	r3, [r2]
 243:Core/Src/main.c ****         g_current_execution_time = elapsed_seconds * 1000.0;
 685              		.loc 1 243 52
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 18


 686 02e0 4FF00002 		mov	r2, #0
 687 02e4 304B     		ldr	r3, .L23+32
 688 02e6 D7E91001 		ldrd	r0, [r7, #64]
 689 02ea FFF7FEFF 		bl	__aeabi_dmul
 690 02ee 0246     		mov	r2, r0
 691 02f0 0B46     		mov	r3, r1
 692              		.loc 1 243 34
 693 02f2 2E49     		ldr	r1, .L23+36
 694 02f4 C1E90023 		strd	r2, [r1]
 244:Core/Src/main.c ****         g_current_throughput = throughput;
 695              		.loc 1 244 30
 696 02f8 2D49     		ldr	r1, .L23+40
 697 02fa D7E90C23 		ldrd	r2, [r7, #48]
 698 02fe C1E90023 		strd	r2, [r1]
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****         /* Store double results */
 247:Core/Src/main.c ****         checksum_double[size_index] = result_checksum;
 699              		.loc 1 247 37
 700 0302 2C49     		ldr	r1, .L23+44
 701 0304 D7F8B030 		ldr	r3, [r7, #176]
 702 0308 3A6D     		ldr	r2, [r7, #80]
 703 030a 41F82320 		str	r2, [r1, r3, lsl #2]
 248:Core/Src/main.c ****         execution_time_ms_double[size_index] = elapsed_seconds * 1000.0;
 704              		.loc 1 248 64
 705 030e 4FF00002 		mov	r2, #0
 706 0312 254B     		ldr	r3, .L23+32
 707 0314 D7E91001 		ldrd	r0, [r7, #64]
 708 0318 FFF7FEFF 		bl	__aeabi_dmul
 709 031c 0246     		mov	r2, r0
 710 031e 0B46     		mov	r3, r1
 711              		.loc 1 248 46
 712 0320 2548     		ldr	r0, .L23+48
 713 0322 D7F8B010 		ldr	r1, [r7, #176]
 714 0326 C900     		lsls	r1, r1, #3
 715 0328 0144     		add	r1, r1, r0
 716 032a C1E90023 		strd	r2, [r1]
 249:Core/Src/main.c ****         cpu_cycles_double[size_index] = elapsed_cycles;
 717              		.loc 1 249 39
 718 032e 2349     		ldr	r1, .L23+52
 719 0330 D7F8B030 		ldr	r3, [r7, #176]
 720 0334 BA6C     		ldr	r2, [r7, #72]
 721 0336 41F82320 		str	r2, [r1, r3, lsl #2]
 250:Core/Src/main.c ****         throughput_pps_double[size_index] = throughput;
 722              		.loc 1 250 43
 723 033a 214A     		ldr	r2, .L23+56
 724 033c D7F8B030 		ldr	r3, [r7, #176]
 725 0340 DB00     		lsls	r3, r3, #3
 726 0342 D118     		adds	r1, r2, r3
 727 0344 D7E90C23 		ldrd	r2, [r7, #48]
 728 0348 C1E90023 		strd	r2, [r1]
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****         log_fpu_benchmark(w, h, elapsed_cycles, result_checksum, throughput, "DOUBLE");
 729              		.loc 1 252 9
 730 034c B7F85810 		ldrh	r1, [r7, #88]
 731 0350 B7F85A00 		ldrh	r0, [r7, #90]
 732 0354 1B4B     		ldr	r3, .L23+60
 733 0356 0093     		str	r3, [sp]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 19


 734 0358 97ED0C0B 		vldr.64	d0, [r7, #48]
 735 035c 3B6D     		ldr	r3, [r7, #80]
 736 035e BA6C     		ldr	r2, [r7, #72]
 737 0360 FFF7FEFF 		bl	log_fpu_benchmark
 738              	.LBE8:
 224:Core/Src/main.c ****       {
 739              		.loc 1 224 67 discriminator 3
 740 0364 D7F8B030 		ldr	r3, [r7, #176]
 741 0368 0133     		adds	r3, r3, #1
 742 036a C7F8B030 		str	r3, [r7, #176]
 743              	.L4:
 224:Core/Src/main.c ****       {
 744              		.loc 1 224 48 discriminator 1
 745 036e 0522     		movs	r2, #5
 746 0370 D7F8B030 		ldr	r3, [r7, #176]
 747 0374 9342     		cmp	r3, r2
 748 0376 FFF44DAF 		bcc	.L5
 749              	.LBE7:
 253:Core/Src/main.c ****       }
 254:Core/Src/main.c ****       
 255:Core/Src/main.c ****       /* Calculate and log comparisons */
 256:Core/Src/main.c ****       printf("\r\n=== FPU Impact Analysis: COMPARISON ===\r\n");
 750              		.loc 1 256 7
 751 037a 1348     		ldr	r0, .L23+64
 752 037c FFF7FEFF 		bl	puts
 753              	.LBB9:
 257:Core/Src/main.c ****       for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 754              		.loc 1 257 21
 755 0380 0023     		movs	r3, #0
 756 0382 C7F8AC30 		str	r3, [r7, #172]
 757              		.loc 1 257 7
 758 0386 C6E0     		b	.L6
 759              	.L24:
 760              		.align	2
 761              	.L23:
 762 0388 00000000 		.word	kWidths
 763 038c 00000000 		.word	kHeights
 764 0390 00000000 		.word	g_current_width
 765 0394 00000000 		.word	g_current_height
 766 0398 001000E0 		.word	-536866816
 767 039c 00000000 		.word	SystemCoreClock
 768 03a0 00000000 		.word	g_current_cycles
 769 03a4 00000000 		.word	g_current_checksum
 770 03a8 00408F40 		.word	1083129856
 771 03ac 00000000 		.word	g_current_execution_time
 772 03b0 00000000 		.word	g_current_throughput
 773 03b4 00000000 		.word	checksum_double
 774 03b8 00000000 		.word	execution_time_ms_double
 775 03bc 00000000 		.word	cpu_cycles_double
 776 03c0 00000000 		.word	throughput_pps_double
 777 03c4 D0000000 		.word	.LC8
 778 03c8 D8000000 		.word	.LC9
 779              	.L10:
 780              	.LBB10:
 258:Core/Src/main.c ****       {
 259:Core/Src/main.c ****         uint16_t w = kWidths[size_index];
 781              		.loc 1 259 18
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 20


 782 03cc 954A     		ldr	r2, .L25
 783 03ce D7F8AC30 		ldr	r3, [r7, #172]
 784 03d2 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 785 03d6 A7F85E30 		strh	r3, [r7, #94]	@ movhi
 260:Core/Src/main.c ****         uint16_t h = kHeights[size_index];
 786              		.loc 1 260 18
 787 03da 934A     		ldr	r2, .L25+4
 788 03dc D7F8AC30 		ldr	r3, [r7, #172]
 789 03e0 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 790 03e4 A7F85C30 		strh	r3, [r7, #92]	@ movhi
 261:Core/Src/main.c ****         
 262:Core/Src/main.c ****         /* Calculate accuracy difference */
 263:Core/Src/main.c ****         double accuracy_diff = 0.0;
 791              		.loc 1 263 16
 792 03e8 4FF00002 		mov	r2, #0
 793 03ec 4FF00003 		mov	r3, #0
 794 03f0 C7E92823 		strd	r2, [r7, #160]
 264:Core/Src/main.c ****         if (checksum_double[size_index] != 0) {
 795              		.loc 1 264 28
 796 03f4 8D4A     		ldr	r2, .L25+8
 797 03f6 D7F8AC30 		ldr	r3, [r7, #172]
 798 03fa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 799              		.loc 1 264 12
 800 03fe 002B     		cmp	r3, #0
 801 0400 36D0     		beq	.L7
 265:Core/Src/main.c ****           accuracy_diff = ((double)checksum_float[size_index] - (double)checksum_double[size_index]
 802              		.loc 1 265 50
 803 0402 8B4A     		ldr	r2, .L25+12
 804 0404 D7F8AC30 		ldr	r3, [r7, #172]
 805 0408 52F82330 		ldr	r3, [r2, r3, lsl #2]
 806              		.loc 1 265 28
 807 040c 1846     		mov	r0, r3
 808 040e FFF7FEFF 		bl	__aeabi_ui2d
 809 0412 0446     		mov	r4, r0
 810 0414 0D46     		mov	r5, r1
 811              		.loc 1 265 88
 812 0416 854A     		ldr	r2, .L25+8
 813 0418 D7F8AC30 		ldr	r3, [r7, #172]
 814 041c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 815              		.loc 1 265 65
 816 0420 1846     		mov	r0, r3
 817 0422 FFF7FEFF 		bl	__aeabi_ui2d
 818 0426 0246     		mov	r2, r0
 819 0428 0B46     		mov	r3, r1
 820              		.loc 1 265 63
 821 042a 2046     		mov	r0, r4
 822 042c 2946     		mov	r1, r5
 823 042e FFF7FEFF 		bl	__aeabi_dsub
 824 0432 0246     		mov	r2, r0
 825 0434 0B46     		mov	r3, r1
 826 0436 1446     		mov	r4, r2
 827 0438 1D46     		mov	r5, r3
 828              		.loc 1 265 127
 829 043a 7C4A     		ldr	r2, .L25+8
 830 043c D7F8AC30 		ldr	r3, [r7, #172]
 831 0440 52F82330 		ldr	r3, [r2, r3, lsl #2]
 832              		.loc 1 265 104
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 21


 833 0444 1846     		mov	r0, r3
 834 0446 FFF7FEFF 		bl	__aeabi_ui2d
 835 044a 0246     		mov	r2, r0
 836 044c 0B46     		mov	r3, r1
 837              		.loc 1 265 102
 838 044e 2046     		mov	r0, r4
 839 0450 2946     		mov	r1, r5
 840 0452 FFF7FEFF 		bl	__aeabi_ddiv
 841 0456 0246     		mov	r2, r0
 842 0458 0B46     		mov	r3, r1
 843 045a 1046     		mov	r0, r2
 844 045c 1946     		mov	r1, r3
 845              		.loc 1 265 25
 846 045e 4FF00002 		mov	r2, #0
 847 0462 744B     		ldr	r3, .L25+16
 848 0464 FFF7FEFF 		bl	__aeabi_dmul
 849 0468 0246     		mov	r2, r0
 850 046a 0B46     		mov	r3, r1
 851 046c C7E92823 		strd	r2, [r7, #160]
 852              	.L7:
 266:Core/Src/main.c ****         }
 267:Core/Src/main.c ****         accuracy_diff_percent[size_index] = accuracy_diff;
 853              		.loc 1 267 43
 854 0470 714A     		ldr	r2, .L25+20
 855 0472 D7F8AC30 		ldr	r3, [r7, #172]
 856 0476 DB00     		lsls	r3, r3, #3
 857 0478 D118     		adds	r1, r2, r3
 858 047a D7E92823 		ldrd	r2, [r7, #160]
 859 047e C1E90023 		strd	r2, [r1]
 268:Core/Src/main.c ****         
 269:Core/Src/main.c ****         /* Calculate speedup factor */
 270:Core/Src/main.c ****         double speedup = 0.0;
 860              		.loc 1 270 16
 861 0482 4FF00002 		mov	r2, #0
 862 0486 4FF00003 		mov	r3, #0
 863 048a C7E92623 		strd	r2, [r7, #152]
 271:Core/Src/main.c ****         if (execution_time_ms_float[size_index] != 0) {
 864              		.loc 1 271 36
 865 048e 6B4A     		ldr	r2, .L25+24
 866 0490 D7F8AC30 		ldr	r3, [r7, #172]
 867 0494 DB00     		lsls	r3, r3, #3
 868 0496 1344     		add	r3, r3, r2
 869 0498 D3E90001 		ldrd	r0, [r3]
 870              		.loc 1 271 12
 871 049c 4FF00002 		mov	r2, #0
 872 04a0 4FF00003 		mov	r3, #0
 873 04a4 FFF7FEFF 		bl	__aeabi_dcmpeq
 874 04a8 0346     		mov	r3, r0
 875 04aa 002B     		cmp	r3, #0
 876 04ac 13D1     		bne	.L8
 272:Core/Src/main.c ****           speedup = execution_time_ms_double[size_index] / execution_time_ms_float[size_index];
 877              		.loc 1 272 45
 878 04ae 644A     		ldr	r2, .L25+28
 879 04b0 D7F8AC30 		ldr	r3, [r7, #172]
 880 04b4 DB00     		lsls	r3, r3, #3
 881 04b6 1344     		add	r3, r3, r2
 882 04b8 D3E90001 		ldrd	r0, [r3]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 22


 883              		.loc 1 272 83
 884 04bc 5F4A     		ldr	r2, .L25+24
 885 04be D7F8AC30 		ldr	r3, [r7, #172]
 886 04c2 DB00     		lsls	r3, r3, #3
 887 04c4 1344     		add	r3, r3, r2
 888 04c6 D3E90023 		ldrd	r2, [r3]
 889              		.loc 1 272 19
 890 04ca FFF7FEFF 		bl	__aeabi_ddiv
 891 04ce 0246     		mov	r2, r0
 892 04d0 0B46     		mov	r3, r1
 893 04d2 C7E92623 		strd	r2, [r7, #152]
 894              	.L8:
 273:Core/Src/main.c ****         }
 274:Core/Src/main.c ****         speedup_factor[size_index] = speedup;
 895              		.loc 1 274 36
 896 04d6 5B4A     		ldr	r2, .L25+32
 897 04d8 D7F8AC30 		ldr	r3, [r7, #172]
 898 04dc DB00     		lsls	r3, r3, #3
 899 04de D118     		adds	r1, r2, r3
 900 04e0 D7E92623 		ldrd	r2, [r7, #152]
 901 04e4 C1E90023 		strd	r2, [r1]
 275:Core/Src/main.c ****         
 276:Core/Src/main.c ****         log_fpu_comparison(w, h, checksum_float[size_index], checksum_double[size_index], speedup);
 902              		.loc 1 276 48
 903 04e8 514A     		ldr	r2, .L25+12
 904 04ea D7F8AC30 		ldr	r3, [r7, #172]
 905 04ee 52F82320 		ldr	r2, [r2, r3, lsl #2]
 906              		.loc 1 276 77
 907 04f2 4E49     		ldr	r1, .L25+8
 908 04f4 D7F8AC30 		ldr	r3, [r7, #172]
 909 04f8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 910              		.loc 1 276 9
 911 04fc B7F85C10 		ldrh	r1, [r7, #92]
 912 0500 B7F85E00 		ldrh	r0, [r7, #94]
 913 0504 97ED260B 		vldr.64	d0, [r7, #152]
 914 0508 FFF7FEFF 		bl	log_fpu_comparison
 915              	.LBE10:
 257:Core/Src/main.c ****       {
 916              		.loc 1 257 67 discriminator 2
 917 050c D7F8AC30 		ldr	r3, [r7, #172]
 918 0510 0133     		adds	r3, r3, #1
 919 0512 C7F8AC30 		str	r3, [r7, #172]
 920              	.L6:
 257:Core/Src/main.c ****       {
 921              		.loc 1 257 48 discriminator 1
 922 0516 0522     		movs	r2, #5
 923 0518 D7F8AC30 		ldr	r3, [r7, #172]
 924 051c 9342     		cmp	r3, r2
 925 051e FFF455AF 		bcc	.L10
 926              	.LBE9:
 277:Core/Src/main.c ****       }
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****       /* End total program timing */
 280:Core/Src/main.c ****       uint32_t program_end_cycles = dwt_get_cycles();
 927              		.loc 1 280 37
 928 0522 FFF7FEFF 		bl	dwt_get_cycles
 929 0526 C7F88000 		str	r0, [r7, #128]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 23


 281:Core/Src/main.c ****       g_total_program_cycles = program_end_cycles - program_start_cycles;
 930              		.loc 1 281 51
 931 052a D7F88020 		ldr	r2, [r7, #128]
 932 052e D7F88430 		ldr	r3, [r7, #132]
 933 0532 D31A     		subs	r3, r2, r3
 934              		.loc 1 281 30
 935 0534 444A     		ldr	r2, .L25+36
 936 0536 1360     		str	r3, [r2]
 282:Core/Src/main.c ****       g_total_program_time_ms = (double)g_total_program_cycles / (double)SystemCoreClock * 1000.0;
 937              		.loc 1 282 33
 938 0538 434B     		ldr	r3, .L25+36
 939 053a 1B68     		ldr	r3, [r3]
 940 053c 1846     		mov	r0, r3
 941 053e FFF7FEFF 		bl	__aeabi_ui2d
 942 0542 0446     		mov	r4, r0
 943 0544 0D46     		mov	r5, r1
 944              		.loc 1 282 66
 945 0546 414B     		ldr	r3, .L25+40
 946 0548 1B68     		ldr	r3, [r3]
 947 054a 1846     		mov	r0, r3
 948 054c FFF7FEFF 		bl	__aeabi_ui2d
 949 0550 0246     		mov	r2, r0
 950 0552 0B46     		mov	r3, r1
 951              		.loc 1 282 64
 952 0554 2046     		mov	r0, r4
 953 0556 2946     		mov	r1, r5
 954 0558 FFF7FEFF 		bl	__aeabi_ddiv
 955 055c 0246     		mov	r2, r0
 956 055e 0B46     		mov	r3, r1
 957 0560 1046     		mov	r0, r2
 958 0562 1946     		mov	r1, r3
 959              		.loc 1 282 90
 960 0564 4FF00002 		mov	r2, #0
 961 0568 394B     		ldr	r3, .L25+44
 962 056a FFF7FEFF 		bl	__aeabi_dmul
 963 056e 0246     		mov	r2, r0
 964 0570 0B46     		mov	r3, r1
 965              		.loc 1 282 31
 966 0572 3849     		ldr	r1, .L25+48
 967 0574 C1E90023 		strd	r2, [r1]
 283:Core/Src/main.c ****       
 284:Core/Src/main.c ****       /* Calculate total time sum from individual tests */
 285:Core/Src/main.c ****       g_total_time_sum = 0.0;
 968              		.loc 1 285 24
 969 0578 3749     		ldr	r1, .L25+52
 970 057a 4FF00002 		mov	r2, #0
 971 057e 4FF00003 		mov	r3, #0
 972 0582 C1E90023 		strd	r2, [r1]
 973              	.LBB11:
 286:Core/Src/main.c ****       for (uint32_t i = 0; i < kNumResolutions; ++i) {
 974              		.loc 1 286 21
 975 0586 0023     		movs	r3, #0
 976 0588 C7F89430 		str	r3, [r7, #148]
 977              		.loc 1 286 7
 978 058c 22E0     		b	.L11
 979              	.L12:
 287:Core/Src/main.c ****         g_total_time_sum += execution_time_ms_float[i] + execution_time_ms_double[i];
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 24


 980              		.loc 1 287 52
 981 058e 2B4A     		ldr	r2, .L25+24
 982 0590 D7F89430 		ldr	r3, [r7, #148]
 983 0594 DB00     		lsls	r3, r3, #3
 984 0596 1344     		add	r3, r3, r2
 985 0598 D3E90001 		ldrd	r0, [r3]
 986              		.loc 1 287 82
 987 059c 284A     		ldr	r2, .L25+28
 988 059e D7F89430 		ldr	r3, [r7, #148]
 989 05a2 DB00     		lsls	r3, r3, #3
 990 05a4 1344     		add	r3, r3, r2
 991 05a6 D3E90023 		ldrd	r2, [r3]
 992              		.loc 1 287 56
 993 05aa FFF7FEFF 		bl	__aeabi_dadd
 994 05ae 0246     		mov	r2, r0
 995 05b0 0B46     		mov	r3, r1
 996 05b2 1046     		mov	r0, r2
 997 05b4 1946     		mov	r1, r3
 998              		.loc 1 287 26
 999 05b6 284B     		ldr	r3, .L25+52
 1000 05b8 D3E90023 		ldrd	r2, [r3]
 1001 05bc FFF7FEFF 		bl	__aeabi_dadd
 1002 05c0 0246     		mov	r2, r0
 1003 05c2 0B46     		mov	r3, r1
 1004 05c4 2449     		ldr	r1, .L25+52
 1005 05c6 C1E90023 		strd	r2, [r1]
 286:Core/Src/main.c ****       for (uint32_t i = 0; i < kNumResolutions; ++i) {
 1006              		.loc 1 286 49 discriminator 3
 1007 05ca D7F89430 		ldr	r3, [r7, #148]
 1008 05ce 0133     		adds	r3, r3, #1
 1009 05d0 C7F89430 		str	r3, [r7, #148]
 1010              	.L11:
 286:Core/Src/main.c ****       for (uint32_t i = 0; i < kNumResolutions; ++i) {
 1011              		.loc 1 286 30 discriminator 1
 1012 05d4 0522     		movs	r2, #5
 1013 05d6 D7F89430 		ldr	r3, [r7, #148]
 1014 05da 9342     		cmp	r3, r2
 1015 05dc D7D3     		bcc	.L12
 1016              	.LBE11:
 288:Core/Src/main.c ****       }
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****       /* Task 7: Fixed-Point Arithmetic Analysis */
 291:Core/Src/main.c ****       printf("\r\n=== Task 7: Fixed-Point Arithmetic Analysis ===\r\n");
 1017              		.loc 1 291 7
 1018 05de 1F48     		ldr	r0, .L25+56
 1019 05e0 FFF7FEFF 		bl	puts
 1020              	.LBB12:
 292:Core/Src/main.c ****       
 293:Core/Src/main.c ****       /* Test each scaling factor */
 294:Core/Src/main.c ****       for (uint32_t scale_idx = 0; scale_idx < kNumScalingFactors; ++scale_idx)
 1021              		.loc 1 294 21
 1022 05e4 0023     		movs	r3, #0
 1023 05e6 C7F89030 		str	r3, [r7, #144]
 1024              		.loc 1 294 7
 1025 05ea C4E0     		b	.L13
 1026              	.L16:
 1027              	.LBB13:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 25


 295:Core/Src/main.c ****       {
 296:Core/Src/main.c ****         uint32_t scale = kScalingFactors[scale_idx];
 1028              		.loc 1 296 18
 1029 05ec 1C4A     		ldr	r2, .L25+60
 1030 05ee D7F89030 		ldr	r3, [r7, #144]
 1031 05f2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1032 05f6 FB67     		str	r3, [r7, #124]
 297:Core/Src/main.c ****         g_current_scaling_factor = scale;
 1033              		.loc 1 297 34
 1034 05f8 1A4A     		ldr	r2, .L25+64
 1035 05fa FB6F     		ldr	r3, [r7, #124]
 1036 05fc 1360     		str	r3, [r2]
 298:Core/Src/main.c ****         g_current_scaling_index = scale_idx;
 1037              		.loc 1 298 33
 1038 05fe 1A4A     		ldr	r2, .L25+68
 1039 0600 D7F89030 		ldr	r3, [r7, #144]
 1040 0604 1360     		str	r3, [r2]
 299:Core/Src/main.c ****         
 300:Core/Src/main.c ****         printf("\r\n--- Scaling Factor: %s (%lu) ---\r\n", kScalingFactorNames[scale_idx], (unsigne
 1041              		.loc 1 300 9
 1042 0606 194A     		ldr	r2, .L25+72
 1043 0608 D7F89030 		ldr	r3, [r7, #144]
 1044 060c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1045 0610 FA6F     		ldr	r2, [r7, #124]
 1046 0612 1946     		mov	r1, r3
 1047 0614 1648     		ldr	r0, .L25+76
 1048 0616 FFF7FEFF 		bl	printf
 1049              	.LBB14:
 301:Core/Src/main.c ****         
 302:Core/Src/main.c ****         /* Test each resolution */
 303:Core/Src/main.c ****         for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 1050              		.loc 1 303 23
 1051 061a 0023     		movs	r3, #0
 1052 061c C7F88C30 		str	r3, [r7, #140]
 1053              		.loc 1 303 9
 1054 0620 9FE0     		b	.L14
 1055              	.L26:
 1056 0622 00BF     		.align	2
 1057              	.L25:
 1058 0624 00000000 		.word	kWidths
 1059 0628 00000000 		.word	kHeights
 1060 062c 00000000 		.word	checksum_double
 1061 0630 00000000 		.word	checksum_float
 1062 0634 00005940 		.word	1079574528
 1063 0638 00000000 		.word	accuracy_diff_percent
 1064 063c 00000000 		.word	execution_time_ms_float
 1065 0640 00000000 		.word	execution_time_ms_double
 1066 0644 00000000 		.word	speedup_factor
 1067 0648 00000000 		.word	g_total_program_cycles
 1068 064c 00000000 		.word	SystemCoreClock
 1069 0650 00408F40 		.word	1083129856
 1070 0654 00000000 		.word	g_total_program_time_ms
 1071 0658 00000000 		.word	g_total_time_sum
 1072 065c 04010000 		.word	.LC10
 1073 0660 00000000 		.word	kScalingFactors
 1074 0664 00000000 		.word	g_current_scaling_factor
 1075 0668 00000000 		.word	g_current_scaling_index
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 26


 1076 066c 00000000 		.word	kScalingFactorNames
 1077 0670 38010000 		.word	.LC11
 1078              	.L15:
 1079              	.LBB15:
 304:Core/Src/main.c ****         {
 305:Core/Src/main.c ****           uint16_t w = kWidths[size_index];
 1080              		.loc 1 305 20
 1081 0674 5A4A     		ldr	r2, .L27
 1082 0676 D7F88C30 		ldr	r3, [r7, #140]
 1083 067a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1084 067e A7F87A30 		strh	r3, [r7, #122]	@ movhi
 306:Core/Src/main.c ****           uint16_t h = kHeights[size_index];
 1085              		.loc 1 306 20
 1086 0682 584A     		ldr	r2, .L27+4
 1087 0684 D7F88C30 		ldr	r3, [r7, #140]
 1088 0688 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1089 068c A7F87830 		strh	r3, [r7, #120]	@ movhi
 307:Core/Src/main.c ****           
 308:Core/Src/main.c ****           /* Time the fixed-point calculation using DWT */
 309:Core/Src/main.c ****           DWT->CYCCNT = 0;
 1090              		.loc 1 309 14
 1091 0690 554B     		ldr	r3, .L27+8
 1092              		.loc 1 309 23
 1093 0692 0022     		movs	r2, #0
 1094 0694 5A60     		str	r2, [r3, #4]
 310:Core/Src/main.c ****           uint32_t start_cycles = dwt_get_cycles();
 1095              		.loc 1 310 35
 1096 0696 FFF7FEFF 		bl	dwt_get_cycles
 1097 069a 7867     		str	r0, [r7, #116]
 311:Core/Src/main.c ****           uint32_t result_checksum = generate_mandelbrot_checksum_fixed_point(w, h, kMaxIter, scale
 1098              		.loc 1 311 38
 1099 069c 6422     		movs	r2, #100
 1100 069e B7F87810 		ldrh	r1, [r7, #120]
 1101 06a2 B7F87A00 		ldrh	r0, [r7, #122]
 1102 06a6 FB6F     		ldr	r3, [r7, #124]
 1103 06a8 FFF7FEFF 		bl	generate_mandelbrot_checksum_fixed_point
 1104 06ac 3867     		str	r0, [r7, #112]
 312:Core/Src/main.c ****           uint32_t end_cycles = dwt_get_cycles();
 1105              		.loc 1 312 33
 1106 06ae FFF7FEFF 		bl	dwt_get_cycles
 1107 06b2 F866     		str	r0, [r7, #108]
 313:Core/Src/main.c ****           uint32_t elapsed_cycles = end_cycles - start_cycles;
 1108              		.loc 1 313 20
 1109 06b4 FA6E     		ldr	r2, [r7, #108]
 1110 06b6 7B6F     		ldr	r3, [r7, #116]
 1111 06b8 D31A     		subs	r3, r2, r3
 1112 06ba BB66     		str	r3, [r7, #104]
 314:Core/Src/main.c ****           double elapsed_ms = (double)elapsed_cycles / (double)SystemCoreClock * 1000.0;
 1113              		.loc 1 314 31
 1114 06bc B86E     		ldr	r0, [r7, #104]
 1115 06be FFF7FEFF 		bl	__aeabi_ui2d
 1116 06c2 0446     		mov	r4, r0
 1117 06c4 0D46     		mov	r5, r1
 1118              		.loc 1 314 56
 1119 06c6 494B     		ldr	r3, .L27+12
 1120 06c8 1B68     		ldr	r3, [r3]
 1121 06ca 1846     		mov	r0, r3
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 27


 1122 06cc FFF7FEFF 		bl	__aeabi_ui2d
 1123 06d0 0246     		mov	r2, r0
 1124 06d2 0B46     		mov	r3, r1
 1125              		.loc 1 314 54
 1126 06d4 2046     		mov	r0, r4
 1127 06d6 2946     		mov	r1, r5
 1128 06d8 FFF7FEFF 		bl	__aeabi_ddiv
 1129 06dc 0246     		mov	r2, r0
 1130 06de 0B46     		mov	r3, r1
 1131 06e0 1046     		mov	r0, r2
 1132 06e2 1946     		mov	r1, r3
 1133              		.loc 1 314 18
 1134 06e4 4FF00002 		mov	r2, #0
 1135 06e8 414B     		ldr	r3, .L27+16
 1136 06ea FFF7FEFF 		bl	__aeabi_dmul
 1137 06ee 0246     		mov	r2, r0
 1138 06f0 0B46     		mov	r3, r1
 1139 06f2 C7E91823 		strd	r2, [r7, #96]
 315:Core/Src/main.c ****           
 316:Core/Src/main.c ****           /* Store results */
 317:Core/Src/main.c ****           g_fixed_checksum[scale_idx][size_index] = result_checksum;
 1140              		.loc 1 317 51
 1141 06f6 3F49     		ldr	r1, .L27+20
 1142 06f8 D7F89020 		ldr	r2, [r7, #144]
 1143 06fc 1346     		mov	r3, r2
 1144 06fe 9B00     		lsls	r3, r3, #2
 1145 0700 1344     		add	r3, r3, r2
 1146 0702 D7F88C20 		ldr	r2, [r7, #140]
 1147 0706 1344     		add	r3, r3, r2
 1148 0708 3A6F     		ldr	r2, [r7, #112]
 1149 070a 41F82320 		str	r2, [r1, r3, lsl #2]
 318:Core/Src/main.c ****           g_fixed_execution_time_ms[scale_idx][size_index] = elapsed_ms;
 1150              		.loc 1 318 60
 1151 070e 3A49     		ldr	r1, .L27+24
 1152 0710 D7F89020 		ldr	r2, [r7, #144]
 1153 0714 1346     		mov	r3, r2
 1154 0716 9B00     		lsls	r3, r3, #2
 1155 0718 1344     		add	r3, r3, r2
 1156 071a D7F88C20 		ldr	r2, [r7, #140]
 1157 071e 1344     		add	r3, r3, r2
 1158 0720 DB00     		lsls	r3, r3, #3
 1159 0722 1944     		add	r1, r1, r3
 1160 0724 D7E91823 		ldrd	r2, [r7, #96]
 1161 0728 C1E90023 		strd	r2, [r1]
 319:Core/Src/main.c ****           
 320:Core/Src/main.c ****           printf("Resolution %ux%u: %.3f ms, cycles %lu, checksum %lu, overflows %lu\r\n",
 1162              		.loc 1 320 11
 1163 072c B7F87A10 		ldrh	r1, [r7, #122]
 1164 0730 B7F87800 		ldrh	r0, [r7, #120]
 321:Core/Src/main.c ****                  (unsigned)w, (unsigned)h, elapsed_ms, (unsigned long)elapsed_cycles,
 322:Core/Src/main.c ****                  (unsigned long)result_checksum, (unsigned long)g_fixed_overflow_count[scale_idx]);
 1165              		.loc 1 322 87
 1166 0734 314A     		ldr	r2, .L27+28
 1167 0736 D7F89030 		ldr	r3, [r7, #144]
 1168 073a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 320:Core/Src/main.c ****                  (unsigned)w, (unsigned)h, elapsed_ms, (unsigned long)elapsed_cycles,
 1169              		.loc 1 320 11
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 28


 1170 073e 0493     		str	r3, [sp, #16]
 1171 0740 3B6F     		ldr	r3, [r7, #112]
 1172 0742 0393     		str	r3, [sp, #12]
 1173 0744 BB6E     		ldr	r3, [r7, #104]
 1174 0746 0293     		str	r3, [sp, #8]
 1175 0748 D7E91823 		ldrd	r2, [r7, #96]
 1176 074c CDE90023 		strd	r2, [sp]
 1177 0750 0246     		mov	r2, r0
 1178 0752 2B48     		ldr	r0, .L27+32
 1179 0754 FFF7FEFF 		bl	printf
 1180              	.LBE15:
 303:Core/Src/main.c ****         {
 1181              		.loc 1 303 69 discriminator 3
 1182 0758 D7F88C30 		ldr	r3, [r7, #140]
 1183 075c 0133     		adds	r3, r3, #1
 1184 075e C7F88C30 		str	r3, [r7, #140]
 1185              	.L14:
 303:Core/Src/main.c ****         {
 1186              		.loc 1 303 50 discriminator 1
 1187 0762 0522     		movs	r2, #5
 1188 0764 D7F88C30 		ldr	r3, [r7, #140]
 1189 0768 9342     		cmp	r3, r2
 1190 076a 83D3     		bcc	.L15
 1191              	.LBE14:
 1192              	.LBE13:
 294:Core/Src/main.c ****       {
 1193              		.loc 1 294 68 discriminator 2
 1194 076c D7F89030 		ldr	r3, [r7, #144]
 1195 0770 0133     		adds	r3, r3, #1
 1196 0772 C7F89030 		str	r3, [r7, #144]
 1197              	.L13:
 294:Core/Src/main.c ****       {
 1198              		.loc 1 294 46 discriminator 1
 1199 0776 0322     		movs	r2, #3
 1200 0778 D7F89030 		ldr	r3, [r7, #144]
 1201 077c 9342     		cmp	r3, r2
 1202 077e FFF435AF 		bcc	.L16
 1203              	.LBE12:
 323:Core/Src/main.c ****         }
 324:Core/Src/main.c ****       }
 325:Core/Src/main.c ****       
 326:Core/Src/main.c ****       /* Print analysis summary */
 327:Core/Src/main.c ****       printf("\r\n=== Fixed-Point Analysis Summary ===\r\n");
 1204              		.loc 1 327 7
 1205 0782 2048     		ldr	r0, .L27+36
 1206 0784 FFF7FEFF 		bl	puts
 1207              	.LBB16:
 328:Core/Src/main.c ****       for (uint32_t scale_idx = 0; scale_idx < kNumScalingFactors; ++scale_idx)
 1208              		.loc 1 328 21
 1209 0788 0023     		movs	r3, #0
 1210 078a C7F88830 		str	r3, [r7, #136]
 1211              		.loc 1 328 7
 1212 078e 12E0     		b	.L17
 1213              	.L18:
 329:Core/Src/main.c ****       {
 330:Core/Src/main.c ****         printf("Scaling Factor %s: Total overflows = %lu\r\n", 
 1214              		.loc 1 330 9
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 29


 1215 0790 1D4A     		ldr	r2, .L27+40
 1216 0792 D7F88830 		ldr	r3, [r7, #136]
 1217 0796 52F82310 		ldr	r1, [r2, r3, lsl #2]
 331:Core/Src/main.c ****                kScalingFactorNames[scale_idx], (unsigned long)g_fixed_overflow_count[scale_idx]);
 1218              		.loc 1 331 85
 1219 079a 184A     		ldr	r2, .L27+28
 1220 079c D7F88830 		ldr	r3, [r7, #136]
 1221 07a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 330:Core/Src/main.c ****                kScalingFactorNames[scale_idx], (unsigned long)g_fixed_overflow_count[scale_idx]);
 1222              		.loc 1 330 9
 1223 07a4 1A46     		mov	r2, r3
 1224 07a6 1948     		ldr	r0, .L27+44
 1225 07a8 FFF7FEFF 		bl	printf
 328:Core/Src/main.c ****       {
 1226              		.loc 1 328 68 discriminator 3
 1227 07ac D7F88830 		ldr	r3, [r7, #136]
 1228 07b0 0133     		adds	r3, r3, #1
 1229 07b2 C7F88830 		str	r3, [r7, #136]
 1230              	.L17:
 328:Core/Src/main.c ****       {
 1231              		.loc 1 328 46 discriminator 1
 1232 07b6 0322     		movs	r2, #3
 1233 07b8 D7F88830 		ldr	r3, [r7, #136]
 1234 07bc 9342     		cmp	r3, r2
 1235 07be E7D3     		bcc	.L18
 1236              	.LBE16:
 332:Core/Src/main.c ****       }
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****       /* Visual indicator: LED1 ON, keep ON 2s, then turn both OFF */
 335:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 1237              		.loc 1 335 7
 1238 07c0 0122     		movs	r2, #1
 1239 07c2 0221     		movs	r1, #2
 1240 07c4 1248     		ldr	r0, .L27+48
 1241 07c6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 336:Core/Src/main.c ****       HAL_Delay(2000);
 1242              		.loc 1 336 7
 1243 07ca 4FF4FA60 		mov	r0, #2000
 1244 07ce FFF7FEFF 		bl	HAL_Delay
 337:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 1245              		.loc 1 337 7
 1246 07d2 0022     		movs	r2, #0
 1247 07d4 0321     		movs	r1, #3
 1248 07d6 0E48     		ldr	r0, .L27+48
 1249 07d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1250              	.LBE4:
 174:Core/Src/main.c ****     /* USER CODE END WHILE */
 1251              		.loc 1 174 3
 1252 07dc 24E4     		b	.L19
 1253              	.L28:
 1254 07de 00BF     		.align	2
 1255              	.L27:
 1256 07e0 00000000 		.word	kWidths
 1257 07e4 00000000 		.word	kHeights
 1258 07e8 001000E0 		.word	-536866816
 1259 07ec 00000000 		.word	SystemCoreClock
 1260 07f0 00408F40 		.word	1083129856
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 30


 1261 07f4 00000000 		.word	g_fixed_checksum
 1262 07f8 00000000 		.word	g_fixed_execution_time_ms
 1263 07fc 00000000 		.word	g_fixed_overflow_count
 1264 0800 60010000 		.word	.LC12
 1265 0804 A8010000 		.word	.LC13
 1266 0808 00000000 		.word	kScalingFactorNames
 1267 080c D0010000 		.word	.LC14
 1268 0810 00040240 		.word	1073873920
 1269              		.cfi_endproc
 1270              	.LFE137:
 1272              		.section	.text.SystemClock_Config,"ax",%progbits
 1273              		.align	1
 1274              		.global	SystemClock_Config
 1275              		.syntax unified
 1276              		.thumb
 1277              		.thumb_func
 1279              	SystemClock_Config:
 1280              	.LFB138:
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c ****   /* USER CODE END 3 */
 340:Core/Src/main.c **** }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** /**
 343:Core/Src/main.c ****   * @brief System Clock Configuration
 344:Core/Src/main.c ****   * @retval None
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c **** void SystemClock_Config(void)
 347:Core/Src/main.c **** {
 1281              		.loc 1 347 1
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 80
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285 0000 80B5     		push	{r7, lr}
 1286              	.LCFI3:
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 7, -8
 1289              		.cfi_offset 14, -4
 1290 0002 94B0     		sub	sp, sp, #80
 1291              	.LCFI4:
 1292              		.cfi_def_cfa_offset 88
 1293 0004 00AF     		add	r7, sp, #0
 1294              	.LCFI5:
 1295              		.cfi_def_cfa_register 7
 348:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1296              		.loc 1 348 22
 1297 0006 07F11C03 		add	r3, r7, #28
 1298 000a 3422     		movs	r2, #52
 1299 000c 0021     		movs	r1, #0
 1300 000e 1846     		mov	r0, r3
 1301 0010 FFF7FEFF 		bl	memset
 349:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1302              		.loc 1 349 22
 1303 0014 07F10803 		add	r3, r7, #8
 1304 0018 0022     		movs	r2, #0
 1305 001a 1A60     		str	r2, [r3]
 1306 001c 5A60     		str	r2, [r3, #4]
 1307 001e 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 31


 1308 0020 DA60     		str	r2, [r3, #12]
 1309 0022 1A61     		str	r2, [r3, #16]
 1310              	.LBB17:
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 352:Core/Src/main.c ****   */
 353:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 1311              		.loc 1 353 3
 1312 0024 0023     		movs	r3, #0
 1313 0026 7B60     		str	r3, [r7, #4]
 1314 0028 2A4B     		ldr	r3, .L33
 1315 002a 1B6C     		ldr	r3, [r3, #64]
 1316 002c 294A     		ldr	r2, .L33
 1317 002e 43F08053 		orr	r3, r3, #268435456
 1318 0032 1364     		str	r3, [r2, #64]
 1319 0034 274B     		ldr	r3, .L33
 1320 0036 1B6C     		ldr	r3, [r3, #64]
 1321 0038 03F08053 		and	r3, r3, #268435456
 1322 003c 7B60     		str	r3, [r7, #4]
 1323 003e 7B68     		ldr	r3, [r7, #4]
 1324              	.LBE17:
 1325              	.LBB18:
 354:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1326              		.loc 1 354 3
 1327 0040 0023     		movs	r3, #0
 1328 0042 3B60     		str	r3, [r7]
 1329 0044 244B     		ldr	r3, .L33+4
 1330 0046 1B68     		ldr	r3, [r3]
 1331 0048 23F44043 		bic	r3, r3, #49152
 1332 004c 224A     		ldr	r2, .L33+4
 1333 004e 43F48043 		orr	r3, r3, #16384
 1334 0052 1360     		str	r3, [r2]
 1335 0054 204B     		ldr	r3, .L33+4
 1336 0056 1B68     		ldr	r3, [r3]
 1337 0058 03F44043 		and	r3, r3, #49152
 1338 005c 3B60     		str	r3, [r7]
 1339 005e 3B68     		ldr	r3, [r7]
 1340              	.LBE18:
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 357:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 358:Core/Src/main.c ****   */
 359:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 1341              		.loc 1 359 36
 1342 0060 0123     		movs	r3, #1
 1343 0062 FB61     		str	r3, [r7, #28]
 360:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1344              		.loc 1 360 30
 1345 0064 4FF48033 		mov	r3, #65536
 1346 0068 3B62     		str	r3, [r7, #32]
 361:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1347              		.loc 1 361 34
 1348 006a 0223     		movs	r3, #2
 1349 006c 7B63     		str	r3, [r7, #52]
 362:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1350              		.loc 1 362 35
 1351 006e 4FF48003 		mov	r3, #4194304
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 32


 1352 0072 BB63     		str	r3, [r7, #56]
 363:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1353              		.loc 1 363 30
 1354 0074 0F23     		movs	r3, #15
 1355 0076 FB63     		str	r3, [r7, #60]
 364:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1356              		.loc 1 364 30
 1357 0078 9023     		movs	r3, #144
 1358 007a 3B64     		str	r3, [r7, #64]
 365:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1359              		.loc 1 365 30
 1360 007c 0223     		movs	r3, #2
 1361 007e 7B64     		str	r3, [r7, #68]
 366:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1362              		.loc 1 366 30
 1363 0080 0223     		movs	r3, #2
 1364 0082 BB64     		str	r3, [r7, #72]
 367:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1365              		.loc 1 367 30
 1366 0084 0223     		movs	r3, #2
 1367 0086 FB64     		str	r3, [r7, #76]
 368:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1368              		.loc 1 368 7
 1369 0088 07F11C03 		add	r3, r7, #28
 1370 008c 1846     		mov	r0, r3
 1371 008e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1372 0092 0346     		mov	r3, r0
 1373              		.loc 1 368 6 discriminator 1
 1374 0094 002B     		cmp	r3, #0
 1375 0096 01D0     		beq	.L30
 369:Core/Src/main.c ****   {
 370:Core/Src/main.c ****     Error_Handler();
 1376              		.loc 1 370 5
 1377 0098 FFF7FEFF 		bl	Error_Handler
 1378              	.L30:
 371:Core/Src/main.c ****   }
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 374:Core/Src/main.c ****   */
 375:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 1379              		.loc 1 375 31
 1380 009c 0F23     		movs	r3, #15
 1381 009e BB60     		str	r3, [r7, #8]
 376:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 377:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1382              		.loc 1 377 34
 1383 00a0 0223     		movs	r3, #2
 1384 00a2 FB60     		str	r3, [r7, #12]
 378:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1385              		.loc 1 378 35
 1386 00a4 0023     		movs	r3, #0
 1387 00a6 3B61     		str	r3, [r7, #16]
 379:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1388              		.loc 1 379 36
 1389 00a8 4FF4A053 		mov	r3, #5120
 1390 00ac 7B61     		str	r3, [r7, #20]
 380:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 33


 1391              		.loc 1 380 36
 1392 00ae 4FF48053 		mov	r3, #4096
 1393 00b2 BB61     		str	r3, [r7, #24]
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 1394              		.loc 1 382 7
 1395 00b4 07F10803 		add	r3, r7, #8
 1396 00b8 0321     		movs	r1, #3
 1397 00ba 1846     		mov	r0, r3
 1398 00bc FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1399 00c0 0346     		mov	r3, r0
 1400              		.loc 1 382 6 discriminator 1
 1401 00c2 002B     		cmp	r3, #0
 1402 00c4 01D0     		beq	.L32
 383:Core/Src/main.c ****   {
 384:Core/Src/main.c ****     Error_Handler();
 1403              		.loc 1 384 5
 1404 00c6 FFF7FEFF 		bl	Error_Handler
 1405              	.L32:
 385:Core/Src/main.c ****   }
 386:Core/Src/main.c **** }
 1406              		.loc 1 386 1
 1407 00ca 00BF     		nop
 1408 00cc 5037     		adds	r7, r7, #80
 1409              	.LCFI6:
 1410              		.cfi_def_cfa_offset 8
 1411 00ce BD46     		mov	sp, r7
 1412              	.LCFI7:
 1413              		.cfi_def_cfa_register 13
 1414              		@ sp needed
 1415 00d0 80BD     		pop	{r7, pc}
 1416              	.L34:
 1417 00d2 00BF     		.align	2
 1418              	.L33:
 1419 00d4 00380240 		.word	1073887232
 1420 00d8 00700040 		.word	1073770496
 1421              		.cfi_endproc
 1422              	.LFE138:
 1424              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1425              		.align	1
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1430              	MX_GPIO_Init:
 1431              	.LFB139:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /**
 389:Core/Src/main.c ****   * @brief GPIO Initialization Function
 390:Core/Src/main.c ****   * @param None
 391:Core/Src/main.c ****   * @retval None
 392:Core/Src/main.c ****   */
 393:Core/Src/main.c **** static void MX_GPIO_Init(void)
 394:Core/Src/main.c **** {
 1432              		.loc 1 394 1
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 32
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 34


 1436 0000 80B5     		push	{r7, lr}
 1437              	.LCFI8:
 1438              		.cfi_def_cfa_offset 8
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 1441 0002 88B0     		sub	sp, sp, #32
 1442              	.LCFI9:
 1443              		.cfi_def_cfa_offset 40
 1444 0004 00AF     		add	r7, sp, #0
 1445              	.LCFI10:
 1446              		.cfi_def_cfa_register 7
 395:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1447              		.loc 1 395 20
 1448 0006 07F10C03 		add	r3, r7, #12
 1449 000a 0022     		movs	r2, #0
 1450 000c 1A60     		str	r2, [r3]
 1451 000e 5A60     		str	r2, [r3, #4]
 1452 0010 9A60     		str	r2, [r3, #8]
 1453 0012 DA60     		str	r2, [r3, #12]
 1454 0014 1A61     		str	r2, [r3, #16]
 1455              	.LBB19:
 396:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 401:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1456              		.loc 1 401 3
 1457 0016 0023     		movs	r3, #0
 1458 0018 BB60     		str	r3, [r7, #8]
 1459 001a 1F4B     		ldr	r3, .L36
 1460 001c 1B6B     		ldr	r3, [r3, #48]
 1461 001e 1E4A     		ldr	r2, .L36
 1462 0020 43F00403 		orr	r3, r3, #4
 1463 0024 1363     		str	r3, [r2, #48]
 1464 0026 1C4B     		ldr	r3, .L36
 1465 0028 1B6B     		ldr	r3, [r3, #48]
 1466 002a 03F00403 		and	r3, r3, #4
 1467 002e BB60     		str	r3, [r7, #8]
 1468 0030 BB68     		ldr	r3, [r7, #8]
 1469              	.LBE19:
 1470              	.LBB20:
 402:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1471              		.loc 1 402 3
 1472 0032 0023     		movs	r3, #0
 1473 0034 7B60     		str	r3, [r7, #4]
 1474 0036 184B     		ldr	r3, .L36
 1475 0038 1B6B     		ldr	r3, [r3, #48]
 1476 003a 174A     		ldr	r2, .L36
 1477 003c 43F08003 		orr	r3, r3, #128
 1478 0040 1363     		str	r3, [r2, #48]
 1479 0042 154B     		ldr	r3, .L36
 1480 0044 1B6B     		ldr	r3, [r3, #48]
 1481 0046 03F08003 		and	r3, r3, #128
 1482 004a 7B60     		str	r3, [r7, #4]
 1483 004c 7B68     		ldr	r3, [r7, #4]
 1484              	.LBE20:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 35


 1485              	.LBB21:
 403:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1486              		.loc 1 403 3
 1487 004e 0023     		movs	r3, #0
 1488 0050 3B60     		str	r3, [r7]
 1489 0052 114B     		ldr	r3, .L36
 1490 0054 1B6B     		ldr	r3, [r3, #48]
 1491 0056 104A     		ldr	r2, .L36
 1492 0058 43F00203 		orr	r3, r3, #2
 1493 005c 1363     		str	r3, [r2, #48]
 1494 005e 0E4B     		ldr	r3, .L36
 1495 0060 1B6B     		ldr	r3, [r3, #48]
 1496 0062 03F00203 		and	r3, r3, #2
 1497 0066 3B60     		str	r3, [r7]
 1498 0068 3B68     		ldr	r3, [r7]
 1499              	.LBE21:
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 406:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 1500              		.loc 1 406 3
 1501 006a 0022     		movs	r2, #0
 1502 006c FF21     		movs	r1, #255
 1503 006e 0B48     		ldr	r0, .L36+4
 1504 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 407:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 410:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 411:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 1505              		.loc 1 411 23
 1506 0074 FF23     		movs	r3, #255
 1507 0076 FB60     		str	r3, [r7, #12]
 412:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 413:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1508              		.loc 1 413 24
 1509 0078 0123     		movs	r3, #1
 1510 007a 3B61     		str	r3, [r7, #16]
 414:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1511              		.loc 1 414 24
 1512 007c 0023     		movs	r3, #0
 1513 007e 7B61     		str	r3, [r7, #20]
 415:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1514              		.loc 1 415 25
 1515 0080 0023     		movs	r3, #0
 1516 0082 BB61     		str	r3, [r7, #24]
 416:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1517              		.loc 1 416 3
 1518 0084 07F10C03 		add	r3, r7, #12
 1519 0088 1946     		mov	r1, r3
 1520 008a 0448     		ldr	r0, .L36+4
 1521 008c FFF7FEFF 		bl	HAL_GPIO_Init
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 421:Core/Src/main.c **** }
 1522              		.loc 1 421 1
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 36


 1523 0090 00BF     		nop
 1524 0092 2037     		adds	r7, r7, #32
 1525              	.LCFI11:
 1526              		.cfi_def_cfa_offset 8
 1527 0094 BD46     		mov	sp, r7
 1528              	.LCFI12:
 1529              		.cfi_def_cfa_register 13
 1530              		@ sp needed
 1531 0096 80BD     		pop	{r7, pc}
 1532              	.L37:
 1533              		.align	2
 1534              	.L36:
 1535 0098 00380240 		.word	1073887232
 1536 009c 00040240 		.word	1073873920
 1537              		.cfi_endproc
 1538              	.LFE139:
 1540              		.section	.text.generate_mandelbrot_checksum_float,"ax",%progbits
 1541              		.align	1
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1546              	generate_mandelbrot_checksum_float:
 1547              	.LFB140:
 422:Core/Src/main.c **** 
 423:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 424:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 425:Core/Src/main.c **** 
 426:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_float(uint16_t width, uint16_t height, uint32_t max_it
 427:Core/Src/main.c **** {
 1548              		.loc 1 427 1
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 40
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 1553 0000 80B4     		push	{r7}
 1554              	.LCFI13:
 1555              		.cfi_def_cfa_offset 4
 1556              		.cfi_offset 7, -4
 1557 0002 8BB0     		sub	sp, sp, #44
 1558              	.LCFI14:
 1559              		.cfi_def_cfa_offset 48
 1560 0004 00AF     		add	r7, sp, #0
 1561              	.LCFI15:
 1562              		.cfi_def_cfa_register 7
 1563 0006 0346     		mov	r3, r0
 1564 0008 3A60     		str	r2, [r7]
 1565 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1566 000c 0B46     		mov	r3, r1	@ movhi
 1567 000e BB80     		strh	r3, [r7, #4]	@ movhi
 428:Core/Src/main.c **** 	uint32_t mandelbrot_sum = 0u;
 1568              		.loc 1 428 11
 1569 0010 0023     		movs	r3, #0
 1570 0012 7B62     		str	r3, [r7, #36]
 1571              	.LBB22:
 429:Core/Src/main.c **** 	for (uint16_t y = 0; y < height; ++y)
 1572              		.loc 1 429 16
 1573 0014 0023     		movs	r3, #0
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 37


 1574 0016 7B84     		strh	r3, [r7, #34]	@ movhi
 1575              		.loc 1 429 2
 1576 0018 7BE0     		b	.L39
 1577              	.L45:
 1578              	.LBB23:
 430:Core/Src/main.c **** 	{
 431:Core/Src/main.c **** 		float y0 = ((float)y / (float)height) * 2.0f - 1.0f;
 1579              		.loc 1 431 15
 1580 001a 7B8C     		ldrh	r3, [r7, #34]
 1581 001c 07EE903A 		vmov	s15, r3	@ int
 1582 0020 F8EE676A 		vcvt.f32.u32	s13, s15
 1583              		.loc 1 431 26
 1584 0024 BB88     		ldrh	r3, [r7, #4]
 1585 0026 07EE903A 		vmov	s15, r3	@ int
 1586 002a B8EE677A 		vcvt.f32.u32	s14, s15
 1587              		.loc 1 431 24
 1588 002e C6EE877A 		vdiv.f32	s15, s13, s14
 1589              		.loc 1 431 41
 1590 0032 77EEA77A 		vadd.f32	s15, s15, s15
 1591              		.loc 1 431 9
 1592 0036 B7EE007A 		vmov.f32	s14, #1.0e+0
 1593 003a 77EEC77A 		vsub.f32	s15, s15, s14
 1594 003e C7ED047A 		vstr.32	s15, [r7, #16]
 1595              	.LBB24:
 432:Core/Src/main.c **** 		for (uint16_t x = 0; x < width; ++x)
 1596              		.loc 1 432 17
 1597 0042 0023     		movs	r3, #0
 1598 0044 3B84     		strh	r3, [r7, #32]	@ movhi
 1599              		.loc 1 432 3
 1600 0046 5DE0     		b	.L40
 1601              	.L44:
 1602              	.LBB25:
 433:Core/Src/main.c **** 		{
 434:Core/Src/main.c **** 			float x0 = ((float)x / (float)width) * 3.5f - 2.5f;
 1603              		.loc 1 434 16
 1604 0048 3B8C     		ldrh	r3, [r7, #32]
 1605 004a 07EE903A 		vmov	s15, r3	@ int
 1606 004e F8EE676A 		vcvt.f32.u32	s13, s15
 1607              		.loc 1 434 27
 1608 0052 FB88     		ldrh	r3, [r7, #6]
 1609 0054 07EE903A 		vmov	s15, r3	@ int
 1610 0058 B8EE677A 		vcvt.f32.u32	s14, s15
 1611              		.loc 1 434 25
 1612 005c C6EE877A 		vdiv.f32	s15, s13, s14
 1613              		.loc 1 434 41
 1614 0060 B0EE0C7A 		vmov.f32	s14, #3.5e+0
 1615 0064 67EE877A 		vmul.f32	s15, s15, s14
 1616              		.loc 1 434 10
 1617 0068 B0EE047A 		vmov.f32	s14, #2.5e+0
 1618 006c 77EEC77A 		vsub.f32	s15, s15, s14
 1619 0070 C7ED037A 		vstr.32	s15, [r7, #12]
 435:Core/Src/main.c **** 			float xi = 0.0f;
 1620              		.loc 1 435 10
 1621 0074 4FF00003 		mov	r3, #0
 1622 0078 FB61     		str	r3, [r7, #28]	@ float
 436:Core/Src/main.c **** 			float yi = 0.0f;
 1623              		.loc 1 436 10
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 38


 1624 007a 4FF00003 		mov	r3, #0
 1625 007e BB61     		str	r3, [r7, #24]	@ float
 437:Core/Src/main.c **** 			uint32_t iteration = 0u;
 1626              		.loc 1 437 13
 1627 0080 0023     		movs	r3, #0
 1628 0082 7B61     		str	r3, [r7, #20]
 438:Core/Src/main.c **** 			while (iteration < max_iter && (xi*xi + yi*yi) <= 4.0f)
 1629              		.loc 1 438 10
 1630 0084 22E0     		b	.L41
 1631              	.L43:
 1632              	.LBB26:
 439:Core/Src/main.c **** 			{
 440:Core/Src/main.c **** 				float tmp = xi*xi - yi*yi + x0;
 1633              		.loc 1 440 19
 1634 0086 D7ED077A 		vldr.32	s15, [r7, #28]
 1635 008a 27EEA77A 		vmul.f32	s14, s15, s15
 1636              		.loc 1 440 27
 1637 008e D7ED067A 		vldr.32	s15, [r7, #24]
 1638 0092 67EEA77A 		vmul.f32	s15, s15, s15
 1639              		.loc 1 440 23
 1640 0096 77EE677A 		vsub.f32	s15, s14, s15
 1641              		.loc 1 440 11
 1642 009a 97ED037A 		vldr.32	s14, [r7, #12]
 1643 009e 77EE277A 		vadd.f32	s15, s14, s15
 1644 00a2 C7ED027A 		vstr.32	s15, [r7, #8]
 441:Core/Src/main.c **** 				yi = 2.0f*xi*yi + y0;
 1645              		.loc 1 441 14
 1646 00a6 D7ED077A 		vldr.32	s15, [r7, #28]
 1647 00aa 37EEA77A 		vadd.f32	s14, s15, s15
 1648              		.loc 1 441 17
 1649 00ae D7ED067A 		vldr.32	s15, [r7, #24]
 1650 00b2 67EE277A 		vmul.f32	s15, s14, s15
 1651              		.loc 1 441 8
 1652 00b6 97ED047A 		vldr.32	s14, [r7, #16]
 1653 00ba 77EE277A 		vadd.f32	s15, s14, s15
 1654 00be C7ED067A 		vstr.32	s15, [r7, #24]
 442:Core/Src/main.c **** 				xi = tmp;
 1655              		.loc 1 442 8
 1656 00c2 BB68     		ldr	r3, [r7, #8]	@ float
 1657 00c4 FB61     		str	r3, [r7, #28]	@ float
 443:Core/Src/main.c **** 				++iteration;
 1658              		.loc 1 443 5
 1659 00c6 7B69     		ldr	r3, [r7, #20]
 1660 00c8 0133     		adds	r3, r3, #1
 1661 00ca 7B61     		str	r3, [r7, #20]
 1662              	.L41:
 1663              	.LBE26:
 438:Core/Src/main.c **** 			{
 1664              		.loc 1 438 32
 1665 00cc 7A69     		ldr	r2, [r7, #20]
 1666 00ce 3B68     		ldr	r3, [r7]
 1667 00d0 9A42     		cmp	r2, r3
 1668 00d2 10D2     		bcs	.L42
 438:Core/Src/main.c **** 			{
 1669              		.loc 1 438 38 discriminator 1
 1670 00d4 D7ED077A 		vldr.32	s15, [r7, #28]
 1671 00d8 27EEA77A 		vmul.f32	s14, s15, s15
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 39


 438:Core/Src/main.c **** 			{
 1672              		.loc 1 438 46 discriminator 1
 1673 00dc D7ED067A 		vldr.32	s15, [r7, #24]
 1674 00e0 67EEA77A 		vmul.f32	s15, s15, s15
 438:Core/Src/main.c **** 			{
 1675              		.loc 1 438 42 discriminator 1
 1676 00e4 77EE277A 		vadd.f32	s15, s14, s15
 438:Core/Src/main.c **** 			{
 1677              		.loc 1 438 32 discriminator 1
 1678 00e8 B1EE007A 		vmov.f32	s14, #4.0e+0
 1679 00ec F4EEC77A 		vcmpe.f32	s15, s14
 1680 00f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1681 00f4 C7D9     		bls	.L43
 1682              	.L42:
 444:Core/Src/main.c **** 			}
 445:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 1683              		.loc 1 445 19
 1684 00f6 7A6A     		ldr	r2, [r7, #36]
 1685 00f8 7B69     		ldr	r3, [r7, #20]
 1686 00fa 1344     		add	r3, r3, r2
 1687 00fc 7B62     		str	r3, [r7, #36]
 1688              	.LBE25:
 432:Core/Src/main.c **** 		{
 1689              		.loc 1 432 35 discriminator 2
 1690 00fe 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 1691 0100 0133     		adds	r3, r3, #1
 1692 0102 3B84     		strh	r3, [r7, #32]	@ movhi
 1693              	.L40:
 432:Core/Src/main.c **** 		{
 1694              		.loc 1 432 26 discriminator 1
 1695 0104 3A8C     		ldrh	r2, [r7, #32]
 1696 0106 FB88     		ldrh	r3, [r7, #6]
 1697 0108 9A42     		cmp	r2, r3
 1698 010a 9DD3     		bcc	.L44
 1699              	.LBE24:
 1700              	.LBE23:
 429:Core/Src/main.c **** 	{
 1701              		.loc 1 429 35 discriminator 2
 1702 010c 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 1703 010e 0133     		adds	r3, r3, #1
 1704 0110 7B84     		strh	r3, [r7, #34]	@ movhi
 1705              	.L39:
 429:Core/Src/main.c **** 	{
 1706              		.loc 1 429 25 discriminator 1
 1707 0112 7A8C     		ldrh	r2, [r7, #34]
 1708 0114 BB88     		ldrh	r3, [r7, #4]
 1709 0116 9A42     		cmp	r2, r3
 1710 0118 FFF47FAF 		bcc	.L45
 1711              	.LBE22:
 446:Core/Src/main.c **** 		}
 447:Core/Src/main.c **** 	}
 448:Core/Src/main.c **** 	return mandelbrot_sum;
 1712              		.loc 1 448 9
 1713 011c 7B6A     		ldr	r3, [r7, #36]
 449:Core/Src/main.c **** }
 1714              		.loc 1 449 1
 1715 011e 1846     		mov	r0, r3
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 40


 1716 0120 2C37     		adds	r7, r7, #44
 1717              	.LCFI16:
 1718              		.cfi_def_cfa_offset 4
 1719 0122 BD46     		mov	sp, r7
 1720              	.LCFI17:
 1721              		.cfi_def_cfa_register 13
 1722              		@ sp needed
 1723 0124 5DF8047B 		ldr	r7, [sp], #4
 1724              	.LCFI18:
 1725              		.cfi_restore 7
 1726              		.cfi_def_cfa_offset 0
 1727 0128 7047     		bx	lr
 1728              		.cfi_endproc
 1729              	.LFE140:
 1731              		.global	__aeabi_dcmple
 1732              		.section	.text.generate_mandelbrot_checksum_double,"ax",%progbits
 1733              		.align	1
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1738              	generate_mandelbrot_checksum_double:
 1739              	.LFB141:
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_double(uint16_t width, uint16_t height, uint32_t max_i
 452:Core/Src/main.c **** {
 1740              		.loc 1 452 1
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 64
 1743              		@ frame_needed = 1, uses_anonymous_args = 0
 1744 0000 B0B5     		push	{r4, r5, r7, lr}
 1745              	.LCFI19:
 1746              		.cfi_def_cfa_offset 16
 1747              		.cfi_offset 4, -16
 1748              		.cfi_offset 5, -12
 1749              		.cfi_offset 7, -8
 1750              		.cfi_offset 14, -4
 1751 0002 90B0     		sub	sp, sp, #64
 1752              	.LCFI20:
 1753              		.cfi_def_cfa_offset 80
 1754 0004 00AF     		add	r7, sp, #0
 1755              	.LCFI21:
 1756              		.cfi_def_cfa_register 7
 1757 0006 0346     		mov	r3, r0
 1758 0008 3A60     		str	r2, [r7]
 1759 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1760 000c 0B46     		mov	r3, r1	@ movhi
 1761 000e BB80     		strh	r3, [r7, #4]	@ movhi
 453:Core/Src/main.c **** 	uint32_t mandelbrot_sum = 0u;
 1762              		.loc 1 453 11
 1763 0010 0023     		movs	r3, #0
 1764 0012 FB63     		str	r3, [r7, #60]
 1765              	.LBB27:
 454:Core/Src/main.c **** 	for (uint16_t y = 0; y < height; ++y)
 1766              		.loc 1 454 16
 1767 0014 0023     		movs	r3, #0
 1768 0016 7B87     		strh	r3, [r7, #58]	@ movhi
 1769              		.loc 1 454 2
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 41


 1770 0018 D0E0     		b	.L48
 1771              	.L54:
 1772              	.LBB28:
 455:Core/Src/main.c **** 	{
 456:Core/Src/main.c **** 		double y0 = ((double)y / (double)height) * 2.0 - 1.0;
 1773              		.loc 1 456 16
 1774 001a 7B8F     		ldrh	r3, [r7, #58]
 1775 001c 1846     		mov	r0, r3
 1776 001e FFF7FEFF 		bl	__aeabi_ui2d
 1777 0022 0446     		mov	r4, r0
 1778 0024 0D46     		mov	r5, r1
 1779              		.loc 1 456 28
 1780 0026 BB88     		ldrh	r3, [r7, #4]
 1781 0028 1846     		mov	r0, r3
 1782 002a FFF7FEFF 		bl	__aeabi_ui2d
 1783 002e 0246     		mov	r2, r0
 1784 0030 0B46     		mov	r3, r1
 1785              		.loc 1 456 26
 1786 0032 2046     		mov	r0, r4
 1787 0034 2946     		mov	r1, r5
 1788 0036 FFF7FEFF 		bl	__aeabi_ddiv
 1789 003a 0246     		mov	r2, r0
 1790 003c 0B46     		mov	r3, r1
 1791 003e 1046     		mov	r0, r2
 1792 0040 1946     		mov	r1, r3
 1793              		.loc 1 456 44
 1794 0042 0246     		mov	r2, r0
 1795 0044 0B46     		mov	r3, r1
 1796 0046 FFF7FEFF 		bl	__aeabi_dadd
 1797 004a 0246     		mov	r2, r0
 1798 004c 0B46     		mov	r3, r1
 1799 004e 1046     		mov	r0, r2
 1800 0050 1946     		mov	r1, r3
 1801              		.loc 1 456 10
 1802 0052 4FF00002 		mov	r2, #0
 1803 0056 5E4B     		ldr	r3, .L56
 1804 0058 FFF7FEFF 		bl	__aeabi_dsub
 1805 005c 0246     		mov	r2, r0
 1806 005e 0B46     		mov	r3, r1
 1807 0060 C7E90623 		strd	r2, [r7, #24]
 1808              	.LBB29:
 457:Core/Src/main.c **** 		for (uint16_t x = 0; x < width; ++x)
 1809              		.loc 1 457 17
 1810 0064 0023     		movs	r3, #0
 1811 0066 3B87     		strh	r3, [r7, #56]	@ movhi
 1812              		.loc 1 457 3
 1813 0068 A0E0     		b	.L49
 1814              	.L53:
 1815              	.LBB30:
 458:Core/Src/main.c **** 		{
 459:Core/Src/main.c **** 			double x0 = ((double)x / (double)width) * 3.5 - 2.5;
 1816              		.loc 1 459 17
 1817 006a 3B8F     		ldrh	r3, [r7, #56]
 1818 006c 1846     		mov	r0, r3
 1819 006e FFF7FEFF 		bl	__aeabi_ui2d
 1820 0072 0446     		mov	r4, r0
 1821 0074 0D46     		mov	r5, r1
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 42


 1822              		.loc 1 459 29
 1823 0076 FB88     		ldrh	r3, [r7, #6]
 1824 0078 1846     		mov	r0, r3
 1825 007a FFF7FEFF 		bl	__aeabi_ui2d
 1826 007e 0246     		mov	r2, r0
 1827 0080 0B46     		mov	r3, r1
 1828              		.loc 1 459 27
 1829 0082 2046     		mov	r0, r4
 1830 0084 2946     		mov	r1, r5
 1831 0086 FFF7FEFF 		bl	__aeabi_ddiv
 1832 008a 0246     		mov	r2, r0
 1833 008c 0B46     		mov	r3, r1
 1834 008e 1046     		mov	r0, r2
 1835 0090 1946     		mov	r1, r3
 1836              		.loc 1 459 44
 1837 0092 4FF00002 		mov	r2, #0
 1838 0096 4F4B     		ldr	r3, .L56+4
 1839 0098 FFF7FEFF 		bl	__aeabi_dmul
 1840 009c 0246     		mov	r2, r0
 1841 009e 0B46     		mov	r3, r1
 1842 00a0 1046     		mov	r0, r2
 1843 00a2 1946     		mov	r1, r3
 1844              		.loc 1 459 11
 1845 00a4 4FF00002 		mov	r2, #0
 1846 00a8 4B4B     		ldr	r3, .L56+8
 1847 00aa FFF7FEFF 		bl	__aeabi_dsub
 1848 00ae 0246     		mov	r2, r0
 1849 00b0 0B46     		mov	r3, r1
 1850 00b2 C7E90423 		strd	r2, [r7, #16]
 460:Core/Src/main.c **** 			double xi = 0.0;
 1851              		.loc 1 460 11
 1852 00b6 4FF00002 		mov	r2, #0
 1853 00ba 4FF00003 		mov	r3, #0
 1854 00be C7E90C23 		strd	r2, [r7, #48]
 461:Core/Src/main.c **** 			double yi = 0.0;
 1855              		.loc 1 461 11
 1856 00c2 4FF00002 		mov	r2, #0
 1857 00c6 4FF00003 		mov	r3, #0
 1858 00ca C7E90A23 		strd	r2, [r7, #40]
 462:Core/Src/main.c **** 			uint32_t iteration = 0u;
 1859              		.loc 1 462 13
 1860 00ce 0023     		movs	r3, #0
 1861 00d0 7B62     		str	r3, [r7, #36]
 463:Core/Src/main.c **** 			while (iteration < max_iter && (xi*xi + yi*yi) <= 4.0)
 1862              		.loc 1 463 10
 1863 00d2 3EE0     		b	.L50
 1864              	.L52:
 1865              	.LBB31:
 464:Core/Src/main.c **** 			{
 465:Core/Src/main.c **** 				double tmp = xi*xi - yi*yi + x0;
 1866              		.loc 1 465 20
 1867 00d4 D7E90C23 		ldrd	r2, [r7, #48]
 1868 00d8 D7E90C01 		ldrd	r0, [r7, #48]
 1869 00dc FFF7FEFF 		bl	__aeabi_dmul
 1870 00e0 0246     		mov	r2, r0
 1871 00e2 0B46     		mov	r3, r1
 1872 00e4 1446     		mov	r4, r2
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 43


 1873 00e6 1D46     		mov	r5, r3
 1874              		.loc 1 465 28
 1875 00e8 D7E90A23 		ldrd	r2, [r7, #40]
 1876 00ec D7E90A01 		ldrd	r0, [r7, #40]
 1877 00f0 FFF7FEFF 		bl	__aeabi_dmul
 1878 00f4 0246     		mov	r2, r0
 1879 00f6 0B46     		mov	r3, r1
 1880              		.loc 1 465 24
 1881 00f8 2046     		mov	r0, r4
 1882 00fa 2946     		mov	r1, r5
 1883 00fc FFF7FEFF 		bl	__aeabi_dsub
 1884 0100 0246     		mov	r2, r0
 1885 0102 0B46     		mov	r3, r1
 1886              		.loc 1 465 12
 1887 0104 D7E90401 		ldrd	r0, [r7, #16]
 1888 0108 FFF7FEFF 		bl	__aeabi_dadd
 1889 010c 0246     		mov	r2, r0
 1890 010e 0B46     		mov	r3, r1
 1891 0110 C7E90223 		strd	r2, [r7, #8]
 466:Core/Src/main.c **** 				yi = 2.0*xi*yi + y0;
 1892              		.loc 1 466 13
 1893 0114 D7E90C01 		ldrd	r0, [r7, #48]
 1894 0118 0246     		mov	r2, r0
 1895 011a 0B46     		mov	r3, r1
 1896 011c FFF7FEFF 		bl	__aeabi_dadd
 1897 0120 0246     		mov	r2, r0
 1898 0122 0B46     		mov	r3, r1
 1899 0124 1046     		mov	r0, r2
 1900 0126 1946     		mov	r1, r3
 1901              		.loc 1 466 16
 1902 0128 D7E90A23 		ldrd	r2, [r7, #40]
 1903 012c FFF7FEFF 		bl	__aeabi_dmul
 1904 0130 0246     		mov	r2, r0
 1905 0132 0B46     		mov	r3, r1
 1906              		.loc 1 466 8
 1907 0134 D7E90601 		ldrd	r0, [r7, #24]
 1908 0138 FFF7FEFF 		bl	__aeabi_dadd
 1909 013c 0246     		mov	r2, r0
 1910 013e 0B46     		mov	r3, r1
 1911 0140 C7E90A23 		strd	r2, [r7, #40]
 467:Core/Src/main.c **** 				xi = tmp;
 1912              		.loc 1 467 8
 1913 0144 D7E90223 		ldrd	r2, [r7, #8]
 1914 0148 C7E90C23 		strd	r2, [r7, #48]
 468:Core/Src/main.c **** 				++iteration;
 1915              		.loc 1 468 5
 1916 014c 7B6A     		ldr	r3, [r7, #36]
 1917 014e 0133     		adds	r3, r3, #1
 1918 0150 7B62     		str	r3, [r7, #36]
 1919              	.L50:
 1920              	.LBE31:
 463:Core/Src/main.c **** 			{
 1921              		.loc 1 463 32
 1922 0152 7A6A     		ldr	r2, [r7, #36]
 1923 0154 3B68     		ldr	r3, [r7]
 1924 0156 9A42     		cmp	r2, r3
 1925 0158 21D2     		bcs	.L51
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 44


 463:Core/Src/main.c **** 			{
 1926              		.loc 1 463 38 discriminator 1
 1927 015a D7E90C23 		ldrd	r2, [r7, #48]
 1928 015e D7E90C01 		ldrd	r0, [r7, #48]
 1929 0162 FFF7FEFF 		bl	__aeabi_dmul
 1930 0166 0246     		mov	r2, r0
 1931 0168 0B46     		mov	r3, r1
 1932 016a 1446     		mov	r4, r2
 1933 016c 1D46     		mov	r5, r3
 463:Core/Src/main.c **** 			{
 1934              		.loc 1 463 46 discriminator 1
 1935 016e D7E90A23 		ldrd	r2, [r7, #40]
 1936 0172 D7E90A01 		ldrd	r0, [r7, #40]
 1937 0176 FFF7FEFF 		bl	__aeabi_dmul
 1938 017a 0246     		mov	r2, r0
 1939 017c 0B46     		mov	r3, r1
 463:Core/Src/main.c **** 			{
 1940              		.loc 1 463 42 discriminator 1
 1941 017e 2046     		mov	r0, r4
 1942 0180 2946     		mov	r1, r5
 1943 0182 FFF7FEFF 		bl	__aeabi_dadd
 1944 0186 0246     		mov	r2, r0
 1945 0188 0B46     		mov	r3, r1
 1946 018a 1046     		mov	r0, r2
 1947 018c 1946     		mov	r1, r3
 463:Core/Src/main.c **** 			{
 1948              		.loc 1 463 32 discriminator 1
 1949 018e 4FF00002 		mov	r2, #0
 1950 0192 124B     		ldr	r3, .L56+12
 1951 0194 FFF7FEFF 		bl	__aeabi_dcmple
 1952 0198 0346     		mov	r3, r0
 1953 019a 002B     		cmp	r3, #0
 1954 019c 9AD1     		bne	.L52
 1955              	.L51:
 469:Core/Src/main.c **** 			}
 470:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 1956              		.loc 1 470 19
 1957 019e FA6B     		ldr	r2, [r7, #60]
 1958 01a0 7B6A     		ldr	r3, [r7, #36]
 1959 01a2 1344     		add	r3, r3, r2
 1960 01a4 FB63     		str	r3, [r7, #60]
 1961              	.LBE30:
 457:Core/Src/main.c **** 		{
 1962              		.loc 1 457 35 discriminator 2
 1963 01a6 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1964 01a8 0133     		adds	r3, r3, #1
 1965 01aa 3B87     		strh	r3, [r7, #56]	@ movhi
 1966              	.L49:
 457:Core/Src/main.c **** 		{
 1967              		.loc 1 457 26 discriminator 1
 1968 01ac 3A8F     		ldrh	r2, [r7, #56]
 1969 01ae FB88     		ldrh	r3, [r7, #6]
 1970 01b0 9A42     		cmp	r2, r3
 1971 01b2 FFF45AAF 		bcc	.L53
 1972              	.LBE29:
 1973              	.LBE28:
 454:Core/Src/main.c **** 	{
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 45


 1974              		.loc 1 454 35 discriminator 2
 1975 01b6 7B8F     		ldrh	r3, [r7, #58]	@ movhi
 1976 01b8 0133     		adds	r3, r3, #1
 1977 01ba 7B87     		strh	r3, [r7, #58]	@ movhi
 1978              	.L48:
 454:Core/Src/main.c **** 	{
 1979              		.loc 1 454 25 discriminator 1
 1980 01bc 7A8F     		ldrh	r2, [r7, #58]
 1981 01be BB88     		ldrh	r3, [r7, #4]
 1982 01c0 9A42     		cmp	r2, r3
 1983 01c2 FFF42AAF 		bcc	.L54
 1984              	.LBE27:
 471:Core/Src/main.c **** 		}
 472:Core/Src/main.c **** 	}
 473:Core/Src/main.c **** 	return mandelbrot_sum;
 1985              		.loc 1 473 9
 1986 01c6 FB6B     		ldr	r3, [r7, #60]
 474:Core/Src/main.c **** }
 1987              		.loc 1 474 1
 1988 01c8 1846     		mov	r0, r3
 1989 01ca 4037     		adds	r7, r7, #64
 1990              	.LCFI22:
 1991              		.cfi_def_cfa_offset 16
 1992 01cc BD46     		mov	sp, r7
 1993              	.LCFI23:
 1994              		.cfi_def_cfa_register 13
 1995              		@ sp needed
 1996 01ce B0BD     		pop	{r4, r5, r7, pc}
 1997              	.L57:
 1998              		.align	2
 1999              	.L56:
 2000 01d0 0000F03F 		.word	1072693248
 2001 01d4 00000C40 		.word	1074528256
 2002 01d8 00000440 		.word	1074003968
 2003 01dc 00001040 		.word	1074790400
 2004              		.cfi_endproc
 2005              	.LFE141:
 2007              		.section	.text.dwt_cycle_counter_init,"ax",%progbits
 2008              		.align	1
 2009              		.syntax unified
 2010              		.thumb
 2011              		.thumb_func
 2013              	dwt_cycle_counter_init:
 2014              	.LFB142:
 475:Core/Src/main.c **** 
 476:Core/Src/main.c **** static void dwt_cycle_counter_init(void)
 477:Core/Src/main.c **** {
 2015              		.loc 1 477 1
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 1, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
 2020 0000 80B4     		push	{r7}
 2021              	.LCFI24:
 2022              		.cfi_def_cfa_offset 4
 2023              		.cfi_offset 7, -4
 2024 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 46


 2025              	.LCFI25:
 2026              		.cfi_def_cfa_register 7
 478:Core/Src/main.c **** 	/* Enable TRC */
 479:Core/Src/main.c **** 	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 2027              		.loc 1 479 11
 2028 0004 094B     		ldr	r3, .L59
 2029 0006 DB68     		ldr	r3, [r3, #12]
 2030 0008 084A     		ldr	r2, .L59
 2031              		.loc 1 479 19
 2032 000a 43F08073 		orr	r3, r3, #16777216
 2033 000e D360     		str	r3, [r2, #12]
 480:Core/Src/main.c **** 	/* Unlock DWT (if locked) by writing the key to LAR when present */
 481:Core/Src/main.c **** #ifdef DWT_LAR
 482:Core/Src/main.c **** 	DWT->LAR = 0xC5ACCE55;
 483:Core/Src/main.c **** #endif
 484:Core/Src/main.c **** 	/* Reset the cycle counter */
 485:Core/Src/main.c **** 	DWT->CYCCNT = 0;
 2034              		.loc 1 485 5
 2035 0010 074B     		ldr	r3, .L59+4
 2036              		.loc 1 485 14
 2037 0012 0022     		movs	r2, #0
 2038 0014 5A60     		str	r2, [r3, #4]
 486:Core/Src/main.c **** 	/* Enable the cycle counter */
 487:Core/Src/main.c **** 	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 2039              		.loc 1 487 5
 2040 0016 064B     		ldr	r3, .L59+4
 2041 0018 1B68     		ldr	r3, [r3]
 2042 001a 054A     		ldr	r2, .L59+4
 2043              		.loc 1 487 12
 2044 001c 43F00103 		orr	r3, r3, #1
 2045 0020 1360     		str	r3, [r2]
 488:Core/Src/main.c **** }
 2046              		.loc 1 488 1
 2047 0022 00BF     		nop
 2048 0024 BD46     		mov	sp, r7
 2049              	.LCFI26:
 2050              		.cfi_def_cfa_register 13
 2051              		@ sp needed
 2052 0026 5DF8047B 		ldr	r7, [sp], #4
 2053              	.LCFI27:
 2054              		.cfi_restore 7
 2055              		.cfi_def_cfa_offset 0
 2056 002a 7047     		bx	lr
 2057              	.L60:
 2058              		.align	2
 2059              	.L59:
 2060 002c F0ED00E0 		.word	-536810000
 2061 0030 001000E0 		.word	-536866816
 2062              		.cfi_endproc
 2063              	.LFE142:
 2065              		.section	.text.dwt_get_cycles,"ax",%progbits
 2066              		.align	1
 2067              		.syntax unified
 2068              		.thumb
 2069              		.thumb_func
 2071              	dwt_get_cycles:
 2072              	.LFB143:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 47


 489:Core/Src/main.c **** 
 490:Core/Src/main.c **** static inline uint32_t dwt_get_cycles(void)
 491:Core/Src/main.c **** {
 2073              		.loc 1 491 1
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
 2078 0000 80B4     		push	{r7}
 2079              	.LCFI28:
 2080              		.cfi_def_cfa_offset 4
 2081              		.cfi_offset 7, -4
 2082 0002 00AF     		add	r7, sp, #0
 2083              	.LCFI29:
 2084              		.cfi_def_cfa_register 7
 492:Core/Src/main.c **** 	return DWT->CYCCNT;
 2085              		.loc 1 492 12
 2086 0004 034B     		ldr	r3, .L63
 2087 0006 5B68     		ldr	r3, [r3, #4]
 493:Core/Src/main.c **** }
 2088              		.loc 1 493 1
 2089 0008 1846     		mov	r0, r3
 2090 000a BD46     		mov	sp, r7
 2091              	.LCFI30:
 2092              		.cfi_def_cfa_register 13
 2093              		@ sp needed
 2094 000c 5DF8047B 		ldr	r7, [sp], #4
 2095              	.LCFI31:
 2096              		.cfi_restore 7
 2097              		.cfi_def_cfa_offset 0
 2098 0010 7047     		bx	lr
 2099              	.L64:
 2100 0012 00BF     		.align	2
 2101              	.L63:
 2102 0014 001000E0 		.word	-536866816
 2103              		.cfi_endproc
 2104              	.LFE143:
 2106              		.section	.rodata
 2107 01fb 00       		.align	2
 2108              	.LC15:
 2109 01fc 25733A20 		.ascii	"%s: %ux%u, cycles %lu, time %.6f s, throughput %.0f"
 2109      25757825 
 2109      752C2063 
 2109      79636C65 
 2109      7320256C 
 2110 022f 20707073 		.ascii	" pps, checksum %lu\015\012\000"
 2110      2C206368 
 2110      65636B73 
 2110      756D2025 
 2110      6C750D0A 
 2111              		.section	.text.log_fpu_benchmark,"ax",%progbits
 2112              		.align	1
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2117              	log_fpu_benchmark:
 2118              	.LFB144:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 48


 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** static void log_fpu_benchmark(uint16_t width, uint16_t height, uint32_t cycles, uint32_t checksum, 
 496:Core/Src/main.c **** {
 2119              		.loc 1 496 1
 2120              		.cfi_startproc
 2121              		@ args = 4, pretend = 0, frame = 32
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
 2123 0000 B0B5     		push	{r4, r5, r7, lr}
 2124              	.LCFI32:
 2125              		.cfi_def_cfa_offset 16
 2126              		.cfi_offset 4, -16
 2127              		.cfi_offset 5, -12
 2128              		.cfi_offset 7, -8
 2129              		.cfi_offset 14, -4
 2130 0002 90B0     		sub	sp, sp, #64
 2131              	.LCFI33:
 2132              		.cfi_def_cfa_offset 80
 2133 0004 08AF     		add	r7, sp, #32
 2134              	.LCFI34:
 2135              		.cfi_def_cfa 7, 48
 2136 0006 3A61     		str	r2, [r7, #16]
 2137 0008 FB60     		str	r3, [r7, #12]
 2138 000a 87ED000B 		vstr.64	d0, [r7]
 2139 000e 0346     		mov	r3, r0	@ movhi
 2140 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 2141 0012 0B46     		mov	r3, r1	@ movhi
 2142 0014 BB82     		strh	r3, [r7, #20]	@ movhi
 497:Core/Src/main.c **** 	double seconds = (double)cycles / (double)SystemCoreClock;
 2143              		.loc 1 497 19
 2144 0016 3869     		ldr	r0, [r7, #16]
 2145 0018 FFF7FEFF 		bl	__aeabi_ui2d
 2146 001c 0446     		mov	r4, r0
 2147 001e 0D46     		mov	r5, r1
 2148              		.loc 1 497 36
 2149 0020 134B     		ldr	r3, .L66
 2150 0022 1B68     		ldr	r3, [r3]
 2151 0024 1846     		mov	r0, r3
 2152 0026 FFF7FEFF 		bl	__aeabi_ui2d
 2153 002a 0246     		mov	r2, r0
 2154 002c 0B46     		mov	r3, r1
 2155              		.loc 1 497 9
 2156 002e 2046     		mov	r0, r4
 2157 0030 2946     		mov	r1, r5
 2158 0032 FFF7FEFF 		bl	__aeabi_ddiv
 2159 0036 0246     		mov	r2, r0
 2160 0038 0B46     		mov	r3, r1
 2161 003a C7E90623 		strd	r2, [r7, #24]
 498:Core/Src/main.c **** 	printf("%s: %ux%u, cycles %lu, time %.6f s, throughput %.0f pps, checksum %lu\r\n",
 2162              		.loc 1 498 2
 2163 003e F98A     		ldrh	r1, [r7, #22]
 2164 0040 B88A     		ldrh	r0, [r7, #20]
 2165 0042 FB68     		ldr	r3, [r7, #12]
 2166 0044 0693     		str	r3, [sp, #24]
 2167 0046 D7E90023 		ldrd	r2, [r7]
 2168 004a CDE90423 		strd	r2, [sp, #16]
 2169 004e D7E90623 		ldrd	r2, [r7, #24]
 2170 0052 CDE90223 		strd	r2, [sp, #8]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 49


 2171 0056 3B69     		ldr	r3, [r7, #16]
 2172 0058 0093     		str	r3, [sp]
 2173 005a 0346     		mov	r3, r0
 2174 005c 0A46     		mov	r2, r1
 2175 005e 396B     		ldr	r1, [r7, #48]
 2176 0060 0448     		ldr	r0, .L66+4
 2177 0062 FFF7FEFF 		bl	printf
 499:Core/Src/main.c **** 			precision, (unsigned)width, (unsigned)height, (unsigned long)cycles, seconds, throughput, (unsig
 500:Core/Src/main.c **** }
 2178              		.loc 1 500 1
 2179 0066 00BF     		nop
 2180 0068 2037     		adds	r7, r7, #32
 2181              	.LCFI35:
 2182              		.cfi_def_cfa_offset 16
 2183 006a BD46     		mov	sp, r7
 2184              	.LCFI36:
 2185              		.cfi_def_cfa_register 13
 2186              		@ sp needed
 2187 006c B0BD     		pop	{r4, r5, r7, pc}
 2188              	.L67:
 2189 006e 00BF     		.align	2
 2190              	.L66:
 2191 0070 00000000 		.word	SystemCoreClock
 2192 0074 FC010000 		.word	.LC15
 2193              		.cfi_endproc
 2194              	.LFE144:
 2196              		.section	.rodata
 2197              		.align	2
 2198              	.LC16:
 2199 0244 434F4D50 		.ascii	"COMPARISON %ux%u: Float checksum %lu, Double checks"
 2199      41524953 
 2199      4F4E2025 
 2199      75782575 
 2199      3A20466C 
 2200 0277 756D2025 		.ascii	"um %lu, Speedup %.2fx\015\012\000"
 2200      6C752C20 
 2200      53706565 
 2200      64757020 
 2200      252E3266 
 2201              		.section	.text.log_fpu_comparison,"ax",%progbits
 2202              		.align	1
 2203              		.syntax unified
 2204              		.thumb
 2205              		.thumb_func
 2207              	log_fpu_comparison:
 2208              	.LFB145:
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** static void log_fpu_comparison(uint16_t width, uint16_t height, uint32_t checksum_float, uint32_t c
 503:Core/Src/main.c **** {
 2209              		.loc 1 503 1
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 24
 2212              		@ frame_needed = 1, uses_anonymous_args = 0
 2213 0000 80B5     		push	{r7, lr}
 2214              	.LCFI37:
 2215              		.cfi_def_cfa_offset 8
 2216              		.cfi_offset 7, -8
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 50


 2217              		.cfi_offset 14, -4
 2218 0002 8AB0     		sub	sp, sp, #40
 2219              	.LCFI38:
 2220              		.cfi_def_cfa_offset 48
 2221 0004 04AF     		add	r7, sp, #16
 2222              	.LCFI39:
 2223              		.cfi_def_cfa 7, 32
 2224 0006 3A61     		str	r2, [r7, #16]
 2225 0008 FB60     		str	r3, [r7, #12]
 2226 000a 87ED000B 		vstr.64	d0, [r7]
 2227 000e 0346     		mov	r3, r0	@ movhi
 2228 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 2229 0012 0B46     		mov	r3, r1	@ movhi
 2230 0014 BB82     		strh	r3, [r7, #20]	@ movhi
 504:Core/Src/main.c **** 	printf("COMPARISON %ux%u: Float checksum %lu, Double checksum %lu, Speedup %.2fx\r\n",
 2231              		.loc 1 504 2
 2232 0016 F98A     		ldrh	r1, [r7, #22]
 2233 0018 B88A     		ldrh	r0, [r7, #20]
 2234 001a D7E90023 		ldrd	r2, [r7]
 2235 001e CDE90223 		strd	r2, [sp, #8]
 2236 0022 FB68     		ldr	r3, [r7, #12]
 2237 0024 0093     		str	r3, [sp]
 2238 0026 3B69     		ldr	r3, [r7, #16]
 2239 0028 0246     		mov	r2, r0
 2240 002a 0348     		ldr	r0, .L69
 2241 002c FFF7FEFF 		bl	printf
 505:Core/Src/main.c **** 			(unsigned)width, (unsigned)height, (unsigned long)checksum_float, (unsigned long)checksum_double
 506:Core/Src/main.c **** }
 2242              		.loc 1 506 1
 2243 0030 00BF     		nop
 2244 0032 1837     		adds	r7, r7, #24
 2245              	.LCFI40:
 2246              		.cfi_def_cfa_offset 8
 2247 0034 BD46     		mov	sp, r7
 2248              	.LCFI41:
 2249              		.cfi_def_cfa_register 13
 2250              		@ sp needed
 2251 0036 80BD     		pop	{r7, pc}
 2252              	.L70:
 2253              		.align	2
 2254              	.L69:
 2255 0038 44020000 		.word	.LC16
 2256              		.cfi_endproc
 2257              	.LFE145:
 2259              		.section	.text.__io_putchar,"ax",%progbits
 2260              		.align	1
 2261              		.global	__io_putchar
 2262              		.syntax unified
 2263              		.thumb
 2264              		.thumb_func
 2266              	__io_putchar:
 2267              	.LFB146:
 507:Core/Src/main.c **** 
 508:Core/Src/main.c **** int __io_putchar(int ch)
 509:Core/Src/main.c **** {
 2268              		.loc 1 509 1
 2269              		.cfi_startproc
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 51


 2270              		@ args = 0, pretend = 0, frame = 8
 2271              		@ frame_needed = 1, uses_anonymous_args = 0
 2272              		@ link register save eliminated.
 2273 0000 80B4     		push	{r7}
 2274              	.LCFI42:
 2275              		.cfi_def_cfa_offset 4
 2276              		.cfi_offset 7, -4
 2277 0002 83B0     		sub	sp, sp, #12
 2278              	.LCFI43:
 2279              		.cfi_def_cfa_offset 16
 2280 0004 00AF     		add	r7, sp, #0
 2281              	.LCFI44:
 2282              		.cfi_def_cfa_register 7
 2283 0006 7860     		str	r0, [r7, #4]
 510:Core/Src/main.c **** 	/* Route to ITM stimulus port 0 for SWV view. Requires debugger and SWO enabled. */
 511:Core/Src/main.c **** 	if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 2284              		.loc 1 511 10
 2285 0008 4FF06043 		mov	r3, #-536870912
 2286 000c D3F8803E 		ldr	r3, [r3, #3712]
 2287              		.loc 1 511 16
 2288 0010 03F00103 		and	r3, r3, #1
 2289              		.loc 1 511 5
 2290 0014 002B     		cmp	r3, #0
 2291 0016 13D0     		beq	.L72
 2292              		.loc 1 511 51 discriminator 1
 2293 0018 0D4B     		ldr	r3, .L76
 2294 001a DB68     		ldr	r3, [r3, #12]
 2295              		.loc 1 511 59 discriminator 1
 2296 001c 03F08073 		and	r3, r3, #16777216
 2297              		.loc 1 511 38 discriminator 1
 2298 0020 002B     		cmp	r3, #0
 2299 0022 0DD0     		beq	.L72
 512:Core/Src/main.c **** 	{
 513:Core/Src/main.c **** 		while (ITM->PORT[0].u32 == 0) { __NOP(); }
 2300              		.loc 1 513 9
 2301 0024 00E0     		b	.L73
 2302              	.L74:
 2303              		.loc 1 513 35 discriminator 2
 2304              		.syntax unified
 2305              	@ 513 "Core/Src/main.c" 1
 2306 0026 00BF     		nop
 2307              	@ 0 "" 2
 2308              		.thumb
 2309              		.syntax unified
 2310              	.L73:
 2311              		.loc 1 513 13 discriminator 1
 2312 0028 4FF06043 		mov	r3, #-536870912
 2313              		.loc 1 513 22 discriminator 1
 2314 002c 1B68     		ldr	r3, [r3]
 2315              		.loc 1 513 27 discriminator 1
 2316 002e 002B     		cmp	r3, #0
 2317 0030 F9D0     		beq	.L74
 514:Core/Src/main.c **** 		ITM->PORT[0].u8 = (uint8_t)ch;
 2318              		.loc 1 514 6
 2319 0032 4FF06043 		mov	r3, #-536870912
 2320              		.loc 1 514 21
 2321 0036 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 52


 2322 0038 D2B2     		uxtb	r2, r2
 2323              		.loc 1 514 19
 2324 003a 1A70     		strb	r2, [r3]
 515:Core/Src/main.c **** 		return ch;
 2325              		.loc 1 515 10
 2326 003c 7B68     		ldr	r3, [r7, #4]
 2327 003e 00E0     		b	.L75
 2328              	.L72:
 516:Core/Src/main.c **** 	}
 517:Core/Src/main.c **** 	/* Fallback: do nothing */
 518:Core/Src/main.c **** 	return ch;
 2329              		.loc 1 518 9
 2330 0040 7B68     		ldr	r3, [r7, #4]
 2331              	.L75:
 519:Core/Src/main.c **** }
 2332              		.loc 1 519 1
 2333 0042 1846     		mov	r0, r3
 2334 0044 0C37     		adds	r7, r7, #12
 2335              	.LCFI45:
 2336              		.cfi_def_cfa_offset 4
 2337 0046 BD46     		mov	sp, r7
 2338              	.LCFI46:
 2339              		.cfi_def_cfa_register 13
 2340              		@ sp needed
 2341 0048 5DF8047B 		ldr	r7, [sp], #4
 2342              	.LCFI47:
 2343              		.cfi_restore 7
 2344              		.cfi_def_cfa_offset 0
 2345 004c 7047     		bx	lr
 2346              	.L77:
 2347 004e 00BF     		.align	2
 2348              	.L76:
 2349 0050 F0ED00E0 		.word	-536810000
 2350              		.cfi_endproc
 2351              	.LFE146:
 2353              		.global	__aeabi_ldivmod
 2354              		.section	.text.fixed_multiply,"ax",%progbits
 2355              		.align	1
 2356              		.syntax unified
 2357              		.thumb
 2358              		.thumb_func
 2360              	fixed_multiply:
 2361              	.LFB147:
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** /* Task 7: Fixed-point arithmetic functions */
 522:Core/Src/main.c **** static int64_t fixed_multiply(int64_t a, int64_t b, uint32_t scale)
 523:Core/Src/main.c **** {
 2362              		.loc 1 523 1
 2363              		.cfi_startproc
 2364              		@ args = 4, pretend = 0, frame = 24
 2365              		@ frame_needed = 1, uses_anonymous_args = 0
 2366 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 2367              	.LCFI48:
 2368              		.cfi_def_cfa_offset 24
 2369              		.cfi_offset 4, -24
 2370              		.cfi_offset 5, -20
 2371              		.cfi_offset 7, -16
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 53


 2372              		.cfi_offset 8, -12
 2373              		.cfi_offset 9, -8
 2374              		.cfi_offset 14, -4
 2375 0004 86B0     		sub	sp, sp, #24
 2376              	.LCFI49:
 2377              		.cfi_def_cfa_offset 48
 2378 0006 00AF     		add	r7, sp, #0
 2379              	.LCFI50:
 2380              		.cfi_def_cfa_register 7
 2381 0008 C7E90201 		strd	r0, [r7, #8]
 2382 000c C7E90023 		strd	r2, [r7]
 524:Core/Src/main.c **** 	/* Multiply two fixed-point numbers and scale back */
 525:Core/Src/main.c **** 	int64_t result = (a * b) / (int64_t)scale;
 2383              		.loc 1 525 22
 2384 0010 FB68     		ldr	r3, [r7, #12]
 2385 0012 3A68     		ldr	r2, [r7]
 2386 0014 03FB02F2 		mul	r2, r3, r2
 2387 0018 7B68     		ldr	r3, [r7, #4]
 2388 001a B968     		ldr	r1, [r7, #8]
 2389 001c 01FB03F3 		mul	r3, r1, r3
 2390 0020 1344     		add	r3, r3, r2
 2391 0022 B968     		ldr	r1, [r7, #8]
 2392 0024 3A68     		ldr	r2, [r7]
 2393 0026 A1FB0245 		umull	r4, r5, r1, r2
 2394 002a 2B44     		add	r3, r3, r5
 2395 002c 1D46     		mov	r5, r3
 2396              		.loc 1 525 29
 2397 002e 3B6B     		ldr	r3, [r7, #48]
 2398 0030 0022     		movs	r2, #0
 2399 0032 9846     		mov	r8, r3
 2400 0034 9146     		mov	r9, r2
 2401              		.loc 1 525 10
 2402 0036 4246     		mov	r2, r8
 2403 0038 4B46     		mov	r3, r9
 2404 003a 2046     		mov	r0, r4
 2405 003c 2946     		mov	r1, r5
 2406 003e FFF7FEFF 		bl	__aeabi_ldivmod
 2407 0042 0246     		mov	r2, r0
 2408 0044 0B46     		mov	r3, r1
 2409 0046 C7E90423 		strd	r2, [r7, #16]
 526:Core/Src/main.c **** 	return result;
 2410              		.loc 1 526 9
 2411 004a D7E90423 		ldrd	r2, [r7, #16]
 527:Core/Src/main.c **** }
 2412              		.loc 1 527 1
 2413 004e 1046     		mov	r0, r2
 2414 0050 1946     		mov	r1, r3
 2415 0052 1837     		adds	r7, r7, #24
 2416              	.LCFI51:
 2417              		.cfi_def_cfa_offset 24
 2418 0054 BD46     		mov	sp, r7
 2419              	.LCFI52:
 2420              		.cfi_def_cfa_register 13
 2421              		@ sp needed
 2422 0056 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 2423              		.cfi_endproc
 2424              	.LFE147:
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 54


 2426              		.section	.text.fixed_add,"ax",%progbits
 2427              		.align	1
 2428              		.syntax unified
 2429              		.thumb
 2430              		.thumb_func
 2432              	fixed_add:
 2433              	.LFB148:
 528:Core/Src/main.c **** 
 529:Core/Src/main.c **** static int64_t fixed_add(int64_t a, int64_t b)
 530:Core/Src/main.c **** {
 2434              		.loc 1 530 1
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 16
 2437              		@ frame_needed = 1, uses_anonymous_args = 0
 2438              		@ link register save eliminated.
 2439 0000 B0B4     		push	{r4, r5, r7}
 2440              	.LCFI53:
 2441              		.cfi_def_cfa_offset 12
 2442              		.cfi_offset 4, -12
 2443              		.cfi_offset 5, -8
 2444              		.cfi_offset 7, -4
 2445 0002 85B0     		sub	sp, sp, #20
 2446              	.LCFI54:
 2447              		.cfi_def_cfa_offset 32
 2448 0004 00AF     		add	r7, sp, #0
 2449              	.LCFI55:
 2450              		.cfi_def_cfa_register 7
 2451 0006 C7E90201 		strd	r0, [r7, #8]
 2452 000a C7E90023 		strd	r2, [r7]
 531:Core/Src/main.c **** 	return a + b;
 2453              		.loc 1 531 11
 2454 000e D7E90201 		ldrd	r0, [r7, #8]
 2455 0012 D7E90023 		ldrd	r2, [r7]
 2456 0016 8418     		adds	r4, r0, r2
 2457 0018 41EB0305 		adc	r5, r1, r3
 2458              		.loc 1 531 11 is_stmt 0 discriminator 1
 2459 001c 2246     		mov	r2, r4
 2460 001e 2B46     		mov	r3, r5
 532:Core/Src/main.c **** }
 2461              		.loc 1 532 1 is_stmt 1
 2462 0020 1046     		mov	r0, r2
 2463 0022 1946     		mov	r1, r3
 2464 0024 1437     		adds	r7, r7, #20
 2465              	.LCFI56:
 2466              		.cfi_def_cfa_offset 12
 2467 0026 BD46     		mov	sp, r7
 2468              	.LCFI57:
 2469              		.cfi_def_cfa_register 13
 2470              		@ sp needed
 2471 0028 B0BC     		pop	{r4, r5, r7}
 2472              	.LCFI58:
 2473              		.cfi_restore 7
 2474              		.cfi_restore 5
 2475              		.cfi_restore 4
 2476              		.cfi_def_cfa_offset 0
 2477 002a 7047     		bx	lr
 2478              		.cfi_endproc
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 55


 2479              	.LFE148:
 2481              		.global	__aeabi_d2lz
 2482              		.section	.text.double_to_fixed,"ax",%progbits
 2483              		.align	1
 2484              		.syntax unified
 2485              		.thumb
 2486              		.thumb_func
 2488              	double_to_fixed:
 2489              	.LFB149:
 533:Core/Src/main.c **** 
 534:Core/Src/main.c **** static int64_t double_to_fixed(double value, uint32_t scale)
 535:Core/Src/main.c **** {
 2490              		.loc 1 535 1
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 16
 2493              		@ frame_needed = 1, uses_anonymous_args = 0
 2494 0000 80B5     		push	{r7, lr}
 2495              	.LCFI59:
 2496              		.cfi_def_cfa_offset 8
 2497              		.cfi_offset 7, -8
 2498              		.cfi_offset 14, -4
 2499 0002 84B0     		sub	sp, sp, #16
 2500              	.LCFI60:
 2501              		.cfi_def_cfa_offset 24
 2502 0004 00AF     		add	r7, sp, #0
 2503              	.LCFI61:
 2504              		.cfi_def_cfa_register 7
 2505 0006 87ED020B 		vstr.64	d0, [r7, #8]
 2506 000a 7860     		str	r0, [r7, #4]
 536:Core/Src/main.c **** 	return (int64_t)(value * (double)scale);
 2507              		.loc 1 536 27
 2508 000c 7868     		ldr	r0, [r7, #4]
 2509 000e FFF7FEFF 		bl	__aeabi_ui2d
 2510              		.loc 1 536 25
 2511 0012 D7E90223 		ldrd	r2, [r7, #8]
 2512 0016 FFF7FEFF 		bl	__aeabi_dmul
 2513 001a 0246     		mov	r2, r0
 2514 001c 0B46     		mov	r3, r1
 2515              		.loc 1 536 9
 2516 001e 1046     		mov	r0, r2
 2517 0020 1946     		mov	r1, r3
 2518 0022 FFF7FEFF 		bl	__aeabi_d2lz
 2519 0026 0246     		mov	r2, r0
 2520 0028 0B46     		mov	r3, r1
 537:Core/Src/main.c **** }
 2521              		.loc 1 537 1
 2522 002a 1046     		mov	r0, r2
 2523 002c 1946     		mov	r1, r3
 2524 002e 1037     		adds	r7, r7, #16
 2525              	.LCFI62:
 2526              		.cfi_def_cfa_offset 8
 2527 0030 BD46     		mov	sp, r7
 2528              	.LCFI63:
 2529              		.cfi_def_cfa_register 13
 2530              		@ sp needed
 2531 0032 80BD     		pop	{r7, pc}
 2532              		.cfi_endproc
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 56


 2533              	.LFE149:
 2535              		.global	__aeabi_l2d
 2536              		.section	.text.fixed_to_double,"ax",%progbits
 2537              		.align	1
 2538              		.syntax unified
 2539              		.thumb
 2540              		.thumb_func
 2542              	fixed_to_double:
 2543              	.LFB150:
 538:Core/Src/main.c **** 
 539:Core/Src/main.c **** static double fixed_to_double(int64_t value, uint32_t scale)
 540:Core/Src/main.c **** {
 2544              		.loc 1 540 1
 2545              		.cfi_startproc
 2546              		@ args = 0, pretend = 0, frame = 16
 2547              		@ frame_needed = 1, uses_anonymous_args = 0
 2548 0000 B0B5     		push	{r4, r5, r7, lr}
 2549              	.LCFI64:
 2550              		.cfi_def_cfa_offset 16
 2551              		.cfi_offset 4, -16
 2552              		.cfi_offset 5, -12
 2553              		.cfi_offset 7, -8
 2554              		.cfi_offset 14, -4
 2555 0002 84B0     		sub	sp, sp, #16
 2556              	.LCFI65:
 2557              		.cfi_def_cfa_offset 32
 2558 0004 00AF     		add	r7, sp, #0
 2559              	.LCFI66:
 2560              		.cfi_def_cfa_register 7
 2561 0006 C7E90201 		strd	r0, [r7, #8]
 2562 000a 7A60     		str	r2, [r7, #4]
 541:Core/Src/main.c **** 	return (double)value / (double)scale;
 2563              		.loc 1 541 9
 2564 000c D7E90201 		ldrd	r0, [r7, #8]
 2565 0010 FFF7FEFF 		bl	__aeabi_l2d
 2566 0014 0446     		mov	r4, r0
 2567 0016 0D46     		mov	r5, r1
 2568              		.loc 1 541 25
 2569 0018 7868     		ldr	r0, [r7, #4]
 2570 001a FFF7FEFF 		bl	__aeabi_ui2d
 2571 001e 0246     		mov	r2, r0
 2572 0020 0B46     		mov	r3, r1
 2573              		.loc 1 541 23
 2574 0022 2046     		mov	r0, r4
 2575 0024 2946     		mov	r1, r5
 2576 0026 FFF7FEFF 		bl	__aeabi_ddiv
 2577 002a 0246     		mov	r2, r0
 2578 002c 0B46     		mov	r3, r1
 2579              		.loc 1 541 23 is_stmt 0 discriminator 1
 2580 002e 43EC172B 		vmov	d7, r2, r3
 542:Core/Src/main.c **** }
 2581              		.loc 1 542 1 is_stmt 1
 2582 0032 B0EE470A 		vmov.f32	s0, s14
 2583 0036 F0EE670A 		vmov.f32	s1, s15
 2584 003a 1037     		adds	r7, r7, #16
 2585              	.LCFI67:
 2586              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 57


 2587 003c BD46     		mov	sp, r7
 2588              	.LCFI68:
 2589              		.cfi_def_cfa_register 13
 2590              		@ sp needed
 2591 003e B0BD     		pop	{r4, r5, r7, pc}
 2592              		.cfi_endproc
 2593              	.LFE150:
 2595              		.section	.text.generate_mandelbrot_checksum_fixed_point,"ax",%progbits
 2596              		.align	1
 2597              		.syntax unified
 2598              		.thumb
 2599              		.thumb_func
 2601              	generate_mandelbrot_checksum_fixed_point:
 2602              	.LFB151:
 543:Core/Src/main.c **** 
 544:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_fixed_point(uint16_t width, uint16_t height, uint32_t 
 545:Core/Src/main.c **** {
 2603              		.loc 1 545 1
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 160
 2606              		@ frame_needed = 1, uses_anonymous_args = 0
 2607 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 2608              	.LCFI69:
 2609              		.cfi_def_cfa_offset 32
 2610              		.cfi_offset 4, -32
 2611              		.cfi_offset 5, -28
 2612              		.cfi_offset 7, -24
 2613              		.cfi_offset 8, -20
 2614              		.cfi_offset 9, -16
 2615              		.cfi_offset 10, -12
 2616              		.cfi_offset 11, -8
 2617              		.cfi_offset 14, -4
 2618 0004 AAB0     		sub	sp, sp, #168
 2619              	.LCFI70:
 2620              		.cfi_def_cfa_offset 200
 2621 0006 02AF     		add	r7, sp, #8
 2622              	.LCFI71:
 2623              		.cfi_def_cfa 7, 192
 2624 0008 3A62     		str	r2, [r7, #32]
 2625 000a FB61     		str	r3, [r7, #28]
 2626 000c 0346     		mov	r3, r0	@ movhi
 2627 000e FB84     		strh	r3, [r7, #38]	@ movhi
 2628 0010 0B46     		mov	r3, r1	@ movhi
 2629 0012 BB84     		strh	r3, [r7, #36]	@ movhi
 546:Core/Src/main.c **** 	uint32_t mandelbrot_sum = 0u;
 2630              		.loc 1 546 11
 2631 0014 0023     		movs	r3, #0
 2632 0016 C7F89C30 		str	r3, [r7, #156]
 547:Core/Src/main.c **** 	uint32_t overflow_count = 0u;
 2633              		.loc 1 547 11
 2634 001a 0023     		movs	r3, #0
 2635 001c C7F89830 		str	r3, [r7, #152]
 548:Core/Src/main.c **** 	
 549:Core/Src/main.c **** 	/* Fixed-point constants */
 550:Core/Src/main.c **** 	int64_t scale_2_0 = double_to_fixed(2.0, scale);      /* 2.0 in fixed-point */
 2636              		.loc 1 550 22
 2637 0020 F869     		ldr	r0, [r7, #28]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 58


 2638 0022 9FED950B 		vldr.64	d0, .L99
 2639 0026 FFF7FEFF 		bl	double_to_fixed
 2640 002a C7E91C01 		strd	r0, [r7, #112]
 551:Core/Src/main.c **** 	int64_t scale_4_0 = double_to_fixed(4.0, scale);      /* 4.0 in fixed-point */
 2641              		.loc 1 551 22
 2642 002e F869     		ldr	r0, [r7, #28]
 2643 0030 9FED930B 		vldr.64	d0, .L99+8
 2644 0034 FFF7FEFF 		bl	double_to_fixed
 2645 0038 C7E91A01 		strd	r0, [r7, #104]
 552:Core/Src/main.c **** 	int64_t scale_3_5 = double_to_fixed(3.5, scale);      /* 3.5 in fixed-point */
 2646              		.loc 1 552 22
 2647 003c F869     		ldr	r0, [r7, #28]
 2648 003e 9FED920B 		vldr.64	d0, .L99+16
 2649 0042 FFF7FEFF 		bl	double_to_fixed
 2650 0046 C7E91801 		strd	r0, [r7, #96]
 553:Core/Src/main.c **** 	int64_t scale_2_5 = double_to_fixed(2.5, scale);      /* 2.5 in fixed-point */
 2651              		.loc 1 553 22
 2652 004a F869     		ldr	r0, [r7, #28]
 2653 004c 9FED900B 		vldr.64	d0, .L99+24
 2654 0050 FFF7FEFF 		bl	double_to_fixed
 2655 0054 C7E91601 		strd	r0, [r7, #88]
 2656              	.LBB32:
 554:Core/Src/main.c **** 	
 555:Core/Src/main.c **** 	for (uint16_t y = 0; y < height; ++y)
 2657              		.loc 1 555 16
 2658 0058 0023     		movs	r3, #0
 2659 005a A7F89630 		strh	r3, [r7, #150]	@ movhi
 2660              		.loc 1 555 2
 2661 005e F4E0     		b	.L87
 2662              	.L96:
 2663              	.LBB33:
 556:Core/Src/main.c **** 	{
 557:Core/Src/main.c **** 		int64_t y0_fixed = fixed_multiply(double_to_fixed((double)y, scale), scale_2_0, scale) / (int64_t
 2664              		.loc 1 557 22
 2665 0060 B7F89630 		ldrh	r3, [r7, #150]
 2666 0064 1846     		mov	r0, r3
 2667 0066 FFF7FEFF 		bl	__aeabi_ui2d
 2668 006a 0246     		mov	r2, r0
 2669 006c 0B46     		mov	r3, r1
 2670 006e F869     		ldr	r0, [r7, #28]
 2671 0070 43EC102B 		vmov	d0, r2, r3
 2672 0074 FFF7FEFF 		bl	double_to_fixed
 2673              		.loc 1 557 22 is_stmt 0 discriminator 1
 2674 0078 FB69     		ldr	r3, [r7, #28]
 2675 007a 0093     		str	r3, [sp]
 2676 007c D7E91C23 		ldrd	r2, [r7, #112]
 2677 0080 FFF7FEFF 		bl	fixed_multiply
 2678              		.loc 1 557 92 is_stmt 1 discriminator 2
 2679 0084 BB8C     		ldrh	r3, [r7, #36]
 2680 0086 0022     		movs	r2, #0
 2681 0088 3B61     		str	r3, [r7, #16]
 2682 008a 7A61     		str	r2, [r7, #20]
 2683              		.loc 1 557 90 discriminator 2
 2684 008c D7E90423 		ldrd	r2, [r7, #16]
 2685 0090 FFF7FEFF 		bl	__aeabi_ldivmod
 2686 0094 0246     		mov	r2, r0
 2687 0096 0B46     		mov	r3, r1
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 59


 2688 0098 1446     		mov	r4, r2
 2689 009a 1D46     		mov	r5, r3
 2690              		.loc 1 557 110 discriminator 2
 2691 009c F869     		ldr	r0, [r7, #28]
 2692 009e 9FED7E0B 		vldr.64	d0, .L99+32
 2693 00a2 FFF7FEFF 		bl	double_to_fixed
 2694 00a6 0246     		mov	r2, r0
 2695 00a8 0B46     		mov	r3, r1
 2696              		.loc 1 557 11 discriminator 3
 2697 00aa B4EB0208 		subs	r8, r4, r2
 2698 00ae 65EB0309 		sbc	r9, r5, r3
 2699 00b2 C7E91489 		strd	r8, [r7, #80]
 2700              	.LBB34:
 558:Core/Src/main.c **** 		
 559:Core/Src/main.c **** 		for (uint16_t x = 0; x < width; ++x)
 2701              		.loc 1 559 17
 2702 00b6 0023     		movs	r3, #0
 2703 00b8 A7F89430 		strh	r3, [r7, #148]	@ movhi
 2704              		.loc 1 559 3
 2705 00bc BAE0     		b	.L88
 2706              	.L95:
 2707              	.LBB35:
 560:Core/Src/main.c **** 		{
 561:Core/Src/main.c **** 			int64_t x0_fixed = fixed_multiply(double_to_fixed((double)x, scale), scale_3_5, scale) / (int64_
 2708              		.loc 1 561 23
 2709 00be B7F89430 		ldrh	r3, [r7, #148]
 2710 00c2 1846     		mov	r0, r3
 2711 00c4 FFF7FEFF 		bl	__aeabi_ui2d
 2712 00c8 0246     		mov	r2, r0
 2713 00ca 0B46     		mov	r3, r1
 2714 00cc F869     		ldr	r0, [r7, #28]
 2715 00ce 43EC102B 		vmov	d0, r2, r3
 2716 00d2 FFF7FEFF 		bl	double_to_fixed
 2717              		.loc 1 561 23 is_stmt 0 discriminator 1
 2718 00d6 FB69     		ldr	r3, [r7, #28]
 2719 00d8 0093     		str	r3, [sp]
 2720 00da D7E91823 		ldrd	r2, [r7, #96]
 2721 00de FFF7FEFF 		bl	fixed_multiply
 2722              		.loc 1 561 93 is_stmt 1 discriminator 2
 2723 00e2 FB8C     		ldrh	r3, [r7, #38]
 2724 00e4 0022     		movs	r2, #0
 2725 00e6 BB60     		str	r3, [r7, #8]
 2726 00e8 FA60     		str	r2, [r7, #12]
 2727              		.loc 1 561 91 discriminator 2
 2728 00ea D7E90223 		ldrd	r2, [r7, #8]
 2729 00ee FFF7FEFF 		bl	__aeabi_ldivmod
 2730 00f2 0246     		mov	r2, r0
 2731 00f4 0B46     		mov	r3, r1
 2732 00f6 1046     		mov	r0, r2
 2733 00f8 1946     		mov	r1, r3
 2734              		.loc 1 561 12 discriminator 2
 2735 00fa D7E91623 		ldrd	r2, [r7, #88]
 2736 00fe B0EB020A 		subs	r10, r0, r2
 2737 0102 61EB030B 		sbc	fp, r1, r3
 2738 0106 C7E912AB 		strd	r10, [r7, #72]
 562:Core/Src/main.c **** 			int64_t xi_fixed = 0;
 2739              		.loc 1 562 12
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 60


 2740 010a 4FF00002 		mov	r2, #0
 2741 010e 4FF00003 		mov	r3, #0
 2742 0112 C7E92223 		strd	r2, [r7, #136]
 563:Core/Src/main.c **** 			int64_t yi_fixed = 0;
 2743              		.loc 1 563 12
 2744 0116 4FF00002 		mov	r2, #0
 2745 011a 4FF00003 		mov	r3, #0
 2746 011e C7E92023 		strd	r2, [r7, #128]
 564:Core/Src/main.c **** 			uint32_t iteration = 0u;
 2747              		.loc 1 564 13
 2748 0122 0023     		movs	r3, #0
 2749 0124 FB67     		str	r3, [r7, #124]
 565:Core/Src/main.c **** 			
 566:Core/Src/main.c **** 			while (iteration < max_iter)
 2750              		.loc 1 566 10
 2751 0126 74E0     		b	.L89
 2752              	.L94:
 2753              	.LBB36:
 567:Core/Src/main.c **** 			{
 568:Core/Src/main.c **** 				/* Check for overflow before multiplication */
 569:Core/Src/main.c **** 				if (xi_fixed > 1000000 || xi_fixed < -1000000 || yi_fixed > 1000000 || yi_fixed < -1000000)
 2754              		.loc 1 569 8
 2755 0128 D7E92223 		ldrd	r2, [r7, #136]
 2756 012c 5C49     		ldr	r1, .L99+40
 2757 012e 8A42     		cmp	r2, r1
 2758 0130 73F10003 		sbcs	r3, r3, #0
 2759 0134 14DA     		bge	.L90
 2760              		.loc 1 569 28 discriminator 1
 2761 0136 D7E92223 		ldrd	r2, [r7, #136]
 2762 013a 5A49     		ldr	r1, .L99+44
 2763 013c 8A42     		cmp	r2, r1
 2764 013e 73F1FF33 		sbcs	r3, r3, #-1
 2765 0142 0DDB     		blt	.L90
 2766              		.loc 1 569 51 discriminator 2
 2767 0144 D7E92023 		ldrd	r2, [r7, #128]
 2768 0148 5549     		ldr	r1, .L99+40
 2769 014a 8A42     		cmp	r2, r1
 2770 014c 73F10003 		sbcs	r3, r3, #0
 2771 0150 06DA     		bge	.L90
 2772              		.loc 1 569 73 discriminator 3
 2773 0152 D7E92023 		ldrd	r2, [r7, #128]
 2774 0156 5349     		ldr	r1, .L99+44
 2775 0158 8A42     		cmp	r2, r1
 2776 015a 73F1FF33 		sbcs	r3, r3, #-1
 2777 015e 05DA     		bge	.L91
 2778              	.L90:
 570:Core/Src/main.c **** 				{
 571:Core/Src/main.c **** 					overflow_count++;
 2779              		.loc 1 571 20
 2780 0160 D7F89830 		ldr	r3, [r7, #152]
 2781 0164 0133     		adds	r3, r3, #1
 2782 0166 C7F89830 		str	r3, [r7, #152]
 572:Core/Src/main.c **** 					break;
 2783              		.loc 1 572 6
 2784 016a 58E0     		b	.L92
 2785              	.L91:
 573:Core/Src/main.c **** 				}
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 61


 574:Core/Src/main.c **** 				
 575:Core/Src/main.c **** 				/* Calculate xi^2 + yi^2 in fixed-point */
 576:Core/Src/main.c **** 				int64_t xi_squared = fixed_multiply(xi_fixed, xi_fixed, scale);
 2786              		.loc 1 576 26
 2787 016c FB69     		ldr	r3, [r7, #28]
 2788 016e 0093     		str	r3, [sp]
 2789 0170 D7E92223 		ldrd	r2, [r7, #136]
 2790 0174 D7E92201 		ldrd	r0, [r7, #136]
 2791 0178 FFF7FEFF 		bl	fixed_multiply
 2792 017c C7E91001 		strd	r0, [r7, #64]
 577:Core/Src/main.c **** 				int64_t yi_squared = fixed_multiply(yi_fixed, yi_fixed, scale);
 2793              		.loc 1 577 26
 2794 0180 FB69     		ldr	r3, [r7, #28]
 2795 0182 0093     		str	r3, [sp]
 2796 0184 D7E92023 		ldrd	r2, [r7, #128]
 2797 0188 D7E92001 		ldrd	r0, [r7, #128]
 2798 018c FFF7FEFF 		bl	fixed_multiply
 2799 0190 C7E90E01 		strd	r0, [r7, #56]
 578:Core/Src/main.c **** 				int64_t magnitude_squared = fixed_add(xi_squared, yi_squared);
 2800              		.loc 1 578 33
 2801 0194 D7E90E23 		ldrd	r2, [r7, #56]
 2802 0198 D7E91001 		ldrd	r0, [r7, #64]
 2803 019c FFF7FEFF 		bl	fixed_add
 2804 01a0 C7E90C01 		strd	r0, [r7, #48]
 579:Core/Src/main.c **** 				
 580:Core/Src/main.c **** 				/* Check if magnitude^2 > 4.0 */
 581:Core/Src/main.c **** 				if (magnitude_squared > scale_4_0)
 2805              		.loc 1 581 8
 2806 01a4 D7E90C23 		ldrd	r2, [r7, #48]
 2807 01a8 D7E91A01 		ldrd	r0, [r7, #104]
 2808 01ac 9042     		cmp	r0, r2
 2809 01ae 71EB0303 		sbcs	r3, r1, r3
 2810 01b2 33DB     		blt	.L98
 582:Core/Src/main.c **** 				{
 583:Core/Src/main.c **** 					break;
 584:Core/Src/main.c **** 				}
 585:Core/Src/main.c **** 				
 586:Core/Src/main.c **** 				/* Calculate new xi and yi */
 587:Core/Src/main.c **** 				int64_t tmp = fixed_add(fixed_add(xi_squared, -yi_squared), x0_fixed);
 2811              		.loc 1 587 19
 2812 01b4 D7E90E23 		ldrd	r2, [r7, #56]
 2813 01b8 0021     		movs	r1, #0
 2814 01ba 5042     		negs	r0, r2
 2815 01bc 3860     		str	r0, [r7]
 2816 01be 61EB0303 		sbc	r3, r1, r3
 2817 01c2 7B60     		str	r3, [r7, #4]
 2818 01c4 D7E90023 		ldrd	r2, [r7]
 2819 01c8 D7E91001 		ldrd	r0, [r7, #64]
 2820 01cc FFF7FEFF 		bl	fixed_add
 2821              		.loc 1 587 19 is_stmt 0 discriminator 1
 2822 01d0 D7E91223 		ldrd	r2, [r7, #72]
 2823 01d4 FFF7FEFF 		bl	fixed_add
 2824 01d8 C7E90A01 		strd	r0, [r7, #40]
 588:Core/Src/main.c **** 				yi_fixed = fixed_add(fixed_multiply(fixed_multiply(xi_fixed, yi_fixed, scale), scale_2_0, scale
 2825              		.loc 1 588 16 is_stmt 1
 2826 01dc FB69     		ldr	r3, [r7, #28]
 2827 01de 0093     		str	r3, [sp]
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 62


 2828 01e0 D7E92023 		ldrd	r2, [r7, #128]
 2829 01e4 D7E92201 		ldrd	r0, [r7, #136]
 2830 01e8 FFF7FEFF 		bl	fixed_multiply
 2831              		.loc 1 588 16 is_stmt 0 discriminator 1
 2832 01ec FB69     		ldr	r3, [r7, #28]
 2833 01ee 0093     		str	r3, [sp]
 2834 01f0 D7E91C23 		ldrd	r2, [r7, #112]
 2835 01f4 FFF7FEFF 		bl	fixed_multiply
 2836              		.loc 1 588 16 discriminator 2
 2837 01f8 D7E91423 		ldrd	r2, [r7, #80]
 2838 01fc FFF7FEFF 		bl	fixed_add
 2839 0200 C7E92001 		strd	r0, [r7, #128]
 589:Core/Src/main.c **** 				xi_fixed = tmp;
 2840              		.loc 1 589 14 is_stmt 1
 2841 0204 D7E90A23 		ldrd	r2, [r7, #40]
 2842 0208 C7E92223 		strd	r2, [r7, #136]
 590:Core/Src/main.c **** 				
 591:Core/Src/main.c **** 				++iteration;
 2843              		.loc 1 591 5
 2844 020c FB6F     		ldr	r3, [r7, #124]
 2845 020e 0133     		adds	r3, r3, #1
 2846 0210 FB67     		str	r3, [r7, #124]
 2847              	.L89:
 2848              	.LBE36:
 566:Core/Src/main.c **** 			{
 2849              		.loc 1 566 21
 2850 0212 FA6F     		ldr	r2, [r7, #124]
 2851 0214 3B6A     		ldr	r3, [r7, #32]
 2852 0216 9A42     		cmp	r2, r3
 2853 0218 86D3     		bcc	.L94
 2854 021a 00E0     		b	.L92
 2855              	.L98:
 2856              	.LBB37:
 583:Core/Src/main.c **** 				}
 2857              		.loc 1 583 6
 2858 021c 00BF     		nop
 2859              	.L92:
 2860              	.LBE37:
 592:Core/Src/main.c **** 			}
 593:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 2861              		.loc 1 593 19
 2862 021e D7F89C20 		ldr	r2, [r7, #156]
 2863 0222 FB6F     		ldr	r3, [r7, #124]
 2864 0224 1344     		add	r3, r3, r2
 2865 0226 C7F89C30 		str	r3, [r7, #156]
 2866              	.LBE35:
 559:Core/Src/main.c **** 		{
 2867              		.loc 1 559 35 discriminator 2
 2868 022a B7F89430 		ldrh	r3, [r7, #148]	@ movhi
 2869 022e 0133     		adds	r3, r3, #1
 2870 0230 A7F89430 		strh	r3, [r7, #148]	@ movhi
 2871              	.L88:
 559:Core/Src/main.c **** 		{
 2872              		.loc 1 559 26 discriminator 1
 2873 0234 B7F89420 		ldrh	r2, [r7, #148]
 2874 0238 FB8C     		ldrh	r3, [r7, #38]
 2875 023a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 63


 2876 023c FFF43FAF 		bcc	.L95
 2877              	.LBE34:
 2878              	.LBE33:
 555:Core/Src/main.c **** 	{
 2879              		.loc 1 555 35 discriminator 2
 2880 0240 B7F89630 		ldrh	r3, [r7, #150]	@ movhi
 2881 0244 0133     		adds	r3, r3, #1
 2882 0246 A7F89630 		strh	r3, [r7, #150]	@ movhi
 2883              	.L87:
 555:Core/Src/main.c **** 	{
 2884              		.loc 1 555 25 discriminator 1
 2885 024a B7F89620 		ldrh	r2, [r7, #150]
 2886 024e BB8C     		ldrh	r3, [r7, #36]
 2887 0250 9A42     		cmp	r2, r3
 2888 0252 FFF405AF 		bcc	.L96
 2889              	.LBE32:
 594:Core/Src/main.c **** 		}
 595:Core/Src/main.c **** 	}
 596:Core/Src/main.c **** 	
 597:Core/Src/main.c **** 	/* Store overflow count for this scaling factor */
 598:Core/Src/main.c **** 	g_fixed_overflow_count[g_current_scaling_index] = overflow_count;
 2890              		.loc 1 598 24
 2891 0256 144B     		ldr	r3, .L99+48
 2892 0258 1B68     		ldr	r3, [r3]
 2893              		.loc 1 598 50
 2894 025a 1449     		ldr	r1, .L99+52
 2895 025c D7F89820 		ldr	r2, [r7, #152]
 2896 0260 41F82320 		str	r2, [r1, r3, lsl #2]
 599:Core/Src/main.c **** 	
 600:Core/Src/main.c **** 	return mandelbrot_sum;
 2897              		.loc 1 600 9
 2898 0264 D7F89C30 		ldr	r3, [r7, #156]
 601:Core/Src/main.c **** }
 2899              		.loc 1 601 1
 2900 0268 1846     		mov	r0, r3
 2901 026a A037     		adds	r7, r7, #160
 2902              	.LCFI72:
 2903              		.cfi_def_cfa_offset 32
 2904 026c BD46     		mov	sp, r7
 2905              	.LCFI73:
 2906              		.cfi_def_cfa_register 13
 2907              		@ sp needed
 2908 026e BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 2909              	.L100:
 2910 0272 00BFAFF3 		.align	3
 2910      0080
 2911              	.L99:
 2912 0278 00000000 		.word	0
 2913 027c 00000040 		.word	1073741824
 2914 0280 00000000 		.word	0
 2915 0284 00001040 		.word	1074790400
 2916 0288 00000000 		.word	0
 2917 028c 00000C40 		.word	1074528256
 2918 0290 00000000 		.word	0
 2919 0294 00000440 		.word	1074003968
 2920 0298 00000000 		.word	0
 2921 029c 0000F03F 		.word	1072693248
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 64


 2922 02a0 41420F00 		.word	1000001
 2923 02a4 C0BDF0FF 		.word	-1000000
 2924 02a8 00000000 		.word	g_current_scaling_index
 2925 02ac 00000000 		.word	g_fixed_overflow_count
 2926              		.cfi_endproc
 2927              	.LFE151:
 2929              		.section	.text.Error_Handler,"ax",%progbits
 2930              		.align	1
 2931              		.global	Error_Handler
 2932              		.syntax unified
 2933              		.thumb
 2934              		.thumb_func
 2936              	Error_Handler:
 2937              	.LFB152:
 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** /* USER CODE END 4 */
 604:Core/Src/main.c **** 
 605:Core/Src/main.c **** /**
 606:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 607:Core/Src/main.c ****   * @retval None
 608:Core/Src/main.c ****   */
 609:Core/Src/main.c **** void Error_Handler(void)
 610:Core/Src/main.c **** {
 2938              		.loc 1 610 1
 2939              		.cfi_startproc
 2940              		@ args = 0, pretend = 0, frame = 0
 2941              		@ frame_needed = 1, uses_anonymous_args = 0
 2942              		@ link register save eliminated.
 2943 0000 80B4     		push	{r7}
 2944              	.LCFI74:
 2945              		.cfi_def_cfa_offset 4
 2946              		.cfi_offset 7, -4
 2947 0002 00AF     		add	r7, sp, #0
 2948              	.LCFI75:
 2949              		.cfi_def_cfa_register 7
 2950              	.LBB38:
 2951              	.LBB39:
 2952              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 65


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 66


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 67


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 68


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 69


 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 70


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 71


 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 72


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 73


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 74


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 75


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 76


 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 77


 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 78


 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 79


 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 80


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 81


 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2953              		.loc 2 962 3
 2954              		.syntax unified
 2955              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2956 0004 72B6     		cpsid i
 2957              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2958              		.loc 2 963 1
 2959              		.thumb
 2960              		.syntax unified
 2961 0006 00BF     		nop
 2962              	.L102:
 2963              	.LBE39:
 2964              	.LBE38:
 611:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 612:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 613:Core/Src/main.c ****   __disable_irq();
 614:Core/Src/main.c ****   while (1)
 2965              		.loc 1 614 9
 2966 0008 00BF     		nop
 2967 000a FDE7     		b	.L102
 2968              		.cfi_endproc
 2969              	.LFE152:
 2971              		.text
 2972              	.Letext0:
 2973              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 2974              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 82


 2975              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 2976              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2977              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2978              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2979              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2980              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2981              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2982              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2983              		.file 13 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltoo
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 83


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:21     .rodata.kMaxIter:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:24     .rodata.kMaxIter:00000000 kMaxIter
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:27     .rodata.kNumResolutions:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:30     .rodata.kNumResolutions:00000000 kNumResolutions
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:33     .rodata.kWidths:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:36     .rodata.kWidths:00000000 kWidths
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:43     .rodata.kHeights:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:46     .rodata.kHeights:00000000 kHeights
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:57     .bss.g_current_width:00000000 g_current_width
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:54     .bss.g_current_width:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:64     .bss.g_current_height:00000000 g_current_height
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:61     .bss.g_current_height:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:71     .bss.g_current_cycles:00000000 g_current_cycles
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:68     .bss.g_current_cycles:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:78     .bss.g_current_checksum:00000000 g_current_checksum
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:75     .bss.g_current_checksum:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:85     .bss.g_current_execution_time:00000000 g_current_execution_time
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:82     .bss.g_current_execution_time:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:92     .bss.g_current_throughput:00000000 g_current_throughput
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:89     .bss.g_current_throughput:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:99     .bss.checksum_float:00000000 checksum_float
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:96     .bss.checksum_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:106    .bss.execution_time_ms_float:00000000 execution_time_ms_float
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:103    .bss.execution_time_ms_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:113    .bss.cpu_cycles_float:00000000 cpu_cycles_float
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:110    .bss.cpu_cycles_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:120    .bss.throughput_pps_float:00000000 throughput_pps_float
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:117    .bss.throughput_pps_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:127    .bss.checksum_double:00000000 checksum_double
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:124    .bss.checksum_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:134    .bss.execution_time_ms_double:00000000 execution_time_ms_double
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:131    .bss.execution_time_ms_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:141    .bss.cpu_cycles_double:00000000 cpu_cycles_double
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:138    .bss.cpu_cycles_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:148    .bss.throughput_pps_double:00000000 throughput_pps_double
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:145    .bss.throughput_pps_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:155    .bss.accuracy_diff_percent:00000000 accuracy_diff_percent
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:152    .bss.accuracy_diff_percent:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:162    .bss.speedup_factor:00000000 speedup_factor
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:159    .bss.speedup_factor:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:169    .bss.g_current_test_mode:00000000 g_current_test_mode
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:166    .bss.g_current_test_mode:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:176    .data.g_fpu_enabled:00000000 g_fpu_enabled
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:173    .data.g_fpu_enabled:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:183    .bss.g_total_program_cycles:00000000 g_total_program_cycles
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:180    .bss.g_total_program_cycles:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:190    .bss.g_total_program_time_ms:00000000 g_total_program_time_ms
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:187    .bss.g_total_program_time_ms:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:197    .bss.g_total_time_sum:00000000 g_total_time_sum
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:194    .bss.g_total_time_sum:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:200    .rodata.kNumScalingFactors:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:203    .rodata.kNumScalingFactors:00000000 kNumScalingFactors
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:206    .rodata.kScalingFactors:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:209    .rodata.kScalingFactors:00000000 kScalingFactors
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:214    .rodata:00000000 $d
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 84


C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:224    .data.kScalingFactorNames:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:227    .data.kScalingFactorNames:00000000 kScalingFactorNames
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:236    .bss.g_fixed_checksum:00000000 g_fixed_checksum
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:233    .bss.g_fixed_checksum:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:243    .bss.g_fixed_execution_time_ms:00000000 g_fixed_execution_time_ms
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:240    .bss.g_fixed_execution_time_ms:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:250    .bss.g_fixed_overflow_count:00000000 g_fixed_overflow_count
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:247    .bss.g_fixed_overflow_count:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:257    .bss.g_current_scaling_factor:00000000 g_current_scaling_factor
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:254    .bss.g_current_scaling_factor:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:264    .bss.g_current_scaling_index:00000000 g_current_scaling_index
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:261    .bss.g_current_scaling_index:00000000 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:316    .text.main:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:322    .text.main:00000000 main
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1279   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1430   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2013   .text.dwt_cycle_counter_init:00000000 dwt_cycle_counter_init
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2071   .text.dwt_get_cycles:00000000 dwt_get_cycles
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1546   .text.generate_mandelbrot_checksum_float:00000000 generate_mandelbrot_checksum_float
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2117   .text.log_fpu_benchmark:00000000 log_fpu_benchmark
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:565    .text.main:000001bc $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:590    .text.main:00000214 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1738   .text.generate_mandelbrot_checksum_double:00000000 generate_mandelbrot_checksum_double
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:762    .text.main:00000388 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:782    .text.main:000003cc $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2207   .text.log_fpu_comparison:00000000 log_fpu_comparison
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1058   .text.main:00000624 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1081   .text.main:00000674 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2601   .text.generate_mandelbrot_checksum_fixed_point:00000000 generate_mandelbrot_checksum_fixed_point
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1256   .text.main:000007e0 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1273   .text.SystemClock_Config:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2936   .text.Error_Handler:00000000 Error_Handler
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1419   .text.SystemClock_Config:000000d4 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1425   .text.MX_GPIO_Init:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1535   .text.MX_GPIO_Init:00000098 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1541   .text.generate_mandelbrot_checksum_float:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:1733   .text.generate_mandelbrot_checksum_double:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2000   .text.generate_mandelbrot_checksum_double:000001d0 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2008   .text.dwt_cycle_counter_init:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2060   .text.dwt_cycle_counter_init:0000002c $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2066   .text.dwt_get_cycles:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2102   .text.dwt_get_cycles:00000014 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2112   .text.log_fpu_benchmark:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2191   .text.log_fpu_benchmark:00000070 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2202   .text.log_fpu_comparison:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2255   .text.log_fpu_comparison:00000038 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2260   .text.__io_putchar:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2266   .text.__io_putchar:00000000 __io_putchar
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2349   .text.__io_putchar:00000050 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2355   .text.fixed_multiply:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2360   .text.fixed_multiply:00000000 fixed_multiply
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2427   .text.fixed_add:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2432   .text.fixed_add:00000000 fixed_add
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2483   .text.double_to_fixed:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2488   .text.double_to_fixed:00000000 double_to_fixed
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2537   .text.fixed_to_double:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2542   .text.fixed_to_double:00000000 fixed_to_double
ARM GAS  C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s 			page 85


C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2596   .text.generate_mandelbrot_checksum_fixed_point:00000000 $t
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2912   .text.generate_mandelbrot_checksum_fixed_point:00000278 $d
C:\Users\einom\AppData\Local\Temp\cc7cQNlW.s:2930   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dcmpeq
__aeabi_dadd
HAL_Init
puts
printf
HAL_GPIO_WritePin
SystemCoreClock
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_GPIO_Init
__aeabi_dcmple
__aeabi_ldivmod
__aeabi_d2lz
__aeabi_l2d
