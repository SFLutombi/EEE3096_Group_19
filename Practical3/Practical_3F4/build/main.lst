ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.kMaxIter,"a"
  21              		.align	2
  24              	kMaxIter:
  25 0000 64000000 		.word	100
  26              		.section	.rodata.kNumResolutions,"a"
  27              		.align	2
  30              	kNumResolutions:
  31 0000 05000000 		.word	5
  32              		.section	.rodata.kWidths,"a"
  33              		.align	2
  36              	kWidths:
  37 0000 8000     		.short	128
  38 0002 A000     		.short	160
  39 0004 C000     		.short	192
  40 0006 E000     		.short	224
  41 0008 0001     		.short	256
  42              		.section	.rodata.kHeights,"a"
  43              		.align	2
  46              	kHeights:
  47 0000 8000     		.short	128
  48 0002 A000     		.short	160
  49 0004 C000     		.short	192
  50 0006 E000     		.short	224
  51 0008 0001     		.short	256
  52              		.global	g_current_width
  53              		.section	.bss.g_current_width,"aw",%nobits
  54              		.align	2
  57              	g_current_width:
  58 0000 00000000 		.space	4
  59              		.global	g_current_height
  60              		.section	.bss.g_current_height,"aw",%nobits
  61              		.align	2
  64              	g_current_height:
  65 0000 00000000 		.space	4
  66              		.global	g_current_cycles
  67              		.section	.bss.g_current_cycles,"aw",%nobits
  68              		.align	2
  71              	g_current_cycles:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 2


  72 0000 00000000 		.space	4
  73              		.global	g_current_checksum
  74              		.section	.bss.g_current_checksum,"aw",%nobits
  75              		.align	2
  78              	g_current_checksum:
  79 0000 00000000 		.space	4
  80              		.global	g_current_execution_time
  81              		.section	.bss.g_current_execution_time,"aw",%nobits
  82              		.align	3
  85              	g_current_execution_time:
  86 0000 00000000 		.space	8
  86      00000000 
  87              		.global	g_current_throughput
  88              		.section	.bss.g_current_throughput,"aw",%nobits
  89              		.align	3
  92              	g_current_throughput:
  93 0000 00000000 		.space	8
  93      00000000 
  94              		.global	checksum_float
  95              		.section	.bss.checksum_float,"aw",%nobits
  96              		.align	2
  99              	checksum_float:
 100 0000 00000000 		.space	20
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.global	execution_time_ms_float
 102              		.section	.bss.execution_time_ms_float,"aw",%nobits
 103              		.align	3
 106              	execution_time_ms_float:
 107 0000 00000000 		.space	40
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	cpu_cycles_float
 109              		.section	.bss.cpu_cycles_float,"aw",%nobits
 110              		.align	2
 113              	cpu_cycles_float:
 114 0000 00000000 		.space	20
 114      00000000 
 114      00000000 
 114      00000000 
 114      00000000 
 115              		.global	throughput_pps_float
 116              		.section	.bss.throughput_pps_float,"aw",%nobits
 117              		.align	3
 120              	throughput_pps_float:
 121 0000 00000000 		.space	40
 121      00000000 
 121      00000000 
 121      00000000 
 121      00000000 
 122              		.global	checksum_double
 123              		.section	.bss.checksum_double,"aw",%nobits
 124              		.align	2
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 3


 127              	checksum_double:
 128 0000 00000000 		.space	20
 128      00000000 
 128      00000000 
 128      00000000 
 128      00000000 
 129              		.global	execution_time_ms_double
 130              		.section	.bss.execution_time_ms_double,"aw",%nobits
 131              		.align	3
 134              	execution_time_ms_double:
 135 0000 00000000 		.space	40
 135      00000000 
 135      00000000 
 135      00000000 
 135      00000000 
 136              		.global	cpu_cycles_double
 137              		.section	.bss.cpu_cycles_double,"aw",%nobits
 138              		.align	2
 141              	cpu_cycles_double:
 142 0000 00000000 		.space	20
 142      00000000 
 142      00000000 
 142      00000000 
 142      00000000 
 143              		.global	throughput_pps_double
 144              		.section	.bss.throughput_pps_double,"aw",%nobits
 145              		.align	3
 148              	throughput_pps_double:
 149 0000 00000000 		.space	40
 149      00000000 
 149      00000000 
 149      00000000 
 149      00000000 
 150              		.global	accuracy_diff_percent
 151              		.section	.bss.accuracy_diff_percent,"aw",%nobits
 152              		.align	3
 155              	accuracy_diff_percent:
 156 0000 00000000 		.space	40
 156      00000000 
 156      00000000 
 156      00000000 
 156      00000000 
 157              		.global	speedup_factor
 158              		.section	.bss.speedup_factor,"aw",%nobits
 159              		.align	3
 162              	speedup_factor:
 163 0000 00000000 		.space	40
 163      00000000 
 163      00000000 
 163      00000000 
 163      00000000 
 164              		.global	g_current_test_mode
 165              		.section	.bss.g_current_test_mode,"aw",%nobits
 166              		.align	2
 169              	g_current_test_mode:
 170 0000 00000000 		.space	4
 171              		.global	g_fpu_enabled
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 4


 172              		.section	.data.g_fpu_enabled,"aw"
 173              		.align	2
 176              	g_fpu_enabled:
 177 0000 01000000 		.word	1
 178              		.global	g_total_program_cycles
 179              		.section	.bss.g_total_program_cycles,"aw",%nobits
 180              		.align	2
 183              	g_total_program_cycles:
 184 0000 00000000 		.space	4
 185              		.global	g_total_program_time_ms
 186              		.section	.bss.g_total_program_time_ms,"aw",%nobits
 187              		.align	3
 190              	g_total_program_time_ms:
 191 0000 00000000 		.space	8
 191      00000000 
 192              		.global	g_total_time_sum
 193              		.section	.bss.g_total_time_sum,"aw",%nobits
 194              		.align	3
 197              	g_total_time_sum:
 198 0000 00000000 		.space	8
 198      00000000 
 199              		.section	.rodata.kNumScalingFactors,"a"
 200              		.align	2
 203              	kNumScalingFactors:
 204 0000 03000000 		.word	3
 205              		.section	.rodata.kScalingFactors,"a"
 206              		.align	2
 209              	kScalingFactors:
 210 0000 E8030000 		.word	1000
 211 0004 10270000 		.word	10000
 212 0008 40420F00 		.word	1000000
 213              		.section	.rodata
 214              		.align	2
 215              	.LC0:
 216 0000 31305E33 		.ascii	"10^3\000"
 216      00
 217 0005 000000   		.align	2
 218              	.LC1:
 219 0008 31305E34 		.ascii	"10^4\000"
 219      00
 220 000d 000000   		.align	2
 221              	.LC2:
 222 0010 31305E36 		.ascii	"10^6\000"
 222      00
 223              		.section	.data.kScalingFactorNames,"aw"
 224              		.align	2
 227              	kScalingFactorNames:
 228 0000 00000000 		.word	.LC0
 229 0004 08000000 		.word	.LC1
 230 0008 10000000 		.word	.LC2
 231              		.global	g_fixed_checksum
 232              		.section	.bss.g_fixed_checksum,"aw",%nobits
 233              		.align	2
 236              	g_fixed_checksum:
 237 0000 00000000 		.space	60
 237      00000000 
 237      00000000 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 5


 237      00000000 
 237      00000000 
 238              		.global	g_fixed_execution_time_ms
 239              		.section	.bss.g_fixed_execution_time_ms,"aw",%nobits
 240              		.align	3
 243              	g_fixed_execution_time_ms:
 244 0000 00000000 		.space	120
 244      00000000 
 244      00000000 
 244      00000000 
 244      00000000 
 245              		.global	g_fixed_overflow_count
 246              		.section	.bss.g_fixed_overflow_count,"aw",%nobits
 247              		.align	2
 250              	g_fixed_overflow_count:
 251 0000 00000000 		.space	12
 251      00000000 
 251      00000000 
 252              		.global	g_current_scaling_factor
 253              		.section	.bss.g_current_scaling_factor,"aw",%nobits
 254              		.align	2
 257              	g_current_scaling_factor:
 258 0000 00000000 		.space	4
 259              		.global	g_current_scaling_index
 260              		.section	.bss.g_current_scaling_index,"aw",%nobits
 261              		.align	2
 264              	g_current_scaling_index:
 265 0000 00000000 		.space	4
 266              		.global	g_estimated_power_f4_mw
 267              		.section	.bss.g_estimated_power_f4_mw,"aw",%nobits
 268              		.align	3
 271              	g_estimated_power_f4_mw:
 272 0000 00000000 		.space	8
 272      00000000 
 273              		.global	g_energy_consumption_f4_mj
 274              		.section	.bss.g_energy_consumption_f4_mj,"aw",%nobits
 275              		.align	3
 278              	g_energy_consumption_f4_mj:
 279 0000 00000000 		.space	8
 279      00000000 
 280              		.global	g_power_measurement_cycles_f4
 281              		.section	.bss.g_power_measurement_cycles_f4,"aw",%nobits
 282              		.align	2
 285              	g_power_measurement_cycles_f4:
 286 0000 00000000 		.space	4
 287              		.section	.rodata
 288 0015 000000   		.align	2
 289              	.LC3:
 290 0018 0D0A4545 		.ascii	"\015\012EEE3096S Practical 3 - STM32F4 Mandelbrot B"
 290      45333039 
 290      36532050 
 290      72616374 
 290      6963616C 
 291 0045 656E6368 		.ascii	"enchmark\015\000"
 291      6D61726B 
 291      0D00
 292 004f 00       		.align	2
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 6


 293              	.LC4:
 294 0050 53595343 		.ascii	"SYSCLK: %lu Hz\015\012\000"
 294      4C4B3A20 
 294      256C7520 
 294      487A0D0A 
 294      00
 295 0061 000000   		.align	2
 296              	.LC5:
 297 0064 0D0A3D3D 		.ascii	"\015\012=== FPU Impact Analysis: FLOAT PRECISION =="
 297      3D204650 
 297      5520496D 
 297      70616374 
 297      20416E61 
 298 0091 3D0D00   		.ascii	"=\015\000"
 299              		.global	__aeabi_ui2d
 300              		.global	__aeabi_ddiv
 301              		.global	__aeabi_dmul
 302              		.align	2
 303              	.LC6:
 304 0094 464C4F41 		.ascii	"FLOAT\000"
 304      5400
 305 009a 0000     		.align	2
 306              	.LC7:
 307 009c 0D0A3D3D 		.ascii	"\015\012=== FPU Impact Analysis: DOUBLE PRECISION ="
 307      3D204650 
 307      5520496D 
 307      70616374 
 307      20416E61 
 308 00c9 3D3D0D00 		.ascii	"==\015\000"
 309 00cd 000000   		.align	2
 310              	.LC8:
 311 00d0 444F5542 		.ascii	"DOUBLE\000"
 311      4C4500
 312 00d7 00       		.align	2
 313              	.LC9:
 314 00d8 0D0A3D3D 		.ascii	"\015\012=== FPU Impact Analysis: COMPARISON ===\015"
 314      3D204650 
 314      5520496D 
 314      70616374 
 314      20416E61 
 315 0102 00       		.ascii	"\000"
 316              		.global	__aeabi_dsub
 317              		.global	__aeabi_dcmpeq
 318              		.global	__aeabi_dadd
 319 0103 00       		.align	2
 320              	.LC10:
 321 0104 0D0A3D3D 		.ascii	"\015\012=== Task 7: Fixed-Point Arithmetic Analysis"
 321      3D205461 
 321      736B2037 
 321      3A204669 
 321      7865642D 
 322 0131 203D3D3D 		.ascii	" ===\015\000"
 322      0D00
 323 0137 00       		.align	2
 324              	.LC11:
 325 0138 0D0A2D2D 		.ascii	"\015\012--- Scaling Factor: %s (%lu) ---\015\012\000"
 325      2D205363 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 7


 325      616C696E 
 325      67204661 
 325      63746F72 
 326 015d 000000   		.align	2
 327              	.LC12:
 328 0160 5265736F 		.ascii	"Resolution %ux%u: %.3f ms, cycles %lu, checksum %lu"
 328      6C757469 
 328      6F6E2025 
 328      75782575 
 328      3A20252E 
 329 0193 2C206F76 		.ascii	", overflows %lu\015\012\000"
 329      6572666C 
 329      6F777320 
 329      256C750D 
 329      0A00
 330 01a5 000000   		.align	2
 331              	.LC13:
 332 01a8 0D0A3D3D 		.ascii	"\015\012=== Fixed-Point Analysis Summary ===\015\000"
 332      3D204669 
 332      7865642D 
 332      506F696E 
 332      7420416E 
 333              		.align	2
 334              	.LC14:
 335 01d0 5363616C 		.ascii	"Scaling Factor %s: Total overflows = %lu\015\012\000"
 335      696E6720 
 335      46616374 
 335      6F722025 
 335      733A2054 
 336              		.section	.text.main,"ax",%progbits
 337              		.align	1
 338              		.global	main
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 343              	main:
 344              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 8


  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdio.h>
  25:Core/Src/main.c **** #include <stdint.h>
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** //TODO: Define variables you think you might need
  48:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  49:Core/Src/main.c **** /* Task 5: FPU Impact Analysis - compare float vs double, FPU enabled vs disabled */
  50:Core/Src/main.c **** static const uint32_t kMaxIter = 100u;
  51:Core/Src/main.c **** static const uint32_t kNumResolutions = 5;
  52:Core/Src/main.c **** static const uint16_t kWidths[5]  = {128, 160, 192, 224, 256};  /* Practical 1B sizes */
  53:Core/Src/main.c **** static const uint16_t kHeights[5] = {128, 160, 192, 224, 256};
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Memory management for large images */
  56:Core/Src/main.c **** #define MAX_TILE_SIZE 256  /* Maximum tile size that fits in available SRAM */
  57:Core/Src/main.c **** #define TILE_OVERLAP 0     /* No overlap needed for Mandelbrot calculation */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Live Expressions: current benchmark metrics */
  60:Core/Src/main.c **** volatile uint32_t g_current_width = 0u;
  61:Core/Src/main.c **** volatile uint32_t g_current_height = 0u;
  62:Core/Src/main.c **** volatile uint32_t g_current_cycles = 0u;
  63:Core/Src/main.c **** volatile uint32_t g_current_checksum = 0u;
  64:Core/Src/main.c **** volatile double g_current_execution_time = 0.0;
  65:Core/Src/main.c **** volatile double g_current_throughput = 0.0;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Task 5: FPU Impact Analysis Results */
  68:Core/Src/main.c **** /* Float precision results */
  69:Core/Src/main.c **** volatile uint32_t checksum_float[5] = {0u, 0u, 0u, 0u, 0u};
  70:Core/Src/main.c **** volatile double execution_time_ms_float[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  71:Core/Src/main.c **** volatile uint32_t cpu_cycles_float[5] = {0u, 0u, 0u, 0u, 0u};
  72:Core/Src/main.c **** volatile double throughput_pps_float[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Double precision results */
  75:Core/Src/main.c **** volatile uint32_t checksum_double[5] = {0u, 0u, 0u, 0u, 0u};
  76:Core/Src/main.c **** volatile double execution_time_ms_double[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  77:Core/Src/main.c **** volatile uint32_t cpu_cycles_double[5] = {0u, 0u, 0u, 0u, 0u};
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 9


  78:Core/Src/main.c **** volatile double throughput_pps_double[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Accuracy comparison */
  81:Core/Src/main.c **** volatile double accuracy_diff_percent[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  82:Core/Src/main.c **** volatile double speedup_factor[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /* Current test configuration */
  85:Core/Src/main.c **** volatile uint32_t g_current_test_mode = 0u; /* 0=float, 1=double */
  86:Core/Src/main.c **** volatile uint32_t g_fpu_enabled = 1u; /* 1=FPU enabled, 0=FPU disabled */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /* Task 6: Total program runtime measurement */
  89:Core/Src/main.c **** volatile uint32_t g_total_program_cycles = 0u;
  90:Core/Src/main.c **** volatile double g_total_program_time_ms = 0.0;
  91:Core/Src/main.c **** volatile double g_total_time_sum = 0.0;
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Task 7: Fixed-Point Arithmetic Analysis */
  94:Core/Src/main.c **** /* Fixed-point scaling factors to test */
  95:Core/Src/main.c **** static const uint32_t kNumScalingFactors = 3;
  96:Core/Src/main.c **** static const uint32_t kScalingFactors[3] = {1000u, 10000u, 1000000u};  /* 10^3, 10^4, 10^6 */
  97:Core/Src/main.c **** static const char* kScalingFactorNames[3] = {"10^3", "10^4", "10^6"};
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* Fixed-point results for each scaling factor */
 100:Core/Src/main.c **** volatile uint32_t g_fixed_checksum[3][5] = {{0}};  /* [scaling_factor][resolution] */
 101:Core/Src/main.c **** volatile double g_fixed_execution_time_ms[3][5] = {{0.0}};
 102:Core/Src/main.c **** volatile uint32_t g_fixed_overflow_count[3] = {0u, 0u, 0u};  /* Overflow counter per scaling factor
 103:Core/Src/main.c **** volatile uint32_t g_current_scaling_factor = 0u;  /* Current scaling factor being tested */
 104:Core/Src/main.c **** volatile uint32_t g_current_scaling_index = 0u;   /* Index of current scaling factor */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /* Task 8: Power Measurement Analysis */
 107:Core/Src/main.c **** volatile double g_estimated_power_f4_mw = 0.0;
 108:Core/Src/main.c **** volatile double g_energy_consumption_f4_mj = 0.0;
 109:Core/Src/main.c **** volatile uint32_t g_power_measurement_cycles_f4 = 0u;
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /* USER CODE END PV */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 114:Core/Src/main.c **** void SystemClock_Config(void);
 115:Core/Src/main.c **** static void MX_GPIO_Init(void);
 116:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 117:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
 118:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_float(uint16_t width, uint16_t height, uint32_t max_it
 119:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_double(uint16_t width, uint16_t height, uint32_t max_i
 120:Core/Src/main.c **** static void dwt_cycle_counter_init(void);
 121:Core/Src/main.c **** static inline uint32_t dwt_get_cycles(void);
 122:Core/Src/main.c **** static void log_fpu_benchmark(uint16_t width, uint16_t height, uint32_t cycles, uint32_t checksum, 
 123:Core/Src/main.c **** static void log_fpu_comparison(uint16_t width, uint16_t height, uint32_t checksum_float, uint32_t c
 124:Core/Src/main.c **** int __io_putchar(int ch);
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** /* Task 7: Fixed-point arithmetic functions */
 127:Core/Src/main.c **** static int64_t fixed_multiply(int64_t a, int64_t b, uint32_t scale);
 128:Core/Src/main.c **** static int64_t fixed_add(int64_t a, int64_t b);
 129:Core/Src/main.c **** static int64_t double_to_fixed(double value, uint32_t scale);
 130:Core/Src/main.c **** static double fixed_to_double(int64_t value, uint32_t scale);
 131:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_fixed_point(uint16_t width, uint16_t height, uint32_t 
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** /* Task 8: Power measurement functions */
 134:Core/Src/main.c **** static void analyze_power_consumption_f4(void);
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 10


 135:Core/Src/main.c **** static double estimate_power_consumption_f4(uint32_t cycles);
 136:Core/Src/main.c **** static void extrapolate_power_consumption_f4(void);
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** /* USER CODE END PFP */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 141:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** /* USER CODE END 0 */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** /**
 146:Core/Src/main.c ****   * @brief  The application entry point.
 147:Core/Src/main.c ****   * @retval int
 148:Core/Src/main.c ****   */
 149:Core/Src/main.c **** int main(void)
 150:Core/Src/main.c **** {
 345              		.loc 1 150 1
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 184
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 B0B5     		push	{r4, r5, r7, lr}
 350              	.LCFI0:
 351              		.cfi_def_cfa_offset 16
 352              		.cfi_offset 4, -16
 353              		.cfi_offset 5, -12
 354              		.cfi_offset 7, -8
 355              		.cfi_offset 14, -4
 356 0002 B4B0     		sub	sp, sp, #208
 357              	.LCFI1:
 358              		.cfi_def_cfa_offset 224
 359 0004 06AF     		add	r7, sp, #24
 360              	.LCFI2:
 361              		.cfi_def_cfa 7, 200
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE END 1 */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 159:Core/Src/main.c ****   HAL_Init();
 362              		.loc 1 159 3
 363 0006 FFF7FEFF 		bl	HAL_Init
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* USER CODE END Init */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* Configure the system clock */
 166:Core/Src/main.c ****   SystemClock_Config();
 364              		.loc 1 166 3
 365 000a FFF7FEFF 		bl	SystemClock_Config
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE END SysInit */
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 11


 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* Initialize all configured peripherals */
 173:Core/Src/main.c ****   MX_GPIO_Init();
 366              		.loc 1 173 3
 367 000e FFF7FEFF 		bl	MX_GPIO_Init
 174:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 175:Core/Src/main.c ****   dwt_cycle_counter_init();
 368              		.loc 1 175 3
 369 0012 FFF7FEFF 		bl	dwt_cycle_counter_init
 176:Core/Src/main.c ****   printf("\r\nEEE3096S Practical 3 - STM32F4 Mandelbrot Benchmark\r\n");
 370              		.loc 1 176 3
 371 0016 6948     		ldr	r0, .L21
 372 0018 FFF7FEFF 		bl	puts
 177:Core/Src/main.c ****   printf("SYSCLK: %lu Hz\r\n", SystemCoreClock);
 373              		.loc 1 177 3
 374 001c 684B     		ldr	r3, .L21+4
 375 001e 1B68     		ldr	r3, [r3]
 376 0020 1946     		mov	r1, r3
 377 0022 6848     		ldr	r0, .L21+8
 378 0024 FFF7FEFF 		bl	printf
 379              	.L19:
 380              	.LBB4:
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE END 2 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* Infinite loop */
 182:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 183:Core/Src/main.c ****   while (1)
 184:Core/Src/main.c ****   {
 185:Core/Src/main.c ****     /* USER CODE END WHILE */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 188:Core/Src/main.c ****       /* Start total program timing */
 189:Core/Src/main.c ****       DWT->CYCCNT = 0;
 381              		.loc 1 189 10
 382 0028 674B     		ldr	r3, .L21+12
 383              		.loc 1 189 19
 384 002a 0022     		movs	r2, #0
 385 002c 5A60     		str	r2, [r3, #4]
 190:Core/Src/main.c ****       uint32_t program_start_cycles = dwt_get_cycles();
 386              		.loc 1 190 39
 387 002e FFF7FEFF 		bl	dwt_get_cycles
 388 0032 C7F88400 		str	r0, [r7, #132]
 191:Core/Src/main.c ****       
 192:Core/Src/main.c ****       /* Visual indicator: LED0 ON */
 193:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 389              		.loc 1 193 7
 390 0036 0122     		movs	r2, #1
 391 0038 0121     		movs	r1, #1
 392 003a 6448     		ldr	r0, .L21+16
 393 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****       /* Task 5: FPU Impact Analysis - Test both float and double precision */
 196:Core/Src/main.c ****       
 197:Core/Src/main.c ****       /* Test 1: Float precision */
 198:Core/Src/main.c ****       g_current_test_mode = 0u; /* float */
 394              		.loc 1 198 27
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 12


 395 0040 634B     		ldr	r3, .L21+20
 396 0042 0022     		movs	r2, #0
 397 0044 1A60     		str	r2, [r3]
 199:Core/Src/main.c ****       printf("\r\n=== FPU Impact Analysis: FLOAT PRECISION ===\r\n");
 398              		.loc 1 199 7
 399 0046 6348     		ldr	r0, .L21+24
 400 0048 FFF7FEFF 		bl	puts
 401              	.LBB5:
 200:Core/Src/main.c ****       for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 402              		.loc 1 200 21
 403 004c 0023     		movs	r3, #0
 404 004e C7F8B430 		str	r3, [r7, #180]
 405              		.loc 1 200 7
 406 0052 A2E0     		b	.L2
 407              	.L3:
 408              	.LBB6:
 201:Core/Src/main.c ****       {
 202:Core/Src/main.c ****         uint16_t w = kWidths[size_index];
 409              		.loc 1 202 18
 410 0054 604A     		ldr	r2, .L21+28
 411 0056 D7F8B430 		ldr	r3, [r7, #180]
 412 005a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 413 005e FB85     		strh	r3, [r7, #46]	@ movhi
 203:Core/Src/main.c ****         uint16_t h = kHeights[size_index];
 414              		.loc 1 203 18
 415 0060 5E4A     		ldr	r2, .L21+32
 416 0062 D7F8B430 		ldr	r3, [r7, #180]
 417 0066 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 418 006a BB85     		strh	r3, [r7, #44]	@ movhi
 204:Core/Src/main.c ****         g_current_width = (uint32_t)w;
 419              		.loc 1 204 27
 420 006c FB8D     		ldrh	r3, [r7, #46]
 421              		.loc 1 204 25
 422 006e 5C4A     		ldr	r2, .L21+36
 423 0070 1360     		str	r3, [r2]
 205:Core/Src/main.c ****         g_current_height = (uint32_t)h;
 424              		.loc 1 205 28
 425 0072 BB8D     		ldrh	r3, [r7, #44]
 426              		.loc 1 205 26
 427 0074 5B4A     		ldr	r2, .L21+40
 428 0076 1360     		str	r3, [r2]
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****         DWT->CYCCNT = 0; // reset cycle counter
 429              		.loc 1 207 12
 430 0078 534B     		ldr	r3, .L21+12
 431              		.loc 1 207 21
 432 007a 0022     		movs	r2, #0
 433 007c 5A60     		str	r2, [r3, #4]
 208:Core/Src/main.c ****         uint32_t start_cycles = dwt_get_cycles();
 434              		.loc 1 208 33
 435 007e FFF7FEFF 		bl	dwt_get_cycles
 436 0082 B862     		str	r0, [r7, #40]
 209:Core/Src/main.c ****         uint32_t result_checksum = generate_mandelbrot_checksum_float(w, h, kMaxIter);
 437              		.loc 1 209 36
 438 0084 6422     		movs	r2, #100
 439 0086 B98D     		ldrh	r1, [r7, #44]
 440 0088 FB8D     		ldrh	r3, [r7, #46]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 13


 441 008a 1846     		mov	r0, r3
 442 008c FFF7FEFF 		bl	generate_mandelbrot_checksum_float
 443 0090 7862     		str	r0, [r7, #36]
 210:Core/Src/main.c ****         uint32_t end_cycles = dwt_get_cycles();
 444              		.loc 1 210 31
 445 0092 FFF7FEFF 		bl	dwt_get_cycles
 446 0096 3862     		str	r0, [r7, #32]
 211:Core/Src/main.c ****         uint32_t elapsed_cycles = end_cycles - start_cycles;
 447              		.loc 1 211 18
 448 0098 3A6A     		ldr	r2, [r7, #32]
 449 009a BB6A     		ldr	r3, [r7, #40]
 450 009c D31A     		subs	r3, r2, r3
 451 009e FB61     		str	r3, [r7, #28]
 212:Core/Src/main.c ****         double elapsed_seconds = (double)elapsed_cycles / (double)SystemCoreClock;
 452              		.loc 1 212 34
 453 00a0 F869     		ldr	r0, [r7, #28]
 454 00a2 FFF7FEFF 		bl	__aeabi_ui2d
 455 00a6 0446     		mov	r4, r0
 456 00a8 0D46     		mov	r5, r1
 457              		.loc 1 212 59
 458 00aa 454B     		ldr	r3, .L21+4
 459 00ac 1B68     		ldr	r3, [r3]
 460 00ae 1846     		mov	r0, r3
 461 00b0 FFF7FEFF 		bl	__aeabi_ui2d
 462 00b4 0246     		mov	r2, r0
 463 00b6 0B46     		mov	r3, r1
 464              		.loc 1 212 16
 465 00b8 2046     		mov	r0, r4
 466 00ba 2946     		mov	r1, r5
 467 00bc FFF7FEFF 		bl	__aeabi_ddiv
 468 00c0 0246     		mov	r2, r0
 469 00c2 0B46     		mov	r3, r1
 470 00c4 C7E90423 		strd	r2, [r7, #16]
 213:Core/Src/main.c ****         double total_pixels = (double)w * (double)h;
 471              		.loc 1 213 31
 472 00c8 FB8D     		ldrh	r3, [r7, #46]
 473 00ca 1846     		mov	r0, r3
 474 00cc FFF7FEFF 		bl	__aeabi_ui2d
 475 00d0 0446     		mov	r4, r0
 476 00d2 0D46     		mov	r5, r1
 477              		.loc 1 213 43
 478 00d4 BB8D     		ldrh	r3, [r7, #44]
 479 00d6 1846     		mov	r0, r3
 480 00d8 FFF7FEFF 		bl	__aeabi_ui2d
 481 00dc 0246     		mov	r2, r0
 482 00de 0B46     		mov	r3, r1
 483              		.loc 1 213 16
 484 00e0 2046     		mov	r0, r4
 485 00e2 2946     		mov	r1, r5
 486 00e4 FFF7FEFF 		bl	__aeabi_dmul
 487 00e8 0246     		mov	r2, r0
 488 00ea 0B46     		mov	r3, r1
 489 00ec C7E90223 		strd	r2, [r7, #8]
 214:Core/Src/main.c ****         double throughput = total_pixels / elapsed_seconds;
 490              		.loc 1 214 16
 491 00f0 D7E90423 		ldrd	r2, [r7, #16]
 492 00f4 D7E90201 		ldrd	r0, [r7, #8]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 14


 493 00f8 FFF7FEFF 		bl	__aeabi_ddiv
 494 00fc 0246     		mov	r2, r0
 495 00fe 0B46     		mov	r3, r1
 496 0100 C7E90023 		strd	r2, [r7]
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****         /* Update Live Expressions */
 217:Core/Src/main.c ****         g_current_cycles = elapsed_cycles;
 497              		.loc 1 217 26
 498 0104 384A     		ldr	r2, .L21+44
 499 0106 FB69     		ldr	r3, [r7, #28]
 500 0108 1360     		str	r3, [r2]
 218:Core/Src/main.c ****         g_current_checksum = result_checksum;
 501              		.loc 1 218 28
 502 010a 384A     		ldr	r2, .L21+48
 503 010c 7B6A     		ldr	r3, [r7, #36]
 504 010e 1360     		str	r3, [r2]
 219:Core/Src/main.c ****         g_current_execution_time = elapsed_seconds * 1000.0;
 505              		.loc 1 219 52
 506 0110 4FF00002 		mov	r2, #0
 507 0114 364B     		ldr	r3, .L21+52
 508 0116 D7E90401 		ldrd	r0, [r7, #16]
 509 011a FFF7FEFF 		bl	__aeabi_dmul
 510 011e 0246     		mov	r2, r0
 511 0120 0B46     		mov	r3, r1
 512              		.loc 1 219 34
 513 0122 3449     		ldr	r1, .L21+56
 514 0124 C1E90023 		strd	r2, [r1]
 220:Core/Src/main.c ****         g_current_throughput = throughput;
 515              		.loc 1 220 30
 516 0128 3349     		ldr	r1, .L21+60
 517 012a D7E90023 		ldrd	r2, [r7]
 518 012e C1E90023 		strd	r2, [r1]
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****         /* Store float results */
 223:Core/Src/main.c ****         checksum_float[size_index] = result_checksum;
 519              		.loc 1 223 36
 520 0132 3249     		ldr	r1, .L21+64
 521 0134 D7F8B430 		ldr	r3, [r7, #180]
 522 0138 7A6A     		ldr	r2, [r7, #36]
 523 013a 41F82320 		str	r2, [r1, r3, lsl #2]
 224:Core/Src/main.c ****         execution_time_ms_float[size_index] = elapsed_seconds * 1000.0;
 524              		.loc 1 224 63
 525 013e 4FF00002 		mov	r2, #0
 526 0142 2B4B     		ldr	r3, .L21+52
 527 0144 D7E90401 		ldrd	r0, [r7, #16]
 528 0148 FFF7FEFF 		bl	__aeabi_dmul
 529 014c 0246     		mov	r2, r0
 530 014e 0B46     		mov	r3, r1
 531              		.loc 1 224 45
 532 0150 2B48     		ldr	r0, .L21+68
 533 0152 D7F8B410 		ldr	r1, [r7, #180]
 534 0156 C900     		lsls	r1, r1, #3
 535 0158 0144     		add	r1, r1, r0
 536 015a C1E90023 		strd	r2, [r1]
 225:Core/Src/main.c ****         cpu_cycles_float[size_index] = elapsed_cycles;
 537              		.loc 1 225 38
 538 015e 2949     		ldr	r1, .L21+72
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 15


 539 0160 D7F8B430 		ldr	r3, [r7, #180]
 540 0164 FA69     		ldr	r2, [r7, #28]
 541 0166 41F82320 		str	r2, [r1, r3, lsl #2]
 226:Core/Src/main.c ****         throughput_pps_float[size_index] = throughput;
 542              		.loc 1 226 42
 543 016a 274A     		ldr	r2, .L21+76
 544 016c D7F8B430 		ldr	r3, [r7, #180]
 545 0170 DB00     		lsls	r3, r3, #3
 546 0172 D118     		adds	r1, r2, r3
 547 0174 D7E90023 		ldrd	r2, [r7]
 548 0178 C1E90023 		strd	r2, [r1]
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****         log_fpu_benchmark(w, h, elapsed_cycles, result_checksum, throughput, "FLOAT");
 549              		.loc 1 228 9
 550 017c B98D     		ldrh	r1, [r7, #44]
 551 017e F88D     		ldrh	r0, [r7, #46]
 552 0180 224B     		ldr	r3, .L21+80
 553 0182 0093     		str	r3, [sp]
 554 0184 97ED000B 		vldr.64	d0, [r7]
 555 0188 7B6A     		ldr	r3, [r7, #36]
 556 018a FA69     		ldr	r2, [r7, #28]
 557 018c FFF7FEFF 		bl	log_fpu_benchmark
 558              	.LBE6:
 200:Core/Src/main.c ****       {
 559              		.loc 1 200 67 discriminator 3
 560 0190 D7F8B430 		ldr	r3, [r7, #180]
 561 0194 0133     		adds	r3, r3, #1
 562 0196 C7F8B430 		str	r3, [r7, #180]
 563              	.L2:
 200:Core/Src/main.c ****       {
 564              		.loc 1 200 48 discriminator 1
 565 019a 0522     		movs	r2, #5
 566 019c D7F8B430 		ldr	r3, [r7, #180]
 567 01a0 9342     		cmp	r3, r2
 568 01a2 FFF457AF 		bcc	.L3
 569              	.LBE5:
 229:Core/Src/main.c ****       }
 230:Core/Src/main.c ****       
 231:Core/Src/main.c ****       /* Test 2: Double precision */
 232:Core/Src/main.c ****       g_current_test_mode = 1u; /* double */
 570              		.loc 1 232 27
 571 01a6 0A4B     		ldr	r3, .L21+20
 572 01a8 0122     		movs	r2, #1
 573 01aa 1A60     		str	r2, [r3]
 233:Core/Src/main.c ****       printf("\r\n=== FPU Impact Analysis: DOUBLE PRECISION ===\r\n");
 574              		.loc 1 233 7
 575 01ac 1848     		ldr	r0, .L21+84
 576 01ae FFF7FEFF 		bl	puts
 577              	.LBB7:
 234:Core/Src/main.c ****       for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 578              		.loc 1 234 21
 579 01b2 0023     		movs	r3, #0
 580 01b4 C7F8B030 		str	r3, [r7, #176]
 581              		.loc 1 234 7
 582 01b8 D9E0     		b	.L4
 583              	.L22:
 584 01ba 00BF     		.align	2
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 16


 585              	.L21:
 586 01bc 18000000 		.word	.LC3
 587 01c0 00000000 		.word	SystemCoreClock
 588 01c4 50000000 		.word	.LC4
 589 01c8 001000E0 		.word	-536866816
 590 01cc 00040240 		.word	1073873920
 591 01d0 00000000 		.word	g_current_test_mode
 592 01d4 64000000 		.word	.LC5
 593 01d8 00000000 		.word	kWidths
 594 01dc 00000000 		.word	kHeights
 595 01e0 00000000 		.word	g_current_width
 596 01e4 00000000 		.word	g_current_height
 597 01e8 00000000 		.word	g_current_cycles
 598 01ec 00000000 		.word	g_current_checksum
 599 01f0 00408F40 		.word	1083129856
 600 01f4 00000000 		.word	g_current_execution_time
 601 01f8 00000000 		.word	g_current_throughput
 602 01fc 00000000 		.word	checksum_float
 603 0200 00000000 		.word	execution_time_ms_float
 604 0204 00000000 		.word	cpu_cycles_float
 605 0208 00000000 		.word	throughput_pps_float
 606 020c 94000000 		.word	.LC6
 607 0210 9C000000 		.word	.LC7
 608              	.L5:
 609              	.LBB8:
 235:Core/Src/main.c ****       {
 236:Core/Src/main.c ****         uint16_t w = kWidths[size_index];
 610              		.loc 1 236 18
 611 0214 5C4A     		ldr	r2, .L23
 612 0216 D7F8B030 		ldr	r3, [r7, #176]
 613 021a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 614 021e A7F85A30 		strh	r3, [r7, #90]	@ movhi
 237:Core/Src/main.c ****         uint16_t h = kHeights[size_index];
 615              		.loc 1 237 18
 616 0222 5A4A     		ldr	r2, .L23+4
 617 0224 D7F8B030 		ldr	r3, [r7, #176]
 618 0228 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 619 022c A7F85830 		strh	r3, [r7, #88]	@ movhi
 238:Core/Src/main.c ****         g_current_width = (uint32_t)w;
 620              		.loc 1 238 27
 621 0230 B7F85A30 		ldrh	r3, [r7, #90]
 622              		.loc 1 238 25
 623 0234 564A     		ldr	r2, .L23+8
 624 0236 1360     		str	r3, [r2]
 239:Core/Src/main.c ****         g_current_height = (uint32_t)h;
 625              		.loc 1 239 28
 626 0238 B7F85830 		ldrh	r3, [r7, #88]
 627              		.loc 1 239 26
 628 023c 554A     		ldr	r2, .L23+12
 629 023e 1360     		str	r3, [r2]
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****         DWT->CYCCNT = 0; // reset cycle counter
 630              		.loc 1 241 12
 631 0240 554B     		ldr	r3, .L23+16
 632              		.loc 1 241 21
 633 0242 0022     		movs	r2, #0
 634 0244 5A60     		str	r2, [r3, #4]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 17


 242:Core/Src/main.c ****         uint32_t start_cycles = dwt_get_cycles();
 635              		.loc 1 242 33
 636 0246 FFF7FEFF 		bl	dwt_get_cycles
 637 024a 7865     		str	r0, [r7, #84]
 243:Core/Src/main.c ****         uint32_t result_checksum = generate_mandelbrot_checksum_double(w, h, kMaxIter);
 638              		.loc 1 243 36
 639 024c 6422     		movs	r2, #100
 640 024e B7F85810 		ldrh	r1, [r7, #88]
 641 0252 B7F85A30 		ldrh	r3, [r7, #90]
 642 0256 1846     		mov	r0, r3
 643 0258 FFF7FEFF 		bl	generate_mandelbrot_checksum_double
 644 025c 3865     		str	r0, [r7, #80]
 244:Core/Src/main.c ****         uint32_t end_cycles = dwt_get_cycles();
 645              		.loc 1 244 31
 646 025e FFF7FEFF 		bl	dwt_get_cycles
 647 0262 F864     		str	r0, [r7, #76]
 245:Core/Src/main.c ****         uint32_t elapsed_cycles = end_cycles - start_cycles;
 648              		.loc 1 245 18
 649 0264 FA6C     		ldr	r2, [r7, #76]
 650 0266 7B6D     		ldr	r3, [r7, #84]
 651 0268 D31A     		subs	r3, r2, r3
 652 026a BB64     		str	r3, [r7, #72]
 246:Core/Src/main.c ****         double elapsed_seconds = (double)elapsed_cycles / (double)SystemCoreClock;
 653              		.loc 1 246 34
 654 026c B86C     		ldr	r0, [r7, #72]
 655 026e FFF7FEFF 		bl	__aeabi_ui2d
 656 0272 0446     		mov	r4, r0
 657 0274 0D46     		mov	r5, r1
 658              		.loc 1 246 59
 659 0276 494B     		ldr	r3, .L23+20
 660 0278 1B68     		ldr	r3, [r3]
 661 027a 1846     		mov	r0, r3
 662 027c FFF7FEFF 		bl	__aeabi_ui2d
 663 0280 0246     		mov	r2, r0
 664 0282 0B46     		mov	r3, r1
 665              		.loc 1 246 16
 666 0284 2046     		mov	r0, r4
 667 0286 2946     		mov	r1, r5
 668 0288 FFF7FEFF 		bl	__aeabi_ddiv
 669 028c 0246     		mov	r2, r0
 670 028e 0B46     		mov	r3, r1
 671 0290 C7E91023 		strd	r2, [r7, #64]
 247:Core/Src/main.c ****         double total_pixels = (double)w * (double)h;
 672              		.loc 1 247 31
 673 0294 B7F85A30 		ldrh	r3, [r7, #90]
 674 0298 1846     		mov	r0, r3
 675 029a FFF7FEFF 		bl	__aeabi_ui2d
 676 029e 0446     		mov	r4, r0
 677 02a0 0D46     		mov	r5, r1
 678              		.loc 1 247 43
 679 02a2 B7F85830 		ldrh	r3, [r7, #88]
 680 02a6 1846     		mov	r0, r3
 681 02a8 FFF7FEFF 		bl	__aeabi_ui2d
 682 02ac 0246     		mov	r2, r0
 683 02ae 0B46     		mov	r3, r1
 684              		.loc 1 247 16
 685 02b0 2046     		mov	r0, r4
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 18


 686 02b2 2946     		mov	r1, r5
 687 02b4 FFF7FEFF 		bl	__aeabi_dmul
 688 02b8 0246     		mov	r2, r0
 689 02ba 0B46     		mov	r3, r1
 690 02bc C7E90E23 		strd	r2, [r7, #56]
 248:Core/Src/main.c ****         double throughput = total_pixels / elapsed_seconds;
 691              		.loc 1 248 16
 692 02c0 D7E91023 		ldrd	r2, [r7, #64]
 693 02c4 D7E90E01 		ldrd	r0, [r7, #56]
 694 02c8 FFF7FEFF 		bl	__aeabi_ddiv
 695 02cc 0246     		mov	r2, r0
 696 02ce 0B46     		mov	r3, r1
 697 02d0 C7E90C23 		strd	r2, [r7, #48]
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****         /* Update Live Expressions */
 251:Core/Src/main.c ****         g_current_cycles = elapsed_cycles;
 698              		.loc 1 251 26
 699 02d4 324A     		ldr	r2, .L23+24
 700 02d6 BB6C     		ldr	r3, [r7, #72]
 701 02d8 1360     		str	r3, [r2]
 252:Core/Src/main.c ****         g_current_checksum = result_checksum;
 702              		.loc 1 252 28
 703 02da 324A     		ldr	r2, .L23+28
 704 02dc 3B6D     		ldr	r3, [r7, #80]
 705 02de 1360     		str	r3, [r2]
 253:Core/Src/main.c ****         g_current_execution_time = elapsed_seconds * 1000.0;
 706              		.loc 1 253 52
 707 02e0 4FF00002 		mov	r2, #0
 708 02e4 304B     		ldr	r3, .L23+32
 709 02e6 D7E91001 		ldrd	r0, [r7, #64]
 710 02ea FFF7FEFF 		bl	__aeabi_dmul
 711 02ee 0246     		mov	r2, r0
 712 02f0 0B46     		mov	r3, r1
 713              		.loc 1 253 34
 714 02f2 2E49     		ldr	r1, .L23+36
 715 02f4 C1E90023 		strd	r2, [r1]
 254:Core/Src/main.c ****         g_current_throughput = throughput;
 716              		.loc 1 254 30
 717 02f8 2D49     		ldr	r1, .L23+40
 718 02fa D7E90C23 		ldrd	r2, [r7, #48]
 719 02fe C1E90023 		strd	r2, [r1]
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****         /* Store double results */
 257:Core/Src/main.c ****         checksum_double[size_index] = result_checksum;
 720              		.loc 1 257 37
 721 0302 2C49     		ldr	r1, .L23+44
 722 0304 D7F8B030 		ldr	r3, [r7, #176]
 723 0308 3A6D     		ldr	r2, [r7, #80]
 724 030a 41F82320 		str	r2, [r1, r3, lsl #2]
 258:Core/Src/main.c ****         execution_time_ms_double[size_index] = elapsed_seconds * 1000.0;
 725              		.loc 1 258 64
 726 030e 4FF00002 		mov	r2, #0
 727 0312 254B     		ldr	r3, .L23+32
 728 0314 D7E91001 		ldrd	r0, [r7, #64]
 729 0318 FFF7FEFF 		bl	__aeabi_dmul
 730 031c 0246     		mov	r2, r0
 731 031e 0B46     		mov	r3, r1
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 19


 732              		.loc 1 258 46
 733 0320 2548     		ldr	r0, .L23+48
 734 0322 D7F8B010 		ldr	r1, [r7, #176]
 735 0326 C900     		lsls	r1, r1, #3
 736 0328 0144     		add	r1, r1, r0
 737 032a C1E90023 		strd	r2, [r1]
 259:Core/Src/main.c ****         cpu_cycles_double[size_index] = elapsed_cycles;
 738              		.loc 1 259 39
 739 032e 2349     		ldr	r1, .L23+52
 740 0330 D7F8B030 		ldr	r3, [r7, #176]
 741 0334 BA6C     		ldr	r2, [r7, #72]
 742 0336 41F82320 		str	r2, [r1, r3, lsl #2]
 260:Core/Src/main.c ****         throughput_pps_double[size_index] = throughput;
 743              		.loc 1 260 43
 744 033a 214A     		ldr	r2, .L23+56
 745 033c D7F8B030 		ldr	r3, [r7, #176]
 746 0340 DB00     		lsls	r3, r3, #3
 747 0342 D118     		adds	r1, r2, r3
 748 0344 D7E90C23 		ldrd	r2, [r7, #48]
 749 0348 C1E90023 		strd	r2, [r1]
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****         log_fpu_benchmark(w, h, elapsed_cycles, result_checksum, throughput, "DOUBLE");
 750              		.loc 1 262 9
 751 034c B7F85810 		ldrh	r1, [r7, #88]
 752 0350 B7F85A00 		ldrh	r0, [r7, #90]
 753 0354 1B4B     		ldr	r3, .L23+60
 754 0356 0093     		str	r3, [sp]
 755 0358 97ED0C0B 		vldr.64	d0, [r7, #48]
 756 035c 3B6D     		ldr	r3, [r7, #80]
 757 035e BA6C     		ldr	r2, [r7, #72]
 758 0360 FFF7FEFF 		bl	log_fpu_benchmark
 759              	.LBE8:
 234:Core/Src/main.c ****       {
 760              		.loc 1 234 67 discriminator 3
 761 0364 D7F8B030 		ldr	r3, [r7, #176]
 762 0368 0133     		adds	r3, r3, #1
 763 036a C7F8B030 		str	r3, [r7, #176]
 764              	.L4:
 234:Core/Src/main.c ****       {
 765              		.loc 1 234 48 discriminator 1
 766 036e 0522     		movs	r2, #5
 767 0370 D7F8B030 		ldr	r3, [r7, #176]
 768 0374 9342     		cmp	r3, r2
 769 0376 FFF44DAF 		bcc	.L5
 770              	.LBE7:
 263:Core/Src/main.c ****       }
 264:Core/Src/main.c ****       
 265:Core/Src/main.c ****       /* Calculate and log comparisons */
 266:Core/Src/main.c ****       printf("\r\n=== FPU Impact Analysis: COMPARISON ===\r\n");
 771              		.loc 1 266 7
 772 037a 1348     		ldr	r0, .L23+64
 773 037c FFF7FEFF 		bl	puts
 774              	.LBB9:
 267:Core/Src/main.c ****       for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 775              		.loc 1 267 21
 776 0380 0023     		movs	r3, #0
 777 0382 C7F8AC30 		str	r3, [r7, #172]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 20


 778              		.loc 1 267 7
 779 0386 C6E0     		b	.L6
 780              	.L24:
 781              		.align	2
 782              	.L23:
 783 0388 00000000 		.word	kWidths
 784 038c 00000000 		.word	kHeights
 785 0390 00000000 		.word	g_current_width
 786 0394 00000000 		.word	g_current_height
 787 0398 001000E0 		.word	-536866816
 788 039c 00000000 		.word	SystemCoreClock
 789 03a0 00000000 		.word	g_current_cycles
 790 03a4 00000000 		.word	g_current_checksum
 791 03a8 00408F40 		.word	1083129856
 792 03ac 00000000 		.word	g_current_execution_time
 793 03b0 00000000 		.word	g_current_throughput
 794 03b4 00000000 		.word	checksum_double
 795 03b8 00000000 		.word	execution_time_ms_double
 796 03bc 00000000 		.word	cpu_cycles_double
 797 03c0 00000000 		.word	throughput_pps_double
 798 03c4 D0000000 		.word	.LC8
 799 03c8 D8000000 		.word	.LC9
 800              	.L10:
 801              	.LBB10:
 268:Core/Src/main.c ****       {
 269:Core/Src/main.c ****         uint16_t w = kWidths[size_index];
 802              		.loc 1 269 18
 803 03cc 954A     		ldr	r2, .L25
 804 03ce D7F8AC30 		ldr	r3, [r7, #172]
 805 03d2 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 806 03d6 A7F85E30 		strh	r3, [r7, #94]	@ movhi
 270:Core/Src/main.c ****         uint16_t h = kHeights[size_index];
 807              		.loc 1 270 18
 808 03da 934A     		ldr	r2, .L25+4
 809 03dc D7F8AC30 		ldr	r3, [r7, #172]
 810 03e0 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 811 03e4 A7F85C30 		strh	r3, [r7, #92]	@ movhi
 271:Core/Src/main.c ****         
 272:Core/Src/main.c ****         /* Calculate accuracy difference */
 273:Core/Src/main.c ****         double accuracy_diff = 0.0;
 812              		.loc 1 273 16
 813 03e8 4FF00002 		mov	r2, #0
 814 03ec 4FF00003 		mov	r3, #0
 815 03f0 C7E92823 		strd	r2, [r7, #160]
 274:Core/Src/main.c ****         if (checksum_double[size_index] != 0) {
 816              		.loc 1 274 28
 817 03f4 8D4A     		ldr	r2, .L25+8
 818 03f6 D7F8AC30 		ldr	r3, [r7, #172]
 819 03fa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 820              		.loc 1 274 12
 821 03fe 002B     		cmp	r3, #0
 822 0400 36D0     		beq	.L7
 275:Core/Src/main.c ****           accuracy_diff = ((double)checksum_float[size_index] - (double)checksum_double[size_index]
 823              		.loc 1 275 50
 824 0402 8B4A     		ldr	r2, .L25+12
 825 0404 D7F8AC30 		ldr	r3, [r7, #172]
 826 0408 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 21


 827              		.loc 1 275 28
 828 040c 1846     		mov	r0, r3
 829 040e FFF7FEFF 		bl	__aeabi_ui2d
 830 0412 0446     		mov	r4, r0
 831 0414 0D46     		mov	r5, r1
 832              		.loc 1 275 88
 833 0416 854A     		ldr	r2, .L25+8
 834 0418 D7F8AC30 		ldr	r3, [r7, #172]
 835 041c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 836              		.loc 1 275 65
 837 0420 1846     		mov	r0, r3
 838 0422 FFF7FEFF 		bl	__aeabi_ui2d
 839 0426 0246     		mov	r2, r0
 840 0428 0B46     		mov	r3, r1
 841              		.loc 1 275 63
 842 042a 2046     		mov	r0, r4
 843 042c 2946     		mov	r1, r5
 844 042e FFF7FEFF 		bl	__aeabi_dsub
 845 0432 0246     		mov	r2, r0
 846 0434 0B46     		mov	r3, r1
 847 0436 1446     		mov	r4, r2
 848 0438 1D46     		mov	r5, r3
 849              		.loc 1 275 127
 850 043a 7C4A     		ldr	r2, .L25+8
 851 043c D7F8AC30 		ldr	r3, [r7, #172]
 852 0440 52F82330 		ldr	r3, [r2, r3, lsl #2]
 853              		.loc 1 275 104
 854 0444 1846     		mov	r0, r3
 855 0446 FFF7FEFF 		bl	__aeabi_ui2d
 856 044a 0246     		mov	r2, r0
 857 044c 0B46     		mov	r3, r1
 858              		.loc 1 275 102
 859 044e 2046     		mov	r0, r4
 860 0450 2946     		mov	r1, r5
 861 0452 FFF7FEFF 		bl	__aeabi_ddiv
 862 0456 0246     		mov	r2, r0
 863 0458 0B46     		mov	r3, r1
 864 045a 1046     		mov	r0, r2
 865 045c 1946     		mov	r1, r3
 866              		.loc 1 275 25
 867 045e 4FF00002 		mov	r2, #0
 868 0462 744B     		ldr	r3, .L25+16
 869 0464 FFF7FEFF 		bl	__aeabi_dmul
 870 0468 0246     		mov	r2, r0
 871 046a 0B46     		mov	r3, r1
 872 046c C7E92823 		strd	r2, [r7, #160]
 873              	.L7:
 276:Core/Src/main.c ****         }
 277:Core/Src/main.c ****         accuracy_diff_percent[size_index] = accuracy_diff;
 874              		.loc 1 277 43
 875 0470 714A     		ldr	r2, .L25+20
 876 0472 D7F8AC30 		ldr	r3, [r7, #172]
 877 0476 DB00     		lsls	r3, r3, #3
 878 0478 D118     		adds	r1, r2, r3
 879 047a D7E92823 		ldrd	r2, [r7, #160]
 880 047e C1E90023 		strd	r2, [r1]
 278:Core/Src/main.c ****         
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 22


 279:Core/Src/main.c ****         /* Calculate speedup factor */
 280:Core/Src/main.c ****         double speedup = 0.0;
 881              		.loc 1 280 16
 882 0482 4FF00002 		mov	r2, #0
 883 0486 4FF00003 		mov	r3, #0
 884 048a C7E92623 		strd	r2, [r7, #152]
 281:Core/Src/main.c ****         if (execution_time_ms_float[size_index] != 0) {
 885              		.loc 1 281 36
 886 048e 6B4A     		ldr	r2, .L25+24
 887 0490 D7F8AC30 		ldr	r3, [r7, #172]
 888 0494 DB00     		lsls	r3, r3, #3
 889 0496 1344     		add	r3, r3, r2
 890 0498 D3E90001 		ldrd	r0, [r3]
 891              		.loc 1 281 12
 892 049c 4FF00002 		mov	r2, #0
 893 04a0 4FF00003 		mov	r3, #0
 894 04a4 FFF7FEFF 		bl	__aeabi_dcmpeq
 895 04a8 0346     		mov	r3, r0
 896 04aa 002B     		cmp	r3, #0
 897 04ac 13D1     		bne	.L8
 282:Core/Src/main.c ****           speedup = execution_time_ms_double[size_index] / execution_time_ms_float[size_index];
 898              		.loc 1 282 45
 899 04ae 644A     		ldr	r2, .L25+28
 900 04b0 D7F8AC30 		ldr	r3, [r7, #172]
 901 04b4 DB00     		lsls	r3, r3, #3
 902 04b6 1344     		add	r3, r3, r2
 903 04b8 D3E90001 		ldrd	r0, [r3]
 904              		.loc 1 282 83
 905 04bc 5F4A     		ldr	r2, .L25+24
 906 04be D7F8AC30 		ldr	r3, [r7, #172]
 907 04c2 DB00     		lsls	r3, r3, #3
 908 04c4 1344     		add	r3, r3, r2
 909 04c6 D3E90023 		ldrd	r2, [r3]
 910              		.loc 1 282 19
 911 04ca FFF7FEFF 		bl	__aeabi_ddiv
 912 04ce 0246     		mov	r2, r0
 913 04d0 0B46     		mov	r3, r1
 914 04d2 C7E92623 		strd	r2, [r7, #152]
 915              	.L8:
 283:Core/Src/main.c ****         }
 284:Core/Src/main.c ****         speedup_factor[size_index] = speedup;
 916              		.loc 1 284 36
 917 04d6 5B4A     		ldr	r2, .L25+32
 918 04d8 D7F8AC30 		ldr	r3, [r7, #172]
 919 04dc DB00     		lsls	r3, r3, #3
 920 04de D118     		adds	r1, r2, r3
 921 04e0 D7E92623 		ldrd	r2, [r7, #152]
 922 04e4 C1E90023 		strd	r2, [r1]
 285:Core/Src/main.c ****         
 286:Core/Src/main.c ****         log_fpu_comparison(w, h, checksum_float[size_index], checksum_double[size_index], speedup);
 923              		.loc 1 286 48
 924 04e8 514A     		ldr	r2, .L25+12
 925 04ea D7F8AC30 		ldr	r3, [r7, #172]
 926 04ee 52F82320 		ldr	r2, [r2, r3, lsl #2]
 927              		.loc 1 286 77
 928 04f2 4E49     		ldr	r1, .L25+8
 929 04f4 D7F8AC30 		ldr	r3, [r7, #172]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 23


 930 04f8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 931              		.loc 1 286 9
 932 04fc B7F85C10 		ldrh	r1, [r7, #92]
 933 0500 B7F85E00 		ldrh	r0, [r7, #94]
 934 0504 97ED260B 		vldr.64	d0, [r7, #152]
 935 0508 FFF7FEFF 		bl	log_fpu_comparison
 936              	.LBE10:
 267:Core/Src/main.c ****       {
 937              		.loc 1 267 67 discriminator 2
 938 050c D7F8AC30 		ldr	r3, [r7, #172]
 939 0510 0133     		adds	r3, r3, #1
 940 0512 C7F8AC30 		str	r3, [r7, #172]
 941              	.L6:
 267:Core/Src/main.c ****       {
 942              		.loc 1 267 48 discriminator 1
 943 0516 0522     		movs	r2, #5
 944 0518 D7F8AC30 		ldr	r3, [r7, #172]
 945 051c 9342     		cmp	r3, r2
 946 051e FFF455AF 		bcc	.L10
 947              	.LBE9:
 287:Core/Src/main.c ****       }
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****       /* End total program timing */
 290:Core/Src/main.c ****       uint32_t program_end_cycles = dwt_get_cycles();
 948              		.loc 1 290 37
 949 0522 FFF7FEFF 		bl	dwt_get_cycles
 950 0526 C7F88000 		str	r0, [r7, #128]
 291:Core/Src/main.c ****       g_total_program_cycles = program_end_cycles - program_start_cycles;
 951              		.loc 1 291 51
 952 052a D7F88020 		ldr	r2, [r7, #128]
 953 052e D7F88430 		ldr	r3, [r7, #132]
 954 0532 D31A     		subs	r3, r2, r3
 955              		.loc 1 291 30
 956 0534 444A     		ldr	r2, .L25+36
 957 0536 1360     		str	r3, [r2]
 292:Core/Src/main.c ****       g_total_program_time_ms = (double)g_total_program_cycles / (double)SystemCoreClock * 1000.0;
 958              		.loc 1 292 33
 959 0538 434B     		ldr	r3, .L25+36
 960 053a 1B68     		ldr	r3, [r3]
 961 053c 1846     		mov	r0, r3
 962 053e FFF7FEFF 		bl	__aeabi_ui2d
 963 0542 0446     		mov	r4, r0
 964 0544 0D46     		mov	r5, r1
 965              		.loc 1 292 66
 966 0546 414B     		ldr	r3, .L25+40
 967 0548 1B68     		ldr	r3, [r3]
 968 054a 1846     		mov	r0, r3
 969 054c FFF7FEFF 		bl	__aeabi_ui2d
 970 0550 0246     		mov	r2, r0
 971 0552 0B46     		mov	r3, r1
 972              		.loc 1 292 64
 973 0554 2046     		mov	r0, r4
 974 0556 2946     		mov	r1, r5
 975 0558 FFF7FEFF 		bl	__aeabi_ddiv
 976 055c 0246     		mov	r2, r0
 977 055e 0B46     		mov	r3, r1
 978 0560 1046     		mov	r0, r2
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 24


 979 0562 1946     		mov	r1, r3
 980              		.loc 1 292 90
 981 0564 4FF00002 		mov	r2, #0
 982 0568 394B     		ldr	r3, .L25+44
 983 056a FFF7FEFF 		bl	__aeabi_dmul
 984 056e 0246     		mov	r2, r0
 985 0570 0B46     		mov	r3, r1
 986              		.loc 1 292 31
 987 0572 3849     		ldr	r1, .L25+48
 988 0574 C1E90023 		strd	r2, [r1]
 293:Core/Src/main.c ****       
 294:Core/Src/main.c ****       /* Calculate total time sum from individual tests */
 295:Core/Src/main.c ****       g_total_time_sum = 0.0;
 989              		.loc 1 295 24
 990 0578 3749     		ldr	r1, .L25+52
 991 057a 4FF00002 		mov	r2, #0
 992 057e 4FF00003 		mov	r3, #0
 993 0582 C1E90023 		strd	r2, [r1]
 994              	.LBB11:
 296:Core/Src/main.c ****       for (uint32_t i = 0; i < kNumResolutions; ++i) {
 995              		.loc 1 296 21
 996 0586 0023     		movs	r3, #0
 997 0588 C7F89430 		str	r3, [r7, #148]
 998              		.loc 1 296 7
 999 058c 22E0     		b	.L11
 1000              	.L12:
 297:Core/Src/main.c ****         g_total_time_sum += execution_time_ms_float[i] + execution_time_ms_double[i];
 1001              		.loc 1 297 52
 1002 058e 2B4A     		ldr	r2, .L25+24
 1003 0590 D7F89430 		ldr	r3, [r7, #148]
 1004 0594 DB00     		lsls	r3, r3, #3
 1005 0596 1344     		add	r3, r3, r2
 1006 0598 D3E90001 		ldrd	r0, [r3]
 1007              		.loc 1 297 82
 1008 059c 284A     		ldr	r2, .L25+28
 1009 059e D7F89430 		ldr	r3, [r7, #148]
 1010 05a2 DB00     		lsls	r3, r3, #3
 1011 05a4 1344     		add	r3, r3, r2
 1012 05a6 D3E90023 		ldrd	r2, [r3]
 1013              		.loc 1 297 56
 1014 05aa FFF7FEFF 		bl	__aeabi_dadd
 1015 05ae 0246     		mov	r2, r0
 1016 05b0 0B46     		mov	r3, r1
 1017 05b2 1046     		mov	r0, r2
 1018 05b4 1946     		mov	r1, r3
 1019              		.loc 1 297 26
 1020 05b6 284B     		ldr	r3, .L25+52
 1021 05b8 D3E90023 		ldrd	r2, [r3]
 1022 05bc FFF7FEFF 		bl	__aeabi_dadd
 1023 05c0 0246     		mov	r2, r0
 1024 05c2 0B46     		mov	r3, r1
 1025 05c4 2449     		ldr	r1, .L25+52
 1026 05c6 C1E90023 		strd	r2, [r1]
 296:Core/Src/main.c ****       for (uint32_t i = 0; i < kNumResolutions; ++i) {
 1027              		.loc 1 296 49 discriminator 3
 1028 05ca D7F89430 		ldr	r3, [r7, #148]
 1029 05ce 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 25


 1030 05d0 C7F89430 		str	r3, [r7, #148]
 1031              	.L11:
 296:Core/Src/main.c ****       for (uint32_t i = 0; i < kNumResolutions; ++i) {
 1032              		.loc 1 296 30 discriminator 1
 1033 05d4 0522     		movs	r2, #5
 1034 05d6 D7F89430 		ldr	r3, [r7, #148]
 1035 05da 9342     		cmp	r3, r2
 1036 05dc D7D3     		bcc	.L12
 1037              	.LBE11:
 298:Core/Src/main.c ****       }
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****       /* Task 7: Fixed-Point Arithmetic Analysis */
 301:Core/Src/main.c ****       printf("\r\n=== Task 7: Fixed-Point Arithmetic Analysis ===\r\n");
 1038              		.loc 1 301 7
 1039 05de 1F48     		ldr	r0, .L25+56
 1040 05e0 FFF7FEFF 		bl	puts
 1041              	.LBB12:
 302:Core/Src/main.c ****       
 303:Core/Src/main.c ****       /* Test each scaling factor */
 304:Core/Src/main.c ****       for (uint32_t scale_idx = 0; scale_idx < kNumScalingFactors; ++scale_idx)
 1042              		.loc 1 304 21
 1043 05e4 0023     		movs	r3, #0
 1044 05e6 C7F89030 		str	r3, [r7, #144]
 1045              		.loc 1 304 7
 1046 05ea C4E0     		b	.L13
 1047              	.L16:
 1048              	.LBB13:
 305:Core/Src/main.c ****       {
 306:Core/Src/main.c ****         uint32_t scale = kScalingFactors[scale_idx];
 1049              		.loc 1 306 18
 1050 05ec 1C4A     		ldr	r2, .L25+60
 1051 05ee D7F89030 		ldr	r3, [r7, #144]
 1052 05f2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1053 05f6 FB67     		str	r3, [r7, #124]
 307:Core/Src/main.c ****         g_current_scaling_factor = scale;
 1054              		.loc 1 307 34
 1055 05f8 1A4A     		ldr	r2, .L25+64
 1056 05fa FB6F     		ldr	r3, [r7, #124]
 1057 05fc 1360     		str	r3, [r2]
 308:Core/Src/main.c ****         g_current_scaling_index = scale_idx;
 1058              		.loc 1 308 33
 1059 05fe 1A4A     		ldr	r2, .L25+68
 1060 0600 D7F89030 		ldr	r3, [r7, #144]
 1061 0604 1360     		str	r3, [r2]
 309:Core/Src/main.c ****         
 310:Core/Src/main.c ****         printf("\r\n--- Scaling Factor: %s (%lu) ---\r\n", kScalingFactorNames[scale_idx], (unsigne
 1062              		.loc 1 310 9
 1063 0606 194A     		ldr	r2, .L25+72
 1064 0608 D7F89030 		ldr	r3, [r7, #144]
 1065 060c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1066 0610 FA6F     		ldr	r2, [r7, #124]
 1067 0612 1946     		mov	r1, r3
 1068 0614 1648     		ldr	r0, .L25+76
 1069 0616 FFF7FEFF 		bl	printf
 1070              	.LBB14:
 311:Core/Src/main.c ****         
 312:Core/Src/main.c ****         /* Test each resolution */
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 26


 313:Core/Src/main.c ****         for (uint32_t size_index = 0; size_index < kNumResolutions; ++size_index)
 1071              		.loc 1 313 23
 1072 061a 0023     		movs	r3, #0
 1073 061c C7F88C30 		str	r3, [r7, #140]
 1074              		.loc 1 313 9
 1075 0620 9FE0     		b	.L14
 1076              	.L26:
 1077 0622 00BF     		.align	2
 1078              	.L25:
 1079 0624 00000000 		.word	kWidths
 1080 0628 00000000 		.word	kHeights
 1081 062c 00000000 		.word	checksum_double
 1082 0630 00000000 		.word	checksum_float
 1083 0634 00005940 		.word	1079574528
 1084 0638 00000000 		.word	accuracy_diff_percent
 1085 063c 00000000 		.word	execution_time_ms_float
 1086 0640 00000000 		.word	execution_time_ms_double
 1087 0644 00000000 		.word	speedup_factor
 1088 0648 00000000 		.word	g_total_program_cycles
 1089 064c 00000000 		.word	SystemCoreClock
 1090 0650 00408F40 		.word	1083129856
 1091 0654 00000000 		.word	g_total_program_time_ms
 1092 0658 00000000 		.word	g_total_time_sum
 1093 065c 04010000 		.word	.LC10
 1094 0660 00000000 		.word	kScalingFactors
 1095 0664 00000000 		.word	g_current_scaling_factor
 1096 0668 00000000 		.word	g_current_scaling_index
 1097 066c 00000000 		.word	kScalingFactorNames
 1098 0670 38010000 		.word	.LC11
 1099              	.L15:
 1100              	.LBB15:
 314:Core/Src/main.c ****         {
 315:Core/Src/main.c ****           uint16_t w = kWidths[size_index];
 1101              		.loc 1 315 20
 1102 0674 5C4A     		ldr	r2, .L27
 1103 0676 D7F88C30 		ldr	r3, [r7, #140]
 1104 067a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1105 067e A7F87A30 		strh	r3, [r7, #122]	@ movhi
 316:Core/Src/main.c ****           uint16_t h = kHeights[size_index];
 1106              		.loc 1 316 20
 1107 0682 5A4A     		ldr	r2, .L27+4
 1108 0684 D7F88C30 		ldr	r3, [r7, #140]
 1109 0688 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1110 068c A7F87830 		strh	r3, [r7, #120]	@ movhi
 317:Core/Src/main.c ****           
 318:Core/Src/main.c ****           /* Time the fixed-point calculation using DWT */
 319:Core/Src/main.c ****           DWT->CYCCNT = 0;
 1111              		.loc 1 319 14
 1112 0690 574B     		ldr	r3, .L27+8
 1113              		.loc 1 319 23
 1114 0692 0022     		movs	r2, #0
 1115 0694 5A60     		str	r2, [r3, #4]
 320:Core/Src/main.c ****           uint32_t start_cycles = dwt_get_cycles();
 1116              		.loc 1 320 35
 1117 0696 FFF7FEFF 		bl	dwt_get_cycles
 1118 069a 7867     		str	r0, [r7, #116]
 321:Core/Src/main.c ****           uint32_t result_checksum = generate_mandelbrot_checksum_fixed_point(w, h, kMaxIter, scale
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 27


 1119              		.loc 1 321 38
 1120 069c 6422     		movs	r2, #100
 1121 069e B7F87810 		ldrh	r1, [r7, #120]
 1122 06a2 B7F87A00 		ldrh	r0, [r7, #122]
 1123 06a6 FB6F     		ldr	r3, [r7, #124]
 1124 06a8 FFF7FEFF 		bl	generate_mandelbrot_checksum_fixed_point
 1125 06ac 3867     		str	r0, [r7, #112]
 322:Core/Src/main.c ****           uint32_t end_cycles = dwt_get_cycles();
 1126              		.loc 1 322 33
 1127 06ae FFF7FEFF 		bl	dwt_get_cycles
 1128 06b2 F866     		str	r0, [r7, #108]
 323:Core/Src/main.c ****           uint32_t elapsed_cycles = end_cycles - start_cycles;
 1129              		.loc 1 323 20
 1130 06b4 FA6E     		ldr	r2, [r7, #108]
 1131 06b6 7B6F     		ldr	r3, [r7, #116]
 1132 06b8 D31A     		subs	r3, r2, r3
 1133 06ba BB66     		str	r3, [r7, #104]
 324:Core/Src/main.c ****           double elapsed_ms = (double)elapsed_cycles / (double)SystemCoreClock * 1000.0;
 1134              		.loc 1 324 31
 1135 06bc B86E     		ldr	r0, [r7, #104]
 1136 06be FFF7FEFF 		bl	__aeabi_ui2d
 1137 06c2 0446     		mov	r4, r0
 1138 06c4 0D46     		mov	r5, r1
 1139              		.loc 1 324 56
 1140 06c6 4B4B     		ldr	r3, .L27+12
 1141 06c8 1B68     		ldr	r3, [r3]
 1142 06ca 1846     		mov	r0, r3
 1143 06cc FFF7FEFF 		bl	__aeabi_ui2d
 1144 06d0 0246     		mov	r2, r0
 1145 06d2 0B46     		mov	r3, r1
 1146              		.loc 1 324 54
 1147 06d4 2046     		mov	r0, r4
 1148 06d6 2946     		mov	r1, r5
 1149 06d8 FFF7FEFF 		bl	__aeabi_ddiv
 1150 06dc 0246     		mov	r2, r0
 1151 06de 0B46     		mov	r3, r1
 1152 06e0 1046     		mov	r0, r2
 1153 06e2 1946     		mov	r1, r3
 1154              		.loc 1 324 18
 1155 06e4 4FF00002 		mov	r2, #0
 1156 06e8 434B     		ldr	r3, .L27+16
 1157 06ea FFF7FEFF 		bl	__aeabi_dmul
 1158 06ee 0246     		mov	r2, r0
 1159 06f0 0B46     		mov	r3, r1
 1160 06f2 C7E91823 		strd	r2, [r7, #96]
 325:Core/Src/main.c ****           
 326:Core/Src/main.c ****           /* Store results */
 327:Core/Src/main.c ****           g_fixed_checksum[scale_idx][size_index] = result_checksum;
 1161              		.loc 1 327 51
 1162 06f6 4149     		ldr	r1, .L27+20
 1163 06f8 D7F89020 		ldr	r2, [r7, #144]
 1164 06fc 1346     		mov	r3, r2
 1165 06fe 9B00     		lsls	r3, r3, #2
 1166 0700 1344     		add	r3, r3, r2
 1167 0702 D7F88C20 		ldr	r2, [r7, #140]
 1168 0706 1344     		add	r3, r3, r2
 1169 0708 3A6F     		ldr	r2, [r7, #112]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 28


 1170 070a 41F82320 		str	r2, [r1, r3, lsl #2]
 328:Core/Src/main.c ****           g_fixed_execution_time_ms[scale_idx][size_index] = elapsed_ms;
 1171              		.loc 1 328 60
 1172 070e 3C49     		ldr	r1, .L27+24
 1173 0710 D7F89020 		ldr	r2, [r7, #144]
 1174 0714 1346     		mov	r3, r2
 1175 0716 9B00     		lsls	r3, r3, #2
 1176 0718 1344     		add	r3, r3, r2
 1177 071a D7F88C20 		ldr	r2, [r7, #140]
 1178 071e 1344     		add	r3, r3, r2
 1179 0720 DB00     		lsls	r3, r3, #3
 1180 0722 1944     		add	r1, r1, r3
 1181 0724 D7E91823 		ldrd	r2, [r7, #96]
 1182 0728 C1E90023 		strd	r2, [r1]
 329:Core/Src/main.c ****           
 330:Core/Src/main.c ****           printf("Resolution %ux%u: %.3f ms, cycles %lu, checksum %lu, overflows %lu\r\n",
 1183              		.loc 1 330 11
 1184 072c B7F87A10 		ldrh	r1, [r7, #122]
 1185 0730 B7F87800 		ldrh	r0, [r7, #120]
 331:Core/Src/main.c ****                  (unsigned)w, (unsigned)h, elapsed_ms, (unsigned long)elapsed_cycles,
 332:Core/Src/main.c ****                  (unsigned long)result_checksum, (unsigned long)g_fixed_overflow_count[scale_idx]);
 1186              		.loc 1 332 87
 1187 0734 334A     		ldr	r2, .L27+28
 1188 0736 D7F89030 		ldr	r3, [r7, #144]
 1189 073a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 330:Core/Src/main.c ****                  (unsigned)w, (unsigned)h, elapsed_ms, (unsigned long)elapsed_cycles,
 1190              		.loc 1 330 11
 1191 073e 0493     		str	r3, [sp, #16]
 1192 0740 3B6F     		ldr	r3, [r7, #112]
 1193 0742 0393     		str	r3, [sp, #12]
 1194 0744 BB6E     		ldr	r3, [r7, #104]
 1195 0746 0293     		str	r3, [sp, #8]
 1196 0748 D7E91823 		ldrd	r2, [r7, #96]
 1197 074c CDE90023 		strd	r2, [sp]
 1198 0750 0246     		mov	r2, r0
 1199 0752 2D48     		ldr	r0, .L27+32
 1200 0754 FFF7FEFF 		bl	printf
 1201              	.LBE15:
 313:Core/Src/main.c ****         {
 1202              		.loc 1 313 69 discriminator 3
 1203 0758 D7F88C30 		ldr	r3, [r7, #140]
 1204 075c 0133     		adds	r3, r3, #1
 1205 075e C7F88C30 		str	r3, [r7, #140]
 1206              	.L14:
 313:Core/Src/main.c ****         {
 1207              		.loc 1 313 50 discriminator 1
 1208 0762 0522     		movs	r2, #5
 1209 0764 D7F88C30 		ldr	r3, [r7, #140]
 1210 0768 9342     		cmp	r3, r2
 1211 076a 83D3     		bcc	.L15
 1212              	.LBE14:
 1213              	.LBE13:
 304:Core/Src/main.c ****       {
 1214              		.loc 1 304 68 discriminator 2
 1215 076c D7F89030 		ldr	r3, [r7, #144]
 1216 0770 0133     		adds	r3, r3, #1
 1217 0772 C7F89030 		str	r3, [r7, #144]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 29


 1218              	.L13:
 304:Core/Src/main.c ****       {
 1219              		.loc 1 304 46 discriminator 1
 1220 0776 0322     		movs	r2, #3
 1221 0778 D7F89030 		ldr	r3, [r7, #144]
 1222 077c 9342     		cmp	r3, r2
 1223 077e FFF435AF 		bcc	.L16
 1224              	.LBE12:
 333:Core/Src/main.c ****         }
 334:Core/Src/main.c ****       }
 335:Core/Src/main.c ****       
 336:Core/Src/main.c ****       /* Print analysis summary */
 337:Core/Src/main.c ****       printf("\r\n=== Fixed-Point Analysis Summary ===\r\n");
 1225              		.loc 1 337 7
 1226 0782 2248     		ldr	r0, .L27+36
 1227 0784 FFF7FEFF 		bl	puts
 1228              	.LBB16:
 338:Core/Src/main.c ****       for (uint32_t scale_idx = 0; scale_idx < kNumScalingFactors; ++scale_idx)
 1229              		.loc 1 338 21
 1230 0788 0023     		movs	r3, #0
 1231 078a C7F88830 		str	r3, [r7, #136]
 1232              		.loc 1 338 7
 1233 078e 12E0     		b	.L17
 1234              	.L18:
 339:Core/Src/main.c ****       {
 340:Core/Src/main.c ****         printf("Scaling Factor %s: Total overflows = %lu\r\n", 
 1235              		.loc 1 340 9
 1236 0790 1F4A     		ldr	r2, .L27+40
 1237 0792 D7F88830 		ldr	r3, [r7, #136]
 1238 0796 52F82310 		ldr	r1, [r2, r3, lsl #2]
 341:Core/Src/main.c ****                kScalingFactorNames[scale_idx], (unsigned long)g_fixed_overflow_count[scale_idx]);
 1239              		.loc 1 341 85
 1240 079a 1A4A     		ldr	r2, .L27+28
 1241 079c D7F88830 		ldr	r3, [r7, #136]
 1242 07a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 340:Core/Src/main.c ****                kScalingFactorNames[scale_idx], (unsigned long)g_fixed_overflow_count[scale_idx]);
 1243              		.loc 1 340 9
 1244 07a4 1A46     		mov	r2, r3
 1245 07a6 1B48     		ldr	r0, .L27+44
 1246 07a8 FFF7FEFF 		bl	printf
 338:Core/Src/main.c ****       {
 1247              		.loc 1 338 68 discriminator 3
 1248 07ac D7F88830 		ldr	r3, [r7, #136]
 1249 07b0 0133     		adds	r3, r3, #1
 1250 07b2 C7F88830 		str	r3, [r7, #136]
 1251              	.L17:
 338:Core/Src/main.c ****       {
 1252              		.loc 1 338 46 discriminator 1
 1253 07b6 0322     		movs	r2, #3
 1254 07b8 D7F88830 		ldr	r3, [r7, #136]
 1255 07bc 9342     		cmp	r3, r2
 1256 07be E7D3     		bcc	.L18
 1257              	.LBE16:
 342:Core/Src/main.c ****       }
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****       /* Task 8: Power Measurement Analysis */
 345:Core/Src/main.c ****       analyze_power_consumption_f4();
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 30


 1258              		.loc 1 345 7
 1259 07c0 FFF7FEFF 		bl	analyze_power_consumption_f4
 346:Core/Src/main.c ****       extrapolate_power_consumption_f4();
 1260              		.loc 1 346 7
 1261 07c4 FFF7FEFF 		bl	extrapolate_power_consumption_f4
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****       /* Visual indicator: LED1 ON, keep ON 2s, then turn both OFF */
 349:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 1262              		.loc 1 349 7
 1263 07c8 0122     		movs	r2, #1
 1264 07ca 0221     		movs	r1, #2
 1265 07cc 1248     		ldr	r0, .L27+48
 1266 07ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 350:Core/Src/main.c ****       HAL_Delay(2000);
 1267              		.loc 1 350 7
 1268 07d2 4FF4FA60 		mov	r0, #2000
 1269 07d6 FFF7FEFF 		bl	HAL_Delay
 351:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 1270              		.loc 1 351 7
 1271 07da 0022     		movs	r2, #0
 1272 07dc 0321     		movs	r1, #3
 1273 07de 0E48     		ldr	r0, .L27+48
 1274 07e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1275              	.LBE4:
 184:Core/Src/main.c ****     /* USER CODE END WHILE */
 1276              		.loc 1 184 3
 1277 07e4 20E4     		b	.L19
 1278              	.L28:
 1279 07e6 00BF     		.align	2
 1280              	.L27:
 1281 07e8 00000000 		.word	kWidths
 1282 07ec 00000000 		.word	kHeights
 1283 07f0 001000E0 		.word	-536866816
 1284 07f4 00000000 		.word	SystemCoreClock
 1285 07f8 00408F40 		.word	1083129856
 1286 07fc 00000000 		.word	g_fixed_checksum
 1287 0800 00000000 		.word	g_fixed_execution_time_ms
 1288 0804 00000000 		.word	g_fixed_overflow_count
 1289 0808 60010000 		.word	.LC12
 1290 080c A8010000 		.word	.LC13
 1291 0810 00000000 		.word	kScalingFactorNames
 1292 0814 D0010000 		.word	.LC14
 1293 0818 00040240 		.word	1073873920
 1294              		.cfi_endproc
 1295              	.LFE137:
 1297              		.section	.text.SystemClock_Config,"ax",%progbits
 1298              		.align	1
 1299              		.global	SystemClock_Config
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1304              	SystemClock_Config:
 1305              	.LFB138:
 352:Core/Src/main.c ****   }
 353:Core/Src/main.c ****   /* USER CODE END 3 */
 354:Core/Src/main.c **** }
 355:Core/Src/main.c **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 31


 356:Core/Src/main.c **** /**
 357:Core/Src/main.c ****   * @brief System Clock Configuration
 358:Core/Src/main.c ****   * @retval None
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c **** void SystemClock_Config(void)
 361:Core/Src/main.c **** {
 1306              		.loc 1 361 1
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 80
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310 0000 80B5     		push	{r7, lr}
 1311              	.LCFI3:
 1312              		.cfi_def_cfa_offset 8
 1313              		.cfi_offset 7, -8
 1314              		.cfi_offset 14, -4
 1315 0002 94B0     		sub	sp, sp, #80
 1316              	.LCFI4:
 1317              		.cfi_def_cfa_offset 88
 1318 0004 00AF     		add	r7, sp, #0
 1319              	.LCFI5:
 1320              		.cfi_def_cfa_register 7
 362:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1321              		.loc 1 362 22
 1322 0006 07F11C03 		add	r3, r7, #28
 1323 000a 3422     		movs	r2, #52
 1324 000c 0021     		movs	r1, #0
 1325 000e 1846     		mov	r0, r3
 1326 0010 FFF7FEFF 		bl	memset
 363:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1327              		.loc 1 363 22
 1328 0014 07F10803 		add	r3, r7, #8
 1329 0018 0022     		movs	r2, #0
 1330 001a 1A60     		str	r2, [r3]
 1331 001c 5A60     		str	r2, [r3, #4]
 1332 001e 9A60     		str	r2, [r3, #8]
 1333 0020 DA60     		str	r2, [r3, #12]
 1334 0022 1A61     		str	r2, [r3, #16]
 1335              	.LBB17:
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 366:Core/Src/main.c ****   */
 367:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 1336              		.loc 1 367 3
 1337 0024 0023     		movs	r3, #0
 1338 0026 7B60     		str	r3, [r7, #4]
 1339 0028 2A4B     		ldr	r3, .L33
 1340 002a 1B6C     		ldr	r3, [r3, #64]
 1341 002c 294A     		ldr	r2, .L33
 1342 002e 43F08053 		orr	r3, r3, #268435456
 1343 0032 1364     		str	r3, [r2, #64]
 1344 0034 274B     		ldr	r3, .L33
 1345 0036 1B6C     		ldr	r3, [r3, #64]
 1346 0038 03F08053 		and	r3, r3, #268435456
 1347 003c 7B60     		str	r3, [r7, #4]
 1348 003e 7B68     		ldr	r3, [r7, #4]
 1349              	.LBE17:
 1350              	.LBB18:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 32


 368:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1351              		.loc 1 368 3
 1352 0040 0023     		movs	r3, #0
 1353 0042 3B60     		str	r3, [r7]
 1354 0044 244B     		ldr	r3, .L33+4
 1355 0046 1B68     		ldr	r3, [r3]
 1356 0048 23F44043 		bic	r3, r3, #49152
 1357 004c 224A     		ldr	r2, .L33+4
 1358 004e 43F48043 		orr	r3, r3, #16384
 1359 0052 1360     		str	r3, [r2]
 1360 0054 204B     		ldr	r3, .L33+4
 1361 0056 1B68     		ldr	r3, [r3]
 1362 0058 03F44043 		and	r3, r3, #49152
 1363 005c 3B60     		str	r3, [r7]
 1364 005e 3B68     		ldr	r3, [r7]
 1365              	.LBE18:
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 371:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 372:Core/Src/main.c ****   */
 373:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 1366              		.loc 1 373 36
 1367 0060 0123     		movs	r3, #1
 1368 0062 FB61     		str	r3, [r7, #28]
 374:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1369              		.loc 1 374 30
 1370 0064 4FF48033 		mov	r3, #65536
 1371 0068 3B62     		str	r3, [r7, #32]
 375:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1372              		.loc 1 375 34
 1373 006a 0223     		movs	r3, #2
 1374 006c 7B63     		str	r3, [r7, #52]
 376:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1375              		.loc 1 376 35
 1376 006e 4FF48003 		mov	r3, #4194304
 1377 0072 BB63     		str	r3, [r7, #56]
 377:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1378              		.loc 1 377 30
 1379 0074 0F23     		movs	r3, #15
 1380 0076 FB63     		str	r3, [r7, #60]
 378:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1381              		.loc 1 378 30
 1382 0078 9023     		movs	r3, #144
 1383 007a 3B64     		str	r3, [r7, #64]
 379:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1384              		.loc 1 379 30
 1385 007c 0223     		movs	r3, #2
 1386 007e 7B64     		str	r3, [r7, #68]
 380:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1387              		.loc 1 380 30
 1388 0080 0223     		movs	r3, #2
 1389 0082 BB64     		str	r3, [r7, #72]
 381:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1390              		.loc 1 381 30
 1391 0084 0223     		movs	r3, #2
 1392 0086 FB64     		str	r3, [r7, #76]
 382:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 33


 1393              		.loc 1 382 7
 1394 0088 07F11C03 		add	r3, r7, #28
 1395 008c 1846     		mov	r0, r3
 1396 008e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1397 0092 0346     		mov	r3, r0
 1398              		.loc 1 382 6 discriminator 1
 1399 0094 002B     		cmp	r3, #0
 1400 0096 01D0     		beq	.L30
 383:Core/Src/main.c ****   {
 384:Core/Src/main.c ****     Error_Handler();
 1401              		.loc 1 384 5
 1402 0098 FFF7FEFF 		bl	Error_Handler
 1403              	.L30:
 385:Core/Src/main.c ****   }
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 388:Core/Src/main.c ****   */
 389:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 1404              		.loc 1 389 31
 1405 009c 0F23     		movs	r3, #15
 1406 009e BB60     		str	r3, [r7, #8]
 390:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 391:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1407              		.loc 1 391 34
 1408 00a0 0223     		movs	r3, #2
 1409 00a2 FB60     		str	r3, [r7, #12]
 392:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1410              		.loc 1 392 35
 1411 00a4 0023     		movs	r3, #0
 1412 00a6 3B61     		str	r3, [r7, #16]
 393:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1413              		.loc 1 393 36
 1414 00a8 4FF4A053 		mov	r3, #5120
 1415 00ac 7B61     		str	r3, [r7, #20]
 394:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1416              		.loc 1 394 36
 1417 00ae 4FF48053 		mov	r3, #4096
 1418 00b2 BB61     		str	r3, [r7, #24]
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 1419              		.loc 1 396 7
 1420 00b4 07F10803 		add	r3, r7, #8
 1421 00b8 0321     		movs	r1, #3
 1422 00ba 1846     		mov	r0, r3
 1423 00bc FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1424 00c0 0346     		mov	r3, r0
 1425              		.loc 1 396 6 discriminator 1
 1426 00c2 002B     		cmp	r3, #0
 1427 00c4 01D0     		beq	.L32
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****     Error_Handler();
 1428              		.loc 1 398 5
 1429 00c6 FFF7FEFF 		bl	Error_Handler
 1430              	.L32:
 399:Core/Src/main.c ****   }
 400:Core/Src/main.c **** }
 1431              		.loc 1 400 1
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 34


 1432 00ca 00BF     		nop
 1433 00cc 5037     		adds	r7, r7, #80
 1434              	.LCFI6:
 1435              		.cfi_def_cfa_offset 8
 1436 00ce BD46     		mov	sp, r7
 1437              	.LCFI7:
 1438              		.cfi_def_cfa_register 13
 1439              		@ sp needed
 1440 00d0 80BD     		pop	{r7, pc}
 1441              	.L34:
 1442 00d2 00BF     		.align	2
 1443              	.L33:
 1444 00d4 00380240 		.word	1073887232
 1445 00d8 00700040 		.word	1073770496
 1446              		.cfi_endproc
 1447              	.LFE138:
 1449              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1450              		.align	1
 1451              		.syntax unified
 1452              		.thumb
 1453              		.thumb_func
 1455              	MX_GPIO_Init:
 1456              	.LFB139:
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** /**
 403:Core/Src/main.c ****   * @brief GPIO Initialization Function
 404:Core/Src/main.c ****   * @param None
 405:Core/Src/main.c ****   * @retval None
 406:Core/Src/main.c ****   */
 407:Core/Src/main.c **** static void MX_GPIO_Init(void)
 408:Core/Src/main.c **** {
 1457              		.loc 1 408 1
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 32
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0000 80B5     		push	{r7, lr}
 1462              	.LCFI8:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 88B0     		sub	sp, sp, #32
 1467              	.LCFI9:
 1468              		.cfi_def_cfa_offset 40
 1469 0004 00AF     		add	r7, sp, #0
 1470              	.LCFI10:
 1471              		.cfi_def_cfa_register 7
 409:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1472              		.loc 1 409 20
 1473 0006 07F10C03 		add	r3, r7, #12
 1474 000a 0022     		movs	r2, #0
 1475 000c 1A60     		str	r2, [r3]
 1476 000e 5A60     		str	r2, [r3, #4]
 1477 0010 9A60     		str	r2, [r3, #8]
 1478 0012 DA60     		str	r2, [r3, #12]
 1479 0014 1A61     		str	r2, [r3, #16]
 1480              	.LBB19:
 410:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 35


 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 415:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1481              		.loc 1 415 3
 1482 0016 0023     		movs	r3, #0
 1483 0018 BB60     		str	r3, [r7, #8]
 1484 001a 1F4B     		ldr	r3, .L36
 1485 001c 1B6B     		ldr	r3, [r3, #48]
 1486 001e 1E4A     		ldr	r2, .L36
 1487 0020 43F00403 		orr	r3, r3, #4
 1488 0024 1363     		str	r3, [r2, #48]
 1489 0026 1C4B     		ldr	r3, .L36
 1490 0028 1B6B     		ldr	r3, [r3, #48]
 1491 002a 03F00403 		and	r3, r3, #4
 1492 002e BB60     		str	r3, [r7, #8]
 1493 0030 BB68     		ldr	r3, [r7, #8]
 1494              	.LBE19:
 1495              	.LBB20:
 416:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1496              		.loc 1 416 3
 1497 0032 0023     		movs	r3, #0
 1498 0034 7B60     		str	r3, [r7, #4]
 1499 0036 184B     		ldr	r3, .L36
 1500 0038 1B6B     		ldr	r3, [r3, #48]
 1501 003a 174A     		ldr	r2, .L36
 1502 003c 43F08003 		orr	r3, r3, #128
 1503 0040 1363     		str	r3, [r2, #48]
 1504 0042 154B     		ldr	r3, .L36
 1505 0044 1B6B     		ldr	r3, [r3, #48]
 1506 0046 03F08003 		and	r3, r3, #128
 1507 004a 7B60     		str	r3, [r7, #4]
 1508 004c 7B68     		ldr	r3, [r7, #4]
 1509              	.LBE20:
 1510              	.LBB21:
 417:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1511              		.loc 1 417 3
 1512 004e 0023     		movs	r3, #0
 1513 0050 3B60     		str	r3, [r7]
 1514 0052 114B     		ldr	r3, .L36
 1515 0054 1B6B     		ldr	r3, [r3, #48]
 1516 0056 104A     		ldr	r2, .L36
 1517 0058 43F00203 		orr	r3, r3, #2
 1518 005c 1363     		str	r3, [r2, #48]
 1519 005e 0E4B     		ldr	r3, .L36
 1520 0060 1B6B     		ldr	r3, [r3, #48]
 1521 0062 03F00203 		and	r3, r3, #2
 1522 0066 3B60     		str	r3, [r7]
 1523 0068 3B68     		ldr	r3, [r7]
 1524              	.LBE21:
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 420:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 1525              		.loc 1 420 3
 1526 006a 0022     		movs	r2, #0
 1527 006c FF21     		movs	r1, #255
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 36


 1528 006e 0B48     		ldr	r0, .L36+4
 1529 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 421:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 424:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 425:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 1530              		.loc 1 425 23
 1531 0074 FF23     		movs	r3, #255
 1532 0076 FB60     		str	r3, [r7, #12]
 426:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 427:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1533              		.loc 1 427 24
 1534 0078 0123     		movs	r3, #1
 1535 007a 3B61     		str	r3, [r7, #16]
 428:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1536              		.loc 1 428 24
 1537 007c 0023     		movs	r3, #0
 1538 007e 7B61     		str	r3, [r7, #20]
 429:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1539              		.loc 1 429 25
 1540 0080 0023     		movs	r3, #0
 1541 0082 BB61     		str	r3, [r7, #24]
 430:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1542              		.loc 1 430 3
 1543 0084 07F10C03 		add	r3, r7, #12
 1544 0088 1946     		mov	r1, r3
 1545 008a 0448     		ldr	r0, .L36+4
 1546 008c FFF7FEFF 		bl	HAL_GPIO_Init
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 435:Core/Src/main.c **** }
 1547              		.loc 1 435 1
 1548 0090 00BF     		nop
 1549 0092 2037     		adds	r7, r7, #32
 1550              	.LCFI11:
 1551              		.cfi_def_cfa_offset 8
 1552 0094 BD46     		mov	sp, r7
 1553              	.LCFI12:
 1554              		.cfi_def_cfa_register 13
 1555              		@ sp needed
 1556 0096 80BD     		pop	{r7, pc}
 1557              	.L37:
 1558              		.align	2
 1559              	.L36:
 1560 0098 00380240 		.word	1073887232
 1561 009c 00040240 		.word	1073873920
 1562              		.cfi_endproc
 1563              	.LFE139:
 1565              		.section	.text.generate_mandelbrot_checksum_float,"ax",%progbits
 1566              		.align	1
 1567              		.syntax unified
 1568              		.thumb
 1569              		.thumb_func
 1571              	generate_mandelbrot_checksum_float:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 37


 1572              	.LFB140:
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 438:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 439:Core/Src/main.c **** 
 440:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_float(uint16_t width, uint16_t height, uint32_t max_it
 441:Core/Src/main.c **** {
 1573              		.loc 1 441 1
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 40
 1576              		@ frame_needed = 1, uses_anonymous_args = 0
 1577              		@ link register save eliminated.
 1578 0000 80B4     		push	{r7}
 1579              	.LCFI13:
 1580              		.cfi_def_cfa_offset 4
 1581              		.cfi_offset 7, -4
 1582 0002 8BB0     		sub	sp, sp, #44
 1583              	.LCFI14:
 1584              		.cfi_def_cfa_offset 48
 1585 0004 00AF     		add	r7, sp, #0
 1586              	.LCFI15:
 1587              		.cfi_def_cfa_register 7
 1588 0006 0346     		mov	r3, r0
 1589 0008 3A60     		str	r2, [r7]
 1590 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1591 000c 0B46     		mov	r3, r1	@ movhi
 1592 000e BB80     		strh	r3, [r7, #4]	@ movhi
 442:Core/Src/main.c **** 	uint32_t mandelbrot_sum = 0u;
 1593              		.loc 1 442 11
 1594 0010 0023     		movs	r3, #0
 1595 0012 7B62     		str	r3, [r7, #36]
 1596              	.LBB22:
 443:Core/Src/main.c **** 	for (uint16_t y = 0; y < height; ++y)
 1597              		.loc 1 443 16
 1598 0014 0023     		movs	r3, #0
 1599 0016 7B84     		strh	r3, [r7, #34]	@ movhi
 1600              		.loc 1 443 2
 1601 0018 7BE0     		b	.L39
 1602              	.L45:
 1603              	.LBB23:
 444:Core/Src/main.c **** 	{
 445:Core/Src/main.c **** 		float y0 = ((float)y / (float)height) * 2.0f - 1.0f;
 1604              		.loc 1 445 15
 1605 001a 7B8C     		ldrh	r3, [r7, #34]
 1606 001c 07EE903A 		vmov	s15, r3	@ int
 1607 0020 F8EE676A 		vcvt.f32.u32	s13, s15
 1608              		.loc 1 445 26
 1609 0024 BB88     		ldrh	r3, [r7, #4]
 1610 0026 07EE903A 		vmov	s15, r3	@ int
 1611 002a B8EE677A 		vcvt.f32.u32	s14, s15
 1612              		.loc 1 445 24
 1613 002e C6EE877A 		vdiv.f32	s15, s13, s14
 1614              		.loc 1 445 41
 1615 0032 77EEA77A 		vadd.f32	s15, s15, s15
 1616              		.loc 1 445 9
 1617 0036 B7EE007A 		vmov.f32	s14, #1.0e+0
 1618 003a 77EEC77A 		vsub.f32	s15, s15, s14
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 38


 1619 003e C7ED047A 		vstr.32	s15, [r7, #16]
 1620              	.LBB24:
 446:Core/Src/main.c **** 		for (uint16_t x = 0; x < width; ++x)
 1621              		.loc 1 446 17
 1622 0042 0023     		movs	r3, #0
 1623 0044 3B84     		strh	r3, [r7, #32]	@ movhi
 1624              		.loc 1 446 3
 1625 0046 5DE0     		b	.L40
 1626              	.L44:
 1627              	.LBB25:
 447:Core/Src/main.c **** 		{
 448:Core/Src/main.c **** 			float x0 = ((float)x / (float)width) * 3.5f - 2.5f;
 1628              		.loc 1 448 16
 1629 0048 3B8C     		ldrh	r3, [r7, #32]
 1630 004a 07EE903A 		vmov	s15, r3	@ int
 1631 004e F8EE676A 		vcvt.f32.u32	s13, s15
 1632              		.loc 1 448 27
 1633 0052 FB88     		ldrh	r3, [r7, #6]
 1634 0054 07EE903A 		vmov	s15, r3	@ int
 1635 0058 B8EE677A 		vcvt.f32.u32	s14, s15
 1636              		.loc 1 448 25
 1637 005c C6EE877A 		vdiv.f32	s15, s13, s14
 1638              		.loc 1 448 41
 1639 0060 B0EE0C7A 		vmov.f32	s14, #3.5e+0
 1640 0064 67EE877A 		vmul.f32	s15, s15, s14
 1641              		.loc 1 448 10
 1642 0068 B0EE047A 		vmov.f32	s14, #2.5e+0
 1643 006c 77EEC77A 		vsub.f32	s15, s15, s14
 1644 0070 C7ED037A 		vstr.32	s15, [r7, #12]
 449:Core/Src/main.c **** 			float xi = 0.0f;
 1645              		.loc 1 449 10
 1646 0074 4FF00003 		mov	r3, #0
 1647 0078 FB61     		str	r3, [r7, #28]	@ float
 450:Core/Src/main.c **** 			float yi = 0.0f;
 1648              		.loc 1 450 10
 1649 007a 4FF00003 		mov	r3, #0
 1650 007e BB61     		str	r3, [r7, #24]	@ float
 451:Core/Src/main.c **** 			uint32_t iteration = 0u;
 1651              		.loc 1 451 13
 1652 0080 0023     		movs	r3, #0
 1653 0082 7B61     		str	r3, [r7, #20]
 452:Core/Src/main.c **** 			while (iteration < max_iter && (xi*xi + yi*yi) <= 4.0f)
 1654              		.loc 1 452 10
 1655 0084 22E0     		b	.L41
 1656              	.L43:
 1657              	.LBB26:
 453:Core/Src/main.c **** 			{
 454:Core/Src/main.c **** 				float tmp = xi*xi - yi*yi + x0;
 1658              		.loc 1 454 19
 1659 0086 D7ED077A 		vldr.32	s15, [r7, #28]
 1660 008a 27EEA77A 		vmul.f32	s14, s15, s15
 1661              		.loc 1 454 27
 1662 008e D7ED067A 		vldr.32	s15, [r7, #24]
 1663 0092 67EEA77A 		vmul.f32	s15, s15, s15
 1664              		.loc 1 454 23
 1665 0096 77EE677A 		vsub.f32	s15, s14, s15
 1666              		.loc 1 454 11
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 39


 1667 009a 97ED037A 		vldr.32	s14, [r7, #12]
 1668 009e 77EE277A 		vadd.f32	s15, s14, s15
 1669 00a2 C7ED027A 		vstr.32	s15, [r7, #8]
 455:Core/Src/main.c **** 				yi = 2.0f*xi*yi + y0;
 1670              		.loc 1 455 14
 1671 00a6 D7ED077A 		vldr.32	s15, [r7, #28]
 1672 00aa 37EEA77A 		vadd.f32	s14, s15, s15
 1673              		.loc 1 455 17
 1674 00ae D7ED067A 		vldr.32	s15, [r7, #24]
 1675 00b2 67EE277A 		vmul.f32	s15, s14, s15
 1676              		.loc 1 455 8
 1677 00b6 97ED047A 		vldr.32	s14, [r7, #16]
 1678 00ba 77EE277A 		vadd.f32	s15, s14, s15
 1679 00be C7ED067A 		vstr.32	s15, [r7, #24]
 456:Core/Src/main.c **** 				xi = tmp;
 1680              		.loc 1 456 8
 1681 00c2 BB68     		ldr	r3, [r7, #8]	@ float
 1682 00c4 FB61     		str	r3, [r7, #28]	@ float
 457:Core/Src/main.c **** 				++iteration;
 1683              		.loc 1 457 5
 1684 00c6 7B69     		ldr	r3, [r7, #20]
 1685 00c8 0133     		adds	r3, r3, #1
 1686 00ca 7B61     		str	r3, [r7, #20]
 1687              	.L41:
 1688              	.LBE26:
 452:Core/Src/main.c **** 			{
 1689              		.loc 1 452 32
 1690 00cc 7A69     		ldr	r2, [r7, #20]
 1691 00ce 3B68     		ldr	r3, [r7]
 1692 00d0 9A42     		cmp	r2, r3
 1693 00d2 10D2     		bcs	.L42
 452:Core/Src/main.c **** 			{
 1694              		.loc 1 452 38 discriminator 1
 1695 00d4 D7ED077A 		vldr.32	s15, [r7, #28]
 1696 00d8 27EEA77A 		vmul.f32	s14, s15, s15
 452:Core/Src/main.c **** 			{
 1697              		.loc 1 452 46 discriminator 1
 1698 00dc D7ED067A 		vldr.32	s15, [r7, #24]
 1699 00e0 67EEA77A 		vmul.f32	s15, s15, s15
 452:Core/Src/main.c **** 			{
 1700              		.loc 1 452 42 discriminator 1
 1701 00e4 77EE277A 		vadd.f32	s15, s14, s15
 452:Core/Src/main.c **** 			{
 1702              		.loc 1 452 32 discriminator 1
 1703 00e8 B1EE007A 		vmov.f32	s14, #4.0e+0
 1704 00ec F4EEC77A 		vcmpe.f32	s15, s14
 1705 00f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1706 00f4 C7D9     		bls	.L43
 1707              	.L42:
 458:Core/Src/main.c **** 			}
 459:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 1708              		.loc 1 459 19
 1709 00f6 7A6A     		ldr	r2, [r7, #36]
 1710 00f8 7B69     		ldr	r3, [r7, #20]
 1711 00fa 1344     		add	r3, r3, r2
 1712 00fc 7B62     		str	r3, [r7, #36]
 1713              	.LBE25:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 40


 446:Core/Src/main.c **** 		{
 1714              		.loc 1 446 35 discriminator 2
 1715 00fe 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 1716 0100 0133     		adds	r3, r3, #1
 1717 0102 3B84     		strh	r3, [r7, #32]	@ movhi
 1718              	.L40:
 446:Core/Src/main.c **** 		{
 1719              		.loc 1 446 26 discriminator 1
 1720 0104 3A8C     		ldrh	r2, [r7, #32]
 1721 0106 FB88     		ldrh	r3, [r7, #6]
 1722 0108 9A42     		cmp	r2, r3
 1723 010a 9DD3     		bcc	.L44
 1724              	.LBE24:
 1725              	.LBE23:
 443:Core/Src/main.c **** 	{
 1726              		.loc 1 443 35 discriminator 2
 1727 010c 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 1728 010e 0133     		adds	r3, r3, #1
 1729 0110 7B84     		strh	r3, [r7, #34]	@ movhi
 1730              	.L39:
 443:Core/Src/main.c **** 	{
 1731              		.loc 1 443 25 discriminator 1
 1732 0112 7A8C     		ldrh	r2, [r7, #34]
 1733 0114 BB88     		ldrh	r3, [r7, #4]
 1734 0116 9A42     		cmp	r2, r3
 1735 0118 FFF47FAF 		bcc	.L45
 1736              	.LBE22:
 460:Core/Src/main.c **** 		}
 461:Core/Src/main.c **** 	}
 462:Core/Src/main.c **** 	return mandelbrot_sum;
 1737              		.loc 1 462 9
 1738 011c 7B6A     		ldr	r3, [r7, #36]
 463:Core/Src/main.c **** }
 1739              		.loc 1 463 1
 1740 011e 1846     		mov	r0, r3
 1741 0120 2C37     		adds	r7, r7, #44
 1742              	.LCFI16:
 1743              		.cfi_def_cfa_offset 4
 1744 0122 BD46     		mov	sp, r7
 1745              	.LCFI17:
 1746              		.cfi_def_cfa_register 13
 1747              		@ sp needed
 1748 0124 5DF8047B 		ldr	r7, [sp], #4
 1749              	.LCFI18:
 1750              		.cfi_restore 7
 1751              		.cfi_def_cfa_offset 0
 1752 0128 7047     		bx	lr
 1753              		.cfi_endproc
 1754              	.LFE140:
 1756              		.global	__aeabi_dcmple
 1757              		.section	.text.generate_mandelbrot_checksum_double,"ax",%progbits
 1758              		.align	1
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
 1763              	generate_mandelbrot_checksum_double:
 1764              	.LFB141:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 41


 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_double(uint16_t width, uint16_t height, uint32_t max_i
 466:Core/Src/main.c **** {
 1765              		.loc 1 466 1
 1766              		.cfi_startproc
 1767              		@ args = 0, pretend = 0, frame = 64
 1768              		@ frame_needed = 1, uses_anonymous_args = 0
 1769 0000 B0B5     		push	{r4, r5, r7, lr}
 1770              	.LCFI19:
 1771              		.cfi_def_cfa_offset 16
 1772              		.cfi_offset 4, -16
 1773              		.cfi_offset 5, -12
 1774              		.cfi_offset 7, -8
 1775              		.cfi_offset 14, -4
 1776 0002 90B0     		sub	sp, sp, #64
 1777              	.LCFI20:
 1778              		.cfi_def_cfa_offset 80
 1779 0004 00AF     		add	r7, sp, #0
 1780              	.LCFI21:
 1781              		.cfi_def_cfa_register 7
 1782 0006 0346     		mov	r3, r0
 1783 0008 3A60     		str	r2, [r7]
 1784 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1785 000c 0B46     		mov	r3, r1	@ movhi
 1786 000e BB80     		strh	r3, [r7, #4]	@ movhi
 467:Core/Src/main.c **** 	uint32_t mandelbrot_sum = 0u;
 1787              		.loc 1 467 11
 1788 0010 0023     		movs	r3, #0
 1789 0012 FB63     		str	r3, [r7, #60]
 1790              	.LBB27:
 468:Core/Src/main.c **** 	for (uint16_t y = 0; y < height; ++y)
 1791              		.loc 1 468 16
 1792 0014 0023     		movs	r3, #0
 1793 0016 7B87     		strh	r3, [r7, #58]	@ movhi
 1794              		.loc 1 468 2
 1795 0018 D0E0     		b	.L48
 1796              	.L54:
 1797              	.LBB28:
 469:Core/Src/main.c **** 	{
 470:Core/Src/main.c **** 		double y0 = ((double)y / (double)height) * 2.0 - 1.0;
 1798              		.loc 1 470 16
 1799 001a 7B8F     		ldrh	r3, [r7, #58]
 1800 001c 1846     		mov	r0, r3
 1801 001e FFF7FEFF 		bl	__aeabi_ui2d
 1802 0022 0446     		mov	r4, r0
 1803 0024 0D46     		mov	r5, r1
 1804              		.loc 1 470 28
 1805 0026 BB88     		ldrh	r3, [r7, #4]
 1806 0028 1846     		mov	r0, r3
 1807 002a FFF7FEFF 		bl	__aeabi_ui2d
 1808 002e 0246     		mov	r2, r0
 1809 0030 0B46     		mov	r3, r1
 1810              		.loc 1 470 26
 1811 0032 2046     		mov	r0, r4
 1812 0034 2946     		mov	r1, r5
 1813 0036 FFF7FEFF 		bl	__aeabi_ddiv
 1814 003a 0246     		mov	r2, r0
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 42


 1815 003c 0B46     		mov	r3, r1
 1816 003e 1046     		mov	r0, r2
 1817 0040 1946     		mov	r1, r3
 1818              		.loc 1 470 44
 1819 0042 0246     		mov	r2, r0
 1820 0044 0B46     		mov	r3, r1
 1821 0046 FFF7FEFF 		bl	__aeabi_dadd
 1822 004a 0246     		mov	r2, r0
 1823 004c 0B46     		mov	r3, r1
 1824 004e 1046     		mov	r0, r2
 1825 0050 1946     		mov	r1, r3
 1826              		.loc 1 470 10
 1827 0052 4FF00002 		mov	r2, #0
 1828 0056 5E4B     		ldr	r3, .L56
 1829 0058 FFF7FEFF 		bl	__aeabi_dsub
 1830 005c 0246     		mov	r2, r0
 1831 005e 0B46     		mov	r3, r1
 1832 0060 C7E90623 		strd	r2, [r7, #24]
 1833              	.LBB29:
 471:Core/Src/main.c **** 		for (uint16_t x = 0; x < width; ++x)
 1834              		.loc 1 471 17
 1835 0064 0023     		movs	r3, #0
 1836 0066 3B87     		strh	r3, [r7, #56]	@ movhi
 1837              		.loc 1 471 3
 1838 0068 A0E0     		b	.L49
 1839              	.L53:
 1840              	.LBB30:
 472:Core/Src/main.c **** 		{
 473:Core/Src/main.c **** 			double x0 = ((double)x / (double)width) * 3.5 - 2.5;
 1841              		.loc 1 473 17
 1842 006a 3B8F     		ldrh	r3, [r7, #56]
 1843 006c 1846     		mov	r0, r3
 1844 006e FFF7FEFF 		bl	__aeabi_ui2d
 1845 0072 0446     		mov	r4, r0
 1846 0074 0D46     		mov	r5, r1
 1847              		.loc 1 473 29
 1848 0076 FB88     		ldrh	r3, [r7, #6]
 1849 0078 1846     		mov	r0, r3
 1850 007a FFF7FEFF 		bl	__aeabi_ui2d
 1851 007e 0246     		mov	r2, r0
 1852 0080 0B46     		mov	r3, r1
 1853              		.loc 1 473 27
 1854 0082 2046     		mov	r0, r4
 1855 0084 2946     		mov	r1, r5
 1856 0086 FFF7FEFF 		bl	__aeabi_ddiv
 1857 008a 0246     		mov	r2, r0
 1858 008c 0B46     		mov	r3, r1
 1859 008e 1046     		mov	r0, r2
 1860 0090 1946     		mov	r1, r3
 1861              		.loc 1 473 44
 1862 0092 4FF00002 		mov	r2, #0
 1863 0096 4F4B     		ldr	r3, .L56+4
 1864 0098 FFF7FEFF 		bl	__aeabi_dmul
 1865 009c 0246     		mov	r2, r0
 1866 009e 0B46     		mov	r3, r1
 1867 00a0 1046     		mov	r0, r2
 1868 00a2 1946     		mov	r1, r3
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 43


 1869              		.loc 1 473 11
 1870 00a4 4FF00002 		mov	r2, #0
 1871 00a8 4B4B     		ldr	r3, .L56+8
 1872 00aa FFF7FEFF 		bl	__aeabi_dsub
 1873 00ae 0246     		mov	r2, r0
 1874 00b0 0B46     		mov	r3, r1
 1875 00b2 C7E90423 		strd	r2, [r7, #16]
 474:Core/Src/main.c **** 			double xi = 0.0;
 1876              		.loc 1 474 11
 1877 00b6 4FF00002 		mov	r2, #0
 1878 00ba 4FF00003 		mov	r3, #0
 1879 00be C7E90C23 		strd	r2, [r7, #48]
 475:Core/Src/main.c **** 			double yi = 0.0;
 1880              		.loc 1 475 11
 1881 00c2 4FF00002 		mov	r2, #0
 1882 00c6 4FF00003 		mov	r3, #0
 1883 00ca C7E90A23 		strd	r2, [r7, #40]
 476:Core/Src/main.c **** 			uint32_t iteration = 0u;
 1884              		.loc 1 476 13
 1885 00ce 0023     		movs	r3, #0
 1886 00d0 7B62     		str	r3, [r7, #36]
 477:Core/Src/main.c **** 			while (iteration < max_iter && (xi*xi + yi*yi) <= 4.0)
 1887              		.loc 1 477 10
 1888 00d2 3EE0     		b	.L50
 1889              	.L52:
 1890              	.LBB31:
 478:Core/Src/main.c **** 			{
 479:Core/Src/main.c **** 				double tmp = xi*xi - yi*yi + x0;
 1891              		.loc 1 479 20
 1892 00d4 D7E90C23 		ldrd	r2, [r7, #48]
 1893 00d8 D7E90C01 		ldrd	r0, [r7, #48]
 1894 00dc FFF7FEFF 		bl	__aeabi_dmul
 1895 00e0 0246     		mov	r2, r0
 1896 00e2 0B46     		mov	r3, r1
 1897 00e4 1446     		mov	r4, r2
 1898 00e6 1D46     		mov	r5, r3
 1899              		.loc 1 479 28
 1900 00e8 D7E90A23 		ldrd	r2, [r7, #40]
 1901 00ec D7E90A01 		ldrd	r0, [r7, #40]
 1902 00f0 FFF7FEFF 		bl	__aeabi_dmul
 1903 00f4 0246     		mov	r2, r0
 1904 00f6 0B46     		mov	r3, r1
 1905              		.loc 1 479 24
 1906 00f8 2046     		mov	r0, r4
 1907 00fa 2946     		mov	r1, r5
 1908 00fc FFF7FEFF 		bl	__aeabi_dsub
 1909 0100 0246     		mov	r2, r0
 1910 0102 0B46     		mov	r3, r1
 1911              		.loc 1 479 12
 1912 0104 D7E90401 		ldrd	r0, [r7, #16]
 1913 0108 FFF7FEFF 		bl	__aeabi_dadd
 1914 010c 0246     		mov	r2, r0
 1915 010e 0B46     		mov	r3, r1
 1916 0110 C7E90223 		strd	r2, [r7, #8]
 480:Core/Src/main.c **** 				yi = 2.0*xi*yi + y0;
 1917              		.loc 1 480 13
 1918 0114 D7E90C01 		ldrd	r0, [r7, #48]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 44


 1919 0118 0246     		mov	r2, r0
 1920 011a 0B46     		mov	r3, r1
 1921 011c FFF7FEFF 		bl	__aeabi_dadd
 1922 0120 0246     		mov	r2, r0
 1923 0122 0B46     		mov	r3, r1
 1924 0124 1046     		mov	r0, r2
 1925 0126 1946     		mov	r1, r3
 1926              		.loc 1 480 16
 1927 0128 D7E90A23 		ldrd	r2, [r7, #40]
 1928 012c FFF7FEFF 		bl	__aeabi_dmul
 1929 0130 0246     		mov	r2, r0
 1930 0132 0B46     		mov	r3, r1
 1931              		.loc 1 480 8
 1932 0134 D7E90601 		ldrd	r0, [r7, #24]
 1933 0138 FFF7FEFF 		bl	__aeabi_dadd
 1934 013c 0246     		mov	r2, r0
 1935 013e 0B46     		mov	r3, r1
 1936 0140 C7E90A23 		strd	r2, [r7, #40]
 481:Core/Src/main.c **** 				xi = tmp;
 1937              		.loc 1 481 8
 1938 0144 D7E90223 		ldrd	r2, [r7, #8]
 1939 0148 C7E90C23 		strd	r2, [r7, #48]
 482:Core/Src/main.c **** 				++iteration;
 1940              		.loc 1 482 5
 1941 014c 7B6A     		ldr	r3, [r7, #36]
 1942 014e 0133     		adds	r3, r3, #1
 1943 0150 7B62     		str	r3, [r7, #36]
 1944              	.L50:
 1945              	.LBE31:
 477:Core/Src/main.c **** 			{
 1946              		.loc 1 477 32
 1947 0152 7A6A     		ldr	r2, [r7, #36]
 1948 0154 3B68     		ldr	r3, [r7]
 1949 0156 9A42     		cmp	r2, r3
 1950 0158 21D2     		bcs	.L51
 477:Core/Src/main.c **** 			{
 1951              		.loc 1 477 38 discriminator 1
 1952 015a D7E90C23 		ldrd	r2, [r7, #48]
 1953 015e D7E90C01 		ldrd	r0, [r7, #48]
 1954 0162 FFF7FEFF 		bl	__aeabi_dmul
 1955 0166 0246     		mov	r2, r0
 1956 0168 0B46     		mov	r3, r1
 1957 016a 1446     		mov	r4, r2
 1958 016c 1D46     		mov	r5, r3
 477:Core/Src/main.c **** 			{
 1959              		.loc 1 477 46 discriminator 1
 1960 016e D7E90A23 		ldrd	r2, [r7, #40]
 1961 0172 D7E90A01 		ldrd	r0, [r7, #40]
 1962 0176 FFF7FEFF 		bl	__aeabi_dmul
 1963 017a 0246     		mov	r2, r0
 1964 017c 0B46     		mov	r3, r1
 477:Core/Src/main.c **** 			{
 1965              		.loc 1 477 42 discriminator 1
 1966 017e 2046     		mov	r0, r4
 1967 0180 2946     		mov	r1, r5
 1968 0182 FFF7FEFF 		bl	__aeabi_dadd
 1969 0186 0246     		mov	r2, r0
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 45


 1970 0188 0B46     		mov	r3, r1
 1971 018a 1046     		mov	r0, r2
 1972 018c 1946     		mov	r1, r3
 477:Core/Src/main.c **** 			{
 1973              		.loc 1 477 32 discriminator 1
 1974 018e 4FF00002 		mov	r2, #0
 1975 0192 124B     		ldr	r3, .L56+12
 1976 0194 FFF7FEFF 		bl	__aeabi_dcmple
 1977 0198 0346     		mov	r3, r0
 1978 019a 002B     		cmp	r3, #0
 1979 019c 9AD1     		bne	.L52
 1980              	.L51:
 483:Core/Src/main.c **** 			}
 484:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 1981              		.loc 1 484 19
 1982 019e FA6B     		ldr	r2, [r7, #60]
 1983 01a0 7B6A     		ldr	r3, [r7, #36]
 1984 01a2 1344     		add	r3, r3, r2
 1985 01a4 FB63     		str	r3, [r7, #60]
 1986              	.LBE30:
 471:Core/Src/main.c **** 		{
 1987              		.loc 1 471 35 discriminator 2
 1988 01a6 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1989 01a8 0133     		adds	r3, r3, #1
 1990 01aa 3B87     		strh	r3, [r7, #56]	@ movhi
 1991              	.L49:
 471:Core/Src/main.c **** 		{
 1992              		.loc 1 471 26 discriminator 1
 1993 01ac 3A8F     		ldrh	r2, [r7, #56]
 1994 01ae FB88     		ldrh	r3, [r7, #6]
 1995 01b0 9A42     		cmp	r2, r3
 1996 01b2 FFF45AAF 		bcc	.L53
 1997              	.LBE29:
 1998              	.LBE28:
 468:Core/Src/main.c **** 	{
 1999              		.loc 1 468 35 discriminator 2
 2000 01b6 7B8F     		ldrh	r3, [r7, #58]	@ movhi
 2001 01b8 0133     		adds	r3, r3, #1
 2002 01ba 7B87     		strh	r3, [r7, #58]	@ movhi
 2003              	.L48:
 468:Core/Src/main.c **** 	{
 2004              		.loc 1 468 25 discriminator 1
 2005 01bc 7A8F     		ldrh	r2, [r7, #58]
 2006 01be BB88     		ldrh	r3, [r7, #4]
 2007 01c0 9A42     		cmp	r2, r3
 2008 01c2 FFF42AAF 		bcc	.L54
 2009              	.LBE27:
 485:Core/Src/main.c **** 		}
 486:Core/Src/main.c **** 	}
 487:Core/Src/main.c **** 	return mandelbrot_sum;
 2010              		.loc 1 487 9
 2011 01c6 FB6B     		ldr	r3, [r7, #60]
 488:Core/Src/main.c **** }
 2012              		.loc 1 488 1
 2013 01c8 1846     		mov	r0, r3
 2014 01ca 4037     		adds	r7, r7, #64
 2015              	.LCFI22:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 46


 2016              		.cfi_def_cfa_offset 16
 2017 01cc BD46     		mov	sp, r7
 2018              	.LCFI23:
 2019              		.cfi_def_cfa_register 13
 2020              		@ sp needed
 2021 01ce B0BD     		pop	{r4, r5, r7, pc}
 2022              	.L57:
 2023              		.align	2
 2024              	.L56:
 2025 01d0 0000F03F 		.word	1072693248
 2026 01d4 00000C40 		.word	1074528256
 2027 01d8 00000440 		.word	1074003968
 2028 01dc 00001040 		.word	1074790400
 2029              		.cfi_endproc
 2030              	.LFE141:
 2032              		.section	.text.dwt_cycle_counter_init,"ax",%progbits
 2033              		.align	1
 2034              		.syntax unified
 2035              		.thumb
 2036              		.thumb_func
 2038              	dwt_cycle_counter_init:
 2039              	.LFB142:
 489:Core/Src/main.c **** 
 490:Core/Src/main.c **** static void dwt_cycle_counter_init(void)
 491:Core/Src/main.c **** {
 2040              		.loc 1 491 1
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 0
 2043              		@ frame_needed = 1, uses_anonymous_args = 0
 2044              		@ link register save eliminated.
 2045 0000 80B4     		push	{r7}
 2046              	.LCFI24:
 2047              		.cfi_def_cfa_offset 4
 2048              		.cfi_offset 7, -4
 2049 0002 00AF     		add	r7, sp, #0
 2050              	.LCFI25:
 2051              		.cfi_def_cfa_register 7
 492:Core/Src/main.c **** 	/* Enable TRC */
 493:Core/Src/main.c **** 	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 2052              		.loc 1 493 11
 2053 0004 094B     		ldr	r3, .L59
 2054 0006 DB68     		ldr	r3, [r3, #12]
 2055 0008 084A     		ldr	r2, .L59
 2056              		.loc 1 493 19
 2057 000a 43F08073 		orr	r3, r3, #16777216
 2058 000e D360     		str	r3, [r2, #12]
 494:Core/Src/main.c **** 	/* Unlock DWT (if locked) by writing the key to LAR when present */
 495:Core/Src/main.c **** #ifdef DWT_LAR
 496:Core/Src/main.c **** 	DWT->LAR = 0xC5ACCE55;
 497:Core/Src/main.c **** #endif
 498:Core/Src/main.c **** 	/* Reset the cycle counter */
 499:Core/Src/main.c **** 	DWT->CYCCNT = 0;
 2059              		.loc 1 499 5
 2060 0010 074B     		ldr	r3, .L59+4
 2061              		.loc 1 499 14
 2062 0012 0022     		movs	r2, #0
 2063 0014 5A60     		str	r2, [r3, #4]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 47


 500:Core/Src/main.c **** 	/* Enable the cycle counter */
 501:Core/Src/main.c **** 	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 2064              		.loc 1 501 5
 2065 0016 064B     		ldr	r3, .L59+4
 2066 0018 1B68     		ldr	r3, [r3]
 2067 001a 054A     		ldr	r2, .L59+4
 2068              		.loc 1 501 12
 2069 001c 43F00103 		orr	r3, r3, #1
 2070 0020 1360     		str	r3, [r2]
 502:Core/Src/main.c **** }
 2071              		.loc 1 502 1
 2072 0022 00BF     		nop
 2073 0024 BD46     		mov	sp, r7
 2074              	.LCFI26:
 2075              		.cfi_def_cfa_register 13
 2076              		@ sp needed
 2077 0026 5DF8047B 		ldr	r7, [sp], #4
 2078              	.LCFI27:
 2079              		.cfi_restore 7
 2080              		.cfi_def_cfa_offset 0
 2081 002a 7047     		bx	lr
 2082              	.L60:
 2083              		.align	2
 2084              	.L59:
 2085 002c F0ED00E0 		.word	-536810000
 2086 0030 001000E0 		.word	-536866816
 2087              		.cfi_endproc
 2088              	.LFE142:
 2090              		.section	.text.dwt_get_cycles,"ax",%progbits
 2091              		.align	1
 2092              		.syntax unified
 2093              		.thumb
 2094              		.thumb_func
 2096              	dwt_get_cycles:
 2097              	.LFB143:
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** static inline uint32_t dwt_get_cycles(void)
 505:Core/Src/main.c **** {
 2098              		.loc 1 505 1
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 0
 2101              		@ frame_needed = 1, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103 0000 80B4     		push	{r7}
 2104              	.LCFI28:
 2105              		.cfi_def_cfa_offset 4
 2106              		.cfi_offset 7, -4
 2107 0002 00AF     		add	r7, sp, #0
 2108              	.LCFI29:
 2109              		.cfi_def_cfa_register 7
 506:Core/Src/main.c **** 	return DWT->CYCCNT;
 2110              		.loc 1 506 12
 2111 0004 034B     		ldr	r3, .L63
 2112 0006 5B68     		ldr	r3, [r3, #4]
 507:Core/Src/main.c **** }
 2113              		.loc 1 507 1
 2114 0008 1846     		mov	r0, r3
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 48


 2115 000a BD46     		mov	sp, r7
 2116              	.LCFI30:
 2117              		.cfi_def_cfa_register 13
 2118              		@ sp needed
 2119 000c 5DF8047B 		ldr	r7, [sp], #4
 2120              	.LCFI31:
 2121              		.cfi_restore 7
 2122              		.cfi_def_cfa_offset 0
 2123 0010 7047     		bx	lr
 2124              	.L64:
 2125 0012 00BF     		.align	2
 2126              	.L63:
 2127 0014 001000E0 		.word	-536866816
 2128              		.cfi_endproc
 2129              	.LFE143:
 2131              		.section	.rodata
 2132 01fb 00       		.align	2
 2133              	.LC15:
 2134 01fc 25733A20 		.ascii	"%s: %ux%u, cycles %lu, time %.6f s, throughput %.0f"
 2134      25757825 
 2134      752C2063 
 2134      79636C65 
 2134      7320256C 
 2135 022f 20707073 		.ascii	" pps, checksum %lu\015\012\000"
 2135      2C206368 
 2135      65636B73 
 2135      756D2025 
 2135      6C750D0A 
 2136              		.section	.text.log_fpu_benchmark,"ax",%progbits
 2137              		.align	1
 2138              		.syntax unified
 2139              		.thumb
 2140              		.thumb_func
 2142              	log_fpu_benchmark:
 2143              	.LFB144:
 508:Core/Src/main.c **** 
 509:Core/Src/main.c **** static void log_fpu_benchmark(uint16_t width, uint16_t height, uint32_t cycles, uint32_t checksum, 
 510:Core/Src/main.c **** {
 2144              		.loc 1 510 1
 2145              		.cfi_startproc
 2146              		@ args = 4, pretend = 0, frame = 32
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148 0000 B0B5     		push	{r4, r5, r7, lr}
 2149              	.LCFI32:
 2150              		.cfi_def_cfa_offset 16
 2151              		.cfi_offset 4, -16
 2152              		.cfi_offset 5, -12
 2153              		.cfi_offset 7, -8
 2154              		.cfi_offset 14, -4
 2155 0002 90B0     		sub	sp, sp, #64
 2156              	.LCFI33:
 2157              		.cfi_def_cfa_offset 80
 2158 0004 08AF     		add	r7, sp, #32
 2159              	.LCFI34:
 2160              		.cfi_def_cfa 7, 48
 2161 0006 3A61     		str	r2, [r7, #16]
 2162 0008 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 49


 2163 000a 87ED000B 		vstr.64	d0, [r7]
 2164 000e 0346     		mov	r3, r0	@ movhi
 2165 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 2166 0012 0B46     		mov	r3, r1	@ movhi
 2167 0014 BB82     		strh	r3, [r7, #20]	@ movhi
 511:Core/Src/main.c **** 	double seconds = (double)cycles / (double)SystemCoreClock;
 2168              		.loc 1 511 19
 2169 0016 3869     		ldr	r0, [r7, #16]
 2170 0018 FFF7FEFF 		bl	__aeabi_ui2d
 2171 001c 0446     		mov	r4, r0
 2172 001e 0D46     		mov	r5, r1
 2173              		.loc 1 511 36
 2174 0020 134B     		ldr	r3, .L66
 2175 0022 1B68     		ldr	r3, [r3]
 2176 0024 1846     		mov	r0, r3
 2177 0026 FFF7FEFF 		bl	__aeabi_ui2d
 2178 002a 0246     		mov	r2, r0
 2179 002c 0B46     		mov	r3, r1
 2180              		.loc 1 511 9
 2181 002e 2046     		mov	r0, r4
 2182 0030 2946     		mov	r1, r5
 2183 0032 FFF7FEFF 		bl	__aeabi_ddiv
 2184 0036 0246     		mov	r2, r0
 2185 0038 0B46     		mov	r3, r1
 2186 003a C7E90623 		strd	r2, [r7, #24]
 512:Core/Src/main.c **** 	printf("%s: %ux%u, cycles %lu, time %.6f s, throughput %.0f pps, checksum %lu\r\n",
 2187              		.loc 1 512 2
 2188 003e F98A     		ldrh	r1, [r7, #22]
 2189 0040 B88A     		ldrh	r0, [r7, #20]
 2190 0042 FB68     		ldr	r3, [r7, #12]
 2191 0044 0693     		str	r3, [sp, #24]
 2192 0046 D7E90023 		ldrd	r2, [r7]
 2193 004a CDE90423 		strd	r2, [sp, #16]
 2194 004e D7E90623 		ldrd	r2, [r7, #24]
 2195 0052 CDE90223 		strd	r2, [sp, #8]
 2196 0056 3B69     		ldr	r3, [r7, #16]
 2197 0058 0093     		str	r3, [sp]
 2198 005a 0346     		mov	r3, r0
 2199 005c 0A46     		mov	r2, r1
 2200 005e 396B     		ldr	r1, [r7, #48]
 2201 0060 0448     		ldr	r0, .L66+4
 2202 0062 FFF7FEFF 		bl	printf
 513:Core/Src/main.c **** 			precision, (unsigned)width, (unsigned)height, (unsigned long)cycles, seconds, throughput, (unsig
 514:Core/Src/main.c **** }
 2203              		.loc 1 514 1
 2204 0066 00BF     		nop
 2205 0068 2037     		adds	r7, r7, #32
 2206              	.LCFI35:
 2207              		.cfi_def_cfa_offset 16
 2208 006a BD46     		mov	sp, r7
 2209              	.LCFI36:
 2210              		.cfi_def_cfa_register 13
 2211              		@ sp needed
 2212 006c B0BD     		pop	{r4, r5, r7, pc}
 2213              	.L67:
 2214 006e 00BF     		.align	2
 2215              	.L66:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 50


 2216 0070 00000000 		.word	SystemCoreClock
 2217 0074 FC010000 		.word	.LC15
 2218              		.cfi_endproc
 2219              	.LFE144:
 2221              		.section	.rodata
 2222              		.align	2
 2223              	.LC16:
 2224 0244 434F4D50 		.ascii	"COMPARISON %ux%u: Float checksum %lu, Double checks"
 2224      41524953 
 2224      4F4E2025 
 2224      75782575 
 2224      3A20466C 
 2225 0277 756D2025 		.ascii	"um %lu, Speedup %.2fx\015\012\000"
 2225      6C752C20 
 2225      53706565 
 2225      64757020 
 2225      252E3266 
 2226              		.section	.text.log_fpu_comparison,"ax",%progbits
 2227              		.align	1
 2228              		.syntax unified
 2229              		.thumb
 2230              		.thumb_func
 2232              	log_fpu_comparison:
 2233              	.LFB145:
 515:Core/Src/main.c **** 
 516:Core/Src/main.c **** static void log_fpu_comparison(uint16_t width, uint16_t height, uint32_t checksum_float, uint32_t c
 517:Core/Src/main.c **** {
 2234              		.loc 1 517 1
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 24
 2237              		@ frame_needed = 1, uses_anonymous_args = 0
 2238 0000 80B5     		push	{r7, lr}
 2239              	.LCFI37:
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0002 8AB0     		sub	sp, sp, #40
 2244              	.LCFI38:
 2245              		.cfi_def_cfa_offset 48
 2246 0004 04AF     		add	r7, sp, #16
 2247              	.LCFI39:
 2248              		.cfi_def_cfa 7, 32
 2249 0006 3A61     		str	r2, [r7, #16]
 2250 0008 FB60     		str	r3, [r7, #12]
 2251 000a 87ED000B 		vstr.64	d0, [r7]
 2252 000e 0346     		mov	r3, r0	@ movhi
 2253 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 2254 0012 0B46     		mov	r3, r1	@ movhi
 2255 0014 BB82     		strh	r3, [r7, #20]	@ movhi
 518:Core/Src/main.c **** 	printf("COMPARISON %ux%u: Float checksum %lu, Double checksum %lu, Speedup %.2fx\r\n",
 2256              		.loc 1 518 2
 2257 0016 F98A     		ldrh	r1, [r7, #22]
 2258 0018 B88A     		ldrh	r0, [r7, #20]
 2259 001a D7E90023 		ldrd	r2, [r7]
 2260 001e CDE90223 		strd	r2, [sp, #8]
 2261 0022 FB68     		ldr	r3, [r7, #12]
 2262 0024 0093     		str	r3, [sp]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 51


 2263 0026 3B69     		ldr	r3, [r7, #16]
 2264 0028 0246     		mov	r2, r0
 2265 002a 0348     		ldr	r0, .L69
 2266 002c FFF7FEFF 		bl	printf
 519:Core/Src/main.c **** 			(unsigned)width, (unsigned)height, (unsigned long)checksum_float, (unsigned long)checksum_double
 520:Core/Src/main.c **** }
 2267              		.loc 1 520 1
 2268 0030 00BF     		nop
 2269 0032 1837     		adds	r7, r7, #24
 2270              	.LCFI40:
 2271              		.cfi_def_cfa_offset 8
 2272 0034 BD46     		mov	sp, r7
 2273              	.LCFI41:
 2274              		.cfi_def_cfa_register 13
 2275              		@ sp needed
 2276 0036 80BD     		pop	{r7, pc}
 2277              	.L70:
 2278              		.align	2
 2279              	.L69:
 2280 0038 44020000 		.word	.LC16
 2281              		.cfi_endproc
 2282              	.LFE145:
 2284              		.section	.text.__io_putchar,"ax",%progbits
 2285              		.align	1
 2286              		.global	__io_putchar
 2287              		.syntax unified
 2288              		.thumb
 2289              		.thumb_func
 2291              	__io_putchar:
 2292              	.LFB146:
 521:Core/Src/main.c **** 
 522:Core/Src/main.c **** int __io_putchar(int ch)
 523:Core/Src/main.c **** {
 2293              		.loc 1 523 1
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 8
 2296              		@ frame_needed = 1, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 2298 0000 80B4     		push	{r7}
 2299              	.LCFI42:
 2300              		.cfi_def_cfa_offset 4
 2301              		.cfi_offset 7, -4
 2302 0002 83B0     		sub	sp, sp, #12
 2303              	.LCFI43:
 2304              		.cfi_def_cfa_offset 16
 2305 0004 00AF     		add	r7, sp, #0
 2306              	.LCFI44:
 2307              		.cfi_def_cfa_register 7
 2308 0006 7860     		str	r0, [r7, #4]
 524:Core/Src/main.c **** 	/* Route to ITM stimulus port 0 for SWV view. Requires debugger and SWO enabled. */
 525:Core/Src/main.c **** 	if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 2309              		.loc 1 525 10
 2310 0008 4FF06043 		mov	r3, #-536870912
 2311 000c D3F8803E 		ldr	r3, [r3, #3712]
 2312              		.loc 1 525 16
 2313 0010 03F00103 		and	r3, r3, #1
 2314              		.loc 1 525 5
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 52


 2315 0014 002B     		cmp	r3, #0
 2316 0016 13D0     		beq	.L72
 2317              		.loc 1 525 51 discriminator 1
 2318 0018 0D4B     		ldr	r3, .L76
 2319 001a DB68     		ldr	r3, [r3, #12]
 2320              		.loc 1 525 59 discriminator 1
 2321 001c 03F08073 		and	r3, r3, #16777216
 2322              		.loc 1 525 38 discriminator 1
 2323 0020 002B     		cmp	r3, #0
 2324 0022 0DD0     		beq	.L72
 526:Core/Src/main.c **** 	{
 527:Core/Src/main.c **** 		while (ITM->PORT[0].u32 == 0) { __NOP(); }
 2325              		.loc 1 527 9
 2326 0024 00E0     		b	.L73
 2327              	.L74:
 2328              		.loc 1 527 35 discriminator 2
 2329              		.syntax unified
 2330              	@ 527 "Core/Src/main.c" 1
 2331 0026 00BF     		nop
 2332              	@ 0 "" 2
 2333              		.thumb
 2334              		.syntax unified
 2335              	.L73:
 2336              		.loc 1 527 13 discriminator 1
 2337 0028 4FF06043 		mov	r3, #-536870912
 2338              		.loc 1 527 22 discriminator 1
 2339 002c 1B68     		ldr	r3, [r3]
 2340              		.loc 1 527 27 discriminator 1
 2341 002e 002B     		cmp	r3, #0
 2342 0030 F9D0     		beq	.L74
 528:Core/Src/main.c **** 		ITM->PORT[0].u8 = (uint8_t)ch;
 2343              		.loc 1 528 6
 2344 0032 4FF06043 		mov	r3, #-536870912
 2345              		.loc 1 528 21
 2346 0036 7A68     		ldr	r2, [r7, #4]
 2347 0038 D2B2     		uxtb	r2, r2
 2348              		.loc 1 528 19
 2349 003a 1A70     		strb	r2, [r3]
 529:Core/Src/main.c **** 		return ch;
 2350              		.loc 1 529 10
 2351 003c 7B68     		ldr	r3, [r7, #4]
 2352 003e 00E0     		b	.L75
 2353              	.L72:
 530:Core/Src/main.c **** 	}
 531:Core/Src/main.c **** 	/* Fallback: do nothing */
 532:Core/Src/main.c **** 	return ch;
 2354              		.loc 1 532 9
 2355 0040 7B68     		ldr	r3, [r7, #4]
 2356              	.L75:
 533:Core/Src/main.c **** }
 2357              		.loc 1 533 1
 2358 0042 1846     		mov	r0, r3
 2359 0044 0C37     		adds	r7, r7, #12
 2360              	.LCFI45:
 2361              		.cfi_def_cfa_offset 4
 2362 0046 BD46     		mov	sp, r7
 2363              	.LCFI46:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 53


 2364              		.cfi_def_cfa_register 13
 2365              		@ sp needed
 2366 0048 5DF8047B 		ldr	r7, [sp], #4
 2367              	.LCFI47:
 2368              		.cfi_restore 7
 2369              		.cfi_def_cfa_offset 0
 2370 004c 7047     		bx	lr
 2371              	.L77:
 2372 004e 00BF     		.align	2
 2373              	.L76:
 2374 0050 F0ED00E0 		.word	-536810000
 2375              		.cfi_endproc
 2376              	.LFE146:
 2378              		.global	__aeabi_ldivmod
 2379              		.section	.text.fixed_multiply,"ax",%progbits
 2380              		.align	1
 2381              		.syntax unified
 2382              		.thumb
 2383              		.thumb_func
 2385              	fixed_multiply:
 2386              	.LFB147:
 534:Core/Src/main.c **** 
 535:Core/Src/main.c **** /* Task 7: Fixed-point arithmetic functions */
 536:Core/Src/main.c **** static int64_t fixed_multiply(int64_t a, int64_t b, uint32_t scale)
 537:Core/Src/main.c **** {
 2387              		.loc 1 537 1
 2388              		.cfi_startproc
 2389              		@ args = 4, pretend = 0, frame = 24
 2390              		@ frame_needed = 1, uses_anonymous_args = 0
 2391 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 2392              	.LCFI48:
 2393              		.cfi_def_cfa_offset 24
 2394              		.cfi_offset 4, -24
 2395              		.cfi_offset 5, -20
 2396              		.cfi_offset 7, -16
 2397              		.cfi_offset 8, -12
 2398              		.cfi_offset 9, -8
 2399              		.cfi_offset 14, -4
 2400 0004 86B0     		sub	sp, sp, #24
 2401              	.LCFI49:
 2402              		.cfi_def_cfa_offset 48
 2403 0006 00AF     		add	r7, sp, #0
 2404              	.LCFI50:
 2405              		.cfi_def_cfa_register 7
 2406 0008 C7E90201 		strd	r0, [r7, #8]
 2407 000c C7E90023 		strd	r2, [r7]
 538:Core/Src/main.c **** 	/* Multiply two fixed-point numbers and scale back */
 539:Core/Src/main.c **** 	int64_t result = (a * b) / (int64_t)scale;
 2408              		.loc 1 539 22
 2409 0010 FB68     		ldr	r3, [r7, #12]
 2410 0012 3A68     		ldr	r2, [r7]
 2411 0014 03FB02F2 		mul	r2, r3, r2
 2412 0018 7B68     		ldr	r3, [r7, #4]
 2413 001a B968     		ldr	r1, [r7, #8]
 2414 001c 01FB03F3 		mul	r3, r1, r3
 2415 0020 1344     		add	r3, r3, r2
 2416 0022 B968     		ldr	r1, [r7, #8]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 54


 2417 0024 3A68     		ldr	r2, [r7]
 2418 0026 A1FB0245 		umull	r4, r5, r1, r2
 2419 002a 2B44     		add	r3, r3, r5
 2420 002c 1D46     		mov	r5, r3
 2421              		.loc 1 539 29
 2422 002e 3B6B     		ldr	r3, [r7, #48]
 2423 0030 0022     		movs	r2, #0
 2424 0032 9846     		mov	r8, r3
 2425 0034 9146     		mov	r9, r2
 2426              		.loc 1 539 10
 2427 0036 4246     		mov	r2, r8
 2428 0038 4B46     		mov	r3, r9
 2429 003a 2046     		mov	r0, r4
 2430 003c 2946     		mov	r1, r5
 2431 003e FFF7FEFF 		bl	__aeabi_ldivmod
 2432 0042 0246     		mov	r2, r0
 2433 0044 0B46     		mov	r3, r1
 2434 0046 C7E90423 		strd	r2, [r7, #16]
 540:Core/Src/main.c **** 	return result;
 2435              		.loc 1 540 9
 2436 004a D7E90423 		ldrd	r2, [r7, #16]
 541:Core/Src/main.c **** }
 2437              		.loc 1 541 1
 2438 004e 1046     		mov	r0, r2
 2439 0050 1946     		mov	r1, r3
 2440 0052 1837     		adds	r7, r7, #24
 2441              	.LCFI51:
 2442              		.cfi_def_cfa_offset 24
 2443 0054 BD46     		mov	sp, r7
 2444              	.LCFI52:
 2445              		.cfi_def_cfa_register 13
 2446              		@ sp needed
 2447 0056 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 2448              		.cfi_endproc
 2449              	.LFE147:
 2451              		.section	.text.fixed_add,"ax",%progbits
 2452              		.align	1
 2453              		.syntax unified
 2454              		.thumb
 2455              		.thumb_func
 2457              	fixed_add:
 2458              	.LFB148:
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** static int64_t fixed_add(int64_t a, int64_t b)
 544:Core/Src/main.c **** {
 2459              		.loc 1 544 1
 2460              		.cfi_startproc
 2461              		@ args = 0, pretend = 0, frame = 16
 2462              		@ frame_needed = 1, uses_anonymous_args = 0
 2463              		@ link register save eliminated.
 2464 0000 B0B4     		push	{r4, r5, r7}
 2465              	.LCFI53:
 2466              		.cfi_def_cfa_offset 12
 2467              		.cfi_offset 4, -12
 2468              		.cfi_offset 5, -8
 2469              		.cfi_offset 7, -4
 2470 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 55


 2471              	.LCFI54:
 2472              		.cfi_def_cfa_offset 32
 2473 0004 00AF     		add	r7, sp, #0
 2474              	.LCFI55:
 2475              		.cfi_def_cfa_register 7
 2476 0006 C7E90201 		strd	r0, [r7, #8]
 2477 000a C7E90023 		strd	r2, [r7]
 545:Core/Src/main.c **** 	return a + b;
 2478              		.loc 1 545 11
 2479 000e D7E90201 		ldrd	r0, [r7, #8]
 2480 0012 D7E90023 		ldrd	r2, [r7]
 2481 0016 8418     		adds	r4, r0, r2
 2482 0018 41EB0305 		adc	r5, r1, r3
 2483              		.loc 1 545 11 is_stmt 0 discriminator 1
 2484 001c 2246     		mov	r2, r4
 2485 001e 2B46     		mov	r3, r5
 546:Core/Src/main.c **** }
 2486              		.loc 1 546 1 is_stmt 1
 2487 0020 1046     		mov	r0, r2
 2488 0022 1946     		mov	r1, r3
 2489 0024 1437     		adds	r7, r7, #20
 2490              	.LCFI56:
 2491              		.cfi_def_cfa_offset 12
 2492 0026 BD46     		mov	sp, r7
 2493              	.LCFI57:
 2494              		.cfi_def_cfa_register 13
 2495              		@ sp needed
 2496 0028 B0BC     		pop	{r4, r5, r7}
 2497              	.LCFI58:
 2498              		.cfi_restore 7
 2499              		.cfi_restore 5
 2500              		.cfi_restore 4
 2501              		.cfi_def_cfa_offset 0
 2502 002a 7047     		bx	lr
 2503              		.cfi_endproc
 2504              	.LFE148:
 2506              		.global	__aeabi_d2lz
 2507              		.section	.text.double_to_fixed,"ax",%progbits
 2508              		.align	1
 2509              		.syntax unified
 2510              		.thumb
 2511              		.thumb_func
 2513              	double_to_fixed:
 2514              	.LFB149:
 547:Core/Src/main.c **** 
 548:Core/Src/main.c **** static int64_t double_to_fixed(double value, uint32_t scale)
 549:Core/Src/main.c **** {
 2515              		.loc 1 549 1
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 16
 2518              		@ frame_needed = 1, uses_anonymous_args = 0
 2519 0000 80B5     		push	{r7, lr}
 2520              	.LCFI59:
 2521              		.cfi_def_cfa_offset 8
 2522              		.cfi_offset 7, -8
 2523              		.cfi_offset 14, -4
 2524 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 56


 2525              	.LCFI60:
 2526              		.cfi_def_cfa_offset 24
 2527 0004 00AF     		add	r7, sp, #0
 2528              	.LCFI61:
 2529              		.cfi_def_cfa_register 7
 2530 0006 87ED020B 		vstr.64	d0, [r7, #8]
 2531 000a 7860     		str	r0, [r7, #4]
 550:Core/Src/main.c **** 	return (int64_t)(value * (double)scale);
 2532              		.loc 1 550 27
 2533 000c 7868     		ldr	r0, [r7, #4]
 2534 000e FFF7FEFF 		bl	__aeabi_ui2d
 2535              		.loc 1 550 25
 2536 0012 D7E90223 		ldrd	r2, [r7, #8]
 2537 0016 FFF7FEFF 		bl	__aeabi_dmul
 2538 001a 0246     		mov	r2, r0
 2539 001c 0B46     		mov	r3, r1
 2540              		.loc 1 550 9
 2541 001e 1046     		mov	r0, r2
 2542 0020 1946     		mov	r1, r3
 2543 0022 FFF7FEFF 		bl	__aeabi_d2lz
 2544 0026 0246     		mov	r2, r0
 2545 0028 0B46     		mov	r3, r1
 551:Core/Src/main.c **** }
 2546              		.loc 1 551 1
 2547 002a 1046     		mov	r0, r2
 2548 002c 1946     		mov	r1, r3
 2549 002e 1037     		adds	r7, r7, #16
 2550              	.LCFI62:
 2551              		.cfi_def_cfa_offset 8
 2552 0030 BD46     		mov	sp, r7
 2553              	.LCFI63:
 2554              		.cfi_def_cfa_register 13
 2555              		@ sp needed
 2556 0032 80BD     		pop	{r7, pc}
 2557              		.cfi_endproc
 2558              	.LFE149:
 2560              		.global	__aeabi_l2d
 2561              		.section	.text.fixed_to_double,"ax",%progbits
 2562              		.align	1
 2563              		.syntax unified
 2564              		.thumb
 2565              		.thumb_func
 2567              	fixed_to_double:
 2568              	.LFB150:
 552:Core/Src/main.c **** 
 553:Core/Src/main.c **** static double fixed_to_double(int64_t value, uint32_t scale)
 554:Core/Src/main.c **** {
 2569              		.loc 1 554 1
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 16
 2572              		@ frame_needed = 1, uses_anonymous_args = 0
 2573 0000 B0B5     		push	{r4, r5, r7, lr}
 2574              	.LCFI64:
 2575              		.cfi_def_cfa_offset 16
 2576              		.cfi_offset 4, -16
 2577              		.cfi_offset 5, -12
 2578              		.cfi_offset 7, -8
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 57


 2579              		.cfi_offset 14, -4
 2580 0002 84B0     		sub	sp, sp, #16
 2581              	.LCFI65:
 2582              		.cfi_def_cfa_offset 32
 2583 0004 00AF     		add	r7, sp, #0
 2584              	.LCFI66:
 2585              		.cfi_def_cfa_register 7
 2586 0006 C7E90201 		strd	r0, [r7, #8]
 2587 000a 7A60     		str	r2, [r7, #4]
 555:Core/Src/main.c **** 	return (double)value / (double)scale;
 2588              		.loc 1 555 9
 2589 000c D7E90201 		ldrd	r0, [r7, #8]
 2590 0010 FFF7FEFF 		bl	__aeabi_l2d
 2591 0014 0446     		mov	r4, r0
 2592 0016 0D46     		mov	r5, r1
 2593              		.loc 1 555 25
 2594 0018 7868     		ldr	r0, [r7, #4]
 2595 001a FFF7FEFF 		bl	__aeabi_ui2d
 2596 001e 0246     		mov	r2, r0
 2597 0020 0B46     		mov	r3, r1
 2598              		.loc 1 555 23
 2599 0022 2046     		mov	r0, r4
 2600 0024 2946     		mov	r1, r5
 2601 0026 FFF7FEFF 		bl	__aeabi_ddiv
 2602 002a 0246     		mov	r2, r0
 2603 002c 0B46     		mov	r3, r1
 2604              		.loc 1 555 23 is_stmt 0 discriminator 1
 2605 002e 43EC172B 		vmov	d7, r2, r3
 556:Core/Src/main.c **** }
 2606              		.loc 1 556 1 is_stmt 1
 2607 0032 B0EE470A 		vmov.f32	s0, s14
 2608 0036 F0EE670A 		vmov.f32	s1, s15
 2609 003a 1037     		adds	r7, r7, #16
 2610              	.LCFI67:
 2611              		.cfi_def_cfa_offset 16
 2612 003c BD46     		mov	sp, r7
 2613              	.LCFI68:
 2614              		.cfi_def_cfa_register 13
 2615              		@ sp needed
 2616 003e B0BD     		pop	{r4, r5, r7, pc}
 2617              		.cfi_endproc
 2618              	.LFE150:
 2620              		.section	.text.generate_mandelbrot_checksum_fixed_point,"ax",%progbits
 2621              		.align	1
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2626              	generate_mandelbrot_checksum_fixed_point:
 2627              	.LFB151:
 557:Core/Src/main.c **** 
 558:Core/Src/main.c **** static uint32_t generate_mandelbrot_checksum_fixed_point(uint16_t width, uint16_t height, uint32_t 
 559:Core/Src/main.c **** {
 2628              		.loc 1 559 1
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 160
 2631              		@ frame_needed = 1, uses_anonymous_args = 0
 2632 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 58


 2633              	.LCFI69:
 2634              		.cfi_def_cfa_offset 32
 2635              		.cfi_offset 4, -32
 2636              		.cfi_offset 5, -28
 2637              		.cfi_offset 7, -24
 2638              		.cfi_offset 8, -20
 2639              		.cfi_offset 9, -16
 2640              		.cfi_offset 10, -12
 2641              		.cfi_offset 11, -8
 2642              		.cfi_offset 14, -4
 2643 0004 AAB0     		sub	sp, sp, #168
 2644              	.LCFI70:
 2645              		.cfi_def_cfa_offset 200
 2646 0006 02AF     		add	r7, sp, #8
 2647              	.LCFI71:
 2648              		.cfi_def_cfa 7, 192
 2649 0008 3A62     		str	r2, [r7, #32]
 2650 000a FB61     		str	r3, [r7, #28]
 2651 000c 0346     		mov	r3, r0	@ movhi
 2652 000e FB84     		strh	r3, [r7, #38]	@ movhi
 2653 0010 0B46     		mov	r3, r1	@ movhi
 2654 0012 BB84     		strh	r3, [r7, #36]	@ movhi
 560:Core/Src/main.c **** 	uint32_t mandelbrot_sum = 0u;
 2655              		.loc 1 560 11
 2656 0014 0023     		movs	r3, #0
 2657 0016 C7F89C30 		str	r3, [r7, #156]
 561:Core/Src/main.c **** 	uint32_t overflow_count = 0u;
 2658              		.loc 1 561 11
 2659 001a 0023     		movs	r3, #0
 2660 001c C7F89830 		str	r3, [r7, #152]
 562:Core/Src/main.c **** 	
 563:Core/Src/main.c **** 	/* Fixed-point constants */
 564:Core/Src/main.c **** 	int64_t scale_2_0 = double_to_fixed(2.0, scale);      /* 2.0 in fixed-point */
 2661              		.loc 1 564 22
 2662 0020 F869     		ldr	r0, [r7, #28]
 2663 0022 9FED950B 		vldr.64	d0, .L99
 2664 0026 FFF7FEFF 		bl	double_to_fixed
 2665 002a C7E91C01 		strd	r0, [r7, #112]
 565:Core/Src/main.c **** 	int64_t scale_4_0 = double_to_fixed(4.0, scale);      /* 4.0 in fixed-point */
 2666              		.loc 1 565 22
 2667 002e F869     		ldr	r0, [r7, #28]
 2668 0030 9FED930B 		vldr.64	d0, .L99+8
 2669 0034 FFF7FEFF 		bl	double_to_fixed
 2670 0038 C7E91A01 		strd	r0, [r7, #104]
 566:Core/Src/main.c **** 	int64_t scale_3_5 = double_to_fixed(3.5, scale);      /* 3.5 in fixed-point */
 2671              		.loc 1 566 22
 2672 003c F869     		ldr	r0, [r7, #28]
 2673 003e 9FED920B 		vldr.64	d0, .L99+16
 2674 0042 FFF7FEFF 		bl	double_to_fixed
 2675 0046 C7E91801 		strd	r0, [r7, #96]
 567:Core/Src/main.c **** 	int64_t scale_2_5 = double_to_fixed(2.5, scale);      /* 2.5 in fixed-point */
 2676              		.loc 1 567 22
 2677 004a F869     		ldr	r0, [r7, #28]
 2678 004c 9FED900B 		vldr.64	d0, .L99+24
 2679 0050 FFF7FEFF 		bl	double_to_fixed
 2680 0054 C7E91601 		strd	r0, [r7, #88]
 2681              	.LBB32:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 59


 568:Core/Src/main.c **** 	
 569:Core/Src/main.c **** 	for (uint16_t y = 0; y < height; ++y)
 2682              		.loc 1 569 16
 2683 0058 0023     		movs	r3, #0
 2684 005a A7F89630 		strh	r3, [r7, #150]	@ movhi
 2685              		.loc 1 569 2
 2686 005e F4E0     		b	.L87
 2687              	.L96:
 2688              	.LBB33:
 570:Core/Src/main.c **** 	{
 571:Core/Src/main.c **** 		int64_t y0_fixed = fixed_multiply(double_to_fixed((double)y, scale), scale_2_0, scale) / (int64_t
 2689              		.loc 1 571 22
 2690 0060 B7F89630 		ldrh	r3, [r7, #150]
 2691 0064 1846     		mov	r0, r3
 2692 0066 FFF7FEFF 		bl	__aeabi_ui2d
 2693 006a 0246     		mov	r2, r0
 2694 006c 0B46     		mov	r3, r1
 2695 006e F869     		ldr	r0, [r7, #28]
 2696 0070 43EC102B 		vmov	d0, r2, r3
 2697 0074 FFF7FEFF 		bl	double_to_fixed
 2698              		.loc 1 571 22 is_stmt 0 discriminator 1
 2699 0078 FB69     		ldr	r3, [r7, #28]
 2700 007a 0093     		str	r3, [sp]
 2701 007c D7E91C23 		ldrd	r2, [r7, #112]
 2702 0080 FFF7FEFF 		bl	fixed_multiply
 2703              		.loc 1 571 92 is_stmt 1 discriminator 2
 2704 0084 BB8C     		ldrh	r3, [r7, #36]
 2705 0086 0022     		movs	r2, #0
 2706 0088 3B61     		str	r3, [r7, #16]
 2707 008a 7A61     		str	r2, [r7, #20]
 2708              		.loc 1 571 90 discriminator 2
 2709 008c D7E90423 		ldrd	r2, [r7, #16]
 2710 0090 FFF7FEFF 		bl	__aeabi_ldivmod
 2711 0094 0246     		mov	r2, r0
 2712 0096 0B46     		mov	r3, r1
 2713 0098 1446     		mov	r4, r2
 2714 009a 1D46     		mov	r5, r3
 2715              		.loc 1 571 110 discriminator 2
 2716 009c F869     		ldr	r0, [r7, #28]
 2717 009e 9FED7E0B 		vldr.64	d0, .L99+32
 2718 00a2 FFF7FEFF 		bl	double_to_fixed
 2719 00a6 0246     		mov	r2, r0
 2720 00a8 0B46     		mov	r3, r1
 2721              		.loc 1 571 11 discriminator 3
 2722 00aa B4EB0208 		subs	r8, r4, r2
 2723 00ae 65EB0309 		sbc	r9, r5, r3
 2724 00b2 C7E91489 		strd	r8, [r7, #80]
 2725              	.LBB34:
 572:Core/Src/main.c **** 		
 573:Core/Src/main.c **** 		for (uint16_t x = 0; x < width; ++x)
 2726              		.loc 1 573 17
 2727 00b6 0023     		movs	r3, #0
 2728 00b8 A7F89430 		strh	r3, [r7, #148]	@ movhi
 2729              		.loc 1 573 3
 2730 00bc BAE0     		b	.L88
 2731              	.L95:
 2732              	.LBB35:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 60


 574:Core/Src/main.c **** 		{
 575:Core/Src/main.c **** 			int64_t x0_fixed = fixed_multiply(double_to_fixed((double)x, scale), scale_3_5, scale) / (int64_
 2733              		.loc 1 575 23
 2734 00be B7F89430 		ldrh	r3, [r7, #148]
 2735 00c2 1846     		mov	r0, r3
 2736 00c4 FFF7FEFF 		bl	__aeabi_ui2d
 2737 00c8 0246     		mov	r2, r0
 2738 00ca 0B46     		mov	r3, r1
 2739 00cc F869     		ldr	r0, [r7, #28]
 2740 00ce 43EC102B 		vmov	d0, r2, r3
 2741 00d2 FFF7FEFF 		bl	double_to_fixed
 2742              		.loc 1 575 23 is_stmt 0 discriminator 1
 2743 00d6 FB69     		ldr	r3, [r7, #28]
 2744 00d8 0093     		str	r3, [sp]
 2745 00da D7E91823 		ldrd	r2, [r7, #96]
 2746 00de FFF7FEFF 		bl	fixed_multiply
 2747              		.loc 1 575 93 is_stmt 1 discriminator 2
 2748 00e2 FB8C     		ldrh	r3, [r7, #38]
 2749 00e4 0022     		movs	r2, #0
 2750 00e6 BB60     		str	r3, [r7, #8]
 2751 00e8 FA60     		str	r2, [r7, #12]
 2752              		.loc 1 575 91 discriminator 2
 2753 00ea D7E90223 		ldrd	r2, [r7, #8]
 2754 00ee FFF7FEFF 		bl	__aeabi_ldivmod
 2755 00f2 0246     		mov	r2, r0
 2756 00f4 0B46     		mov	r3, r1
 2757 00f6 1046     		mov	r0, r2
 2758 00f8 1946     		mov	r1, r3
 2759              		.loc 1 575 12 discriminator 2
 2760 00fa D7E91623 		ldrd	r2, [r7, #88]
 2761 00fe B0EB020A 		subs	r10, r0, r2
 2762 0102 61EB030B 		sbc	fp, r1, r3
 2763 0106 C7E912AB 		strd	r10, [r7, #72]
 576:Core/Src/main.c **** 			int64_t xi_fixed = 0;
 2764              		.loc 1 576 12
 2765 010a 4FF00002 		mov	r2, #0
 2766 010e 4FF00003 		mov	r3, #0
 2767 0112 C7E92223 		strd	r2, [r7, #136]
 577:Core/Src/main.c **** 			int64_t yi_fixed = 0;
 2768              		.loc 1 577 12
 2769 0116 4FF00002 		mov	r2, #0
 2770 011a 4FF00003 		mov	r3, #0
 2771 011e C7E92023 		strd	r2, [r7, #128]
 578:Core/Src/main.c **** 			uint32_t iteration = 0u;
 2772              		.loc 1 578 13
 2773 0122 0023     		movs	r3, #0
 2774 0124 FB67     		str	r3, [r7, #124]
 579:Core/Src/main.c **** 			
 580:Core/Src/main.c **** 			while (iteration < max_iter)
 2775              		.loc 1 580 10
 2776 0126 74E0     		b	.L89
 2777              	.L94:
 2778              	.LBB36:
 581:Core/Src/main.c **** 			{
 582:Core/Src/main.c **** 				/* Check for overflow before multiplication */
 583:Core/Src/main.c **** 				if (xi_fixed > 1000000 || xi_fixed < -1000000 || yi_fixed > 1000000 || yi_fixed < -1000000)
 2779              		.loc 1 583 8
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 61


 2780 0128 D7E92223 		ldrd	r2, [r7, #136]
 2781 012c 5C49     		ldr	r1, .L99+40
 2782 012e 8A42     		cmp	r2, r1
 2783 0130 73F10003 		sbcs	r3, r3, #0
 2784 0134 14DA     		bge	.L90
 2785              		.loc 1 583 28 discriminator 1
 2786 0136 D7E92223 		ldrd	r2, [r7, #136]
 2787 013a 5A49     		ldr	r1, .L99+44
 2788 013c 8A42     		cmp	r2, r1
 2789 013e 73F1FF33 		sbcs	r3, r3, #-1
 2790 0142 0DDB     		blt	.L90
 2791              		.loc 1 583 51 discriminator 2
 2792 0144 D7E92023 		ldrd	r2, [r7, #128]
 2793 0148 5549     		ldr	r1, .L99+40
 2794 014a 8A42     		cmp	r2, r1
 2795 014c 73F10003 		sbcs	r3, r3, #0
 2796 0150 06DA     		bge	.L90
 2797              		.loc 1 583 73 discriminator 3
 2798 0152 D7E92023 		ldrd	r2, [r7, #128]
 2799 0156 5349     		ldr	r1, .L99+44
 2800 0158 8A42     		cmp	r2, r1
 2801 015a 73F1FF33 		sbcs	r3, r3, #-1
 2802 015e 05DA     		bge	.L91
 2803              	.L90:
 584:Core/Src/main.c **** 				{
 585:Core/Src/main.c **** 					overflow_count++;
 2804              		.loc 1 585 20
 2805 0160 D7F89830 		ldr	r3, [r7, #152]
 2806 0164 0133     		adds	r3, r3, #1
 2807 0166 C7F89830 		str	r3, [r7, #152]
 586:Core/Src/main.c **** 					break;
 2808              		.loc 1 586 6
 2809 016a 58E0     		b	.L92
 2810              	.L91:
 587:Core/Src/main.c **** 				}
 588:Core/Src/main.c **** 				
 589:Core/Src/main.c **** 				/* Calculate xi^2 + yi^2 in fixed-point */
 590:Core/Src/main.c **** 				int64_t xi_squared = fixed_multiply(xi_fixed, xi_fixed, scale);
 2811              		.loc 1 590 26
 2812 016c FB69     		ldr	r3, [r7, #28]
 2813 016e 0093     		str	r3, [sp]
 2814 0170 D7E92223 		ldrd	r2, [r7, #136]
 2815 0174 D7E92201 		ldrd	r0, [r7, #136]
 2816 0178 FFF7FEFF 		bl	fixed_multiply
 2817 017c C7E91001 		strd	r0, [r7, #64]
 591:Core/Src/main.c **** 				int64_t yi_squared = fixed_multiply(yi_fixed, yi_fixed, scale);
 2818              		.loc 1 591 26
 2819 0180 FB69     		ldr	r3, [r7, #28]
 2820 0182 0093     		str	r3, [sp]
 2821 0184 D7E92023 		ldrd	r2, [r7, #128]
 2822 0188 D7E92001 		ldrd	r0, [r7, #128]
 2823 018c FFF7FEFF 		bl	fixed_multiply
 2824 0190 C7E90E01 		strd	r0, [r7, #56]
 592:Core/Src/main.c **** 				int64_t magnitude_squared = fixed_add(xi_squared, yi_squared);
 2825              		.loc 1 592 33
 2826 0194 D7E90E23 		ldrd	r2, [r7, #56]
 2827 0198 D7E91001 		ldrd	r0, [r7, #64]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 62


 2828 019c FFF7FEFF 		bl	fixed_add
 2829 01a0 C7E90C01 		strd	r0, [r7, #48]
 593:Core/Src/main.c **** 				
 594:Core/Src/main.c **** 				/* Check if magnitude^2 > 4.0 */
 595:Core/Src/main.c **** 				if (magnitude_squared > scale_4_0)
 2830              		.loc 1 595 8
 2831 01a4 D7E90C23 		ldrd	r2, [r7, #48]
 2832 01a8 D7E91A01 		ldrd	r0, [r7, #104]
 2833 01ac 9042     		cmp	r0, r2
 2834 01ae 71EB0303 		sbcs	r3, r1, r3
 2835 01b2 33DB     		blt	.L98
 596:Core/Src/main.c **** 				{
 597:Core/Src/main.c **** 					break;
 598:Core/Src/main.c **** 				}
 599:Core/Src/main.c **** 				
 600:Core/Src/main.c **** 				/* Calculate new xi and yi */
 601:Core/Src/main.c **** 				int64_t tmp = fixed_add(fixed_add(xi_squared, -yi_squared), x0_fixed);
 2836              		.loc 1 601 19
 2837 01b4 D7E90E23 		ldrd	r2, [r7, #56]
 2838 01b8 0021     		movs	r1, #0
 2839 01ba 5042     		negs	r0, r2
 2840 01bc 3860     		str	r0, [r7]
 2841 01be 61EB0303 		sbc	r3, r1, r3
 2842 01c2 7B60     		str	r3, [r7, #4]
 2843 01c4 D7E90023 		ldrd	r2, [r7]
 2844 01c8 D7E91001 		ldrd	r0, [r7, #64]
 2845 01cc FFF7FEFF 		bl	fixed_add
 2846              		.loc 1 601 19 is_stmt 0 discriminator 1
 2847 01d0 D7E91223 		ldrd	r2, [r7, #72]
 2848 01d4 FFF7FEFF 		bl	fixed_add
 2849 01d8 C7E90A01 		strd	r0, [r7, #40]
 602:Core/Src/main.c **** 				yi_fixed = fixed_add(fixed_multiply(fixed_multiply(xi_fixed, yi_fixed, scale), scale_2_0, scale
 2850              		.loc 1 602 16 is_stmt 1
 2851 01dc FB69     		ldr	r3, [r7, #28]
 2852 01de 0093     		str	r3, [sp]
 2853 01e0 D7E92023 		ldrd	r2, [r7, #128]
 2854 01e4 D7E92201 		ldrd	r0, [r7, #136]
 2855 01e8 FFF7FEFF 		bl	fixed_multiply
 2856              		.loc 1 602 16 is_stmt 0 discriminator 1
 2857 01ec FB69     		ldr	r3, [r7, #28]
 2858 01ee 0093     		str	r3, [sp]
 2859 01f0 D7E91C23 		ldrd	r2, [r7, #112]
 2860 01f4 FFF7FEFF 		bl	fixed_multiply
 2861              		.loc 1 602 16 discriminator 2
 2862 01f8 D7E91423 		ldrd	r2, [r7, #80]
 2863 01fc FFF7FEFF 		bl	fixed_add
 2864 0200 C7E92001 		strd	r0, [r7, #128]
 603:Core/Src/main.c **** 				xi_fixed = tmp;
 2865              		.loc 1 603 14 is_stmt 1
 2866 0204 D7E90A23 		ldrd	r2, [r7, #40]
 2867 0208 C7E92223 		strd	r2, [r7, #136]
 604:Core/Src/main.c **** 				
 605:Core/Src/main.c **** 				++iteration;
 2868              		.loc 1 605 5
 2869 020c FB6F     		ldr	r3, [r7, #124]
 2870 020e 0133     		adds	r3, r3, #1
 2871 0210 FB67     		str	r3, [r7, #124]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 63


 2872              	.L89:
 2873              	.LBE36:
 580:Core/Src/main.c **** 			{
 2874              		.loc 1 580 21
 2875 0212 FA6F     		ldr	r2, [r7, #124]
 2876 0214 3B6A     		ldr	r3, [r7, #32]
 2877 0216 9A42     		cmp	r2, r3
 2878 0218 86D3     		bcc	.L94
 2879 021a 00E0     		b	.L92
 2880              	.L98:
 2881              	.LBB37:
 597:Core/Src/main.c **** 				}
 2882              		.loc 1 597 6
 2883 021c 00BF     		nop
 2884              	.L92:
 2885              	.LBE37:
 606:Core/Src/main.c **** 			}
 607:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 2886              		.loc 1 607 19
 2887 021e D7F89C20 		ldr	r2, [r7, #156]
 2888 0222 FB6F     		ldr	r3, [r7, #124]
 2889 0224 1344     		add	r3, r3, r2
 2890 0226 C7F89C30 		str	r3, [r7, #156]
 2891              	.LBE35:
 573:Core/Src/main.c **** 		{
 2892              		.loc 1 573 35 discriminator 2
 2893 022a B7F89430 		ldrh	r3, [r7, #148]	@ movhi
 2894 022e 0133     		adds	r3, r3, #1
 2895 0230 A7F89430 		strh	r3, [r7, #148]	@ movhi
 2896              	.L88:
 573:Core/Src/main.c **** 		{
 2897              		.loc 1 573 26 discriminator 1
 2898 0234 B7F89420 		ldrh	r2, [r7, #148]
 2899 0238 FB8C     		ldrh	r3, [r7, #38]
 2900 023a 9A42     		cmp	r2, r3
 2901 023c FFF43FAF 		bcc	.L95
 2902              	.LBE34:
 2903              	.LBE33:
 569:Core/Src/main.c **** 	{
 2904              		.loc 1 569 35 discriminator 2
 2905 0240 B7F89630 		ldrh	r3, [r7, #150]	@ movhi
 2906 0244 0133     		adds	r3, r3, #1
 2907 0246 A7F89630 		strh	r3, [r7, #150]	@ movhi
 2908              	.L87:
 569:Core/Src/main.c **** 	{
 2909              		.loc 1 569 25 discriminator 1
 2910 024a B7F89620 		ldrh	r2, [r7, #150]
 2911 024e BB8C     		ldrh	r3, [r7, #36]
 2912 0250 9A42     		cmp	r2, r3
 2913 0252 FFF405AF 		bcc	.L96
 2914              	.LBE32:
 608:Core/Src/main.c **** 		}
 609:Core/Src/main.c **** 	}
 610:Core/Src/main.c **** 	
 611:Core/Src/main.c **** 	/* Store overflow count for this scaling factor */
 612:Core/Src/main.c **** 	g_fixed_overflow_count[g_current_scaling_index] = overflow_count;
 2915              		.loc 1 612 24
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 64


 2916 0256 144B     		ldr	r3, .L99+48
 2917 0258 1B68     		ldr	r3, [r3]
 2918              		.loc 1 612 50
 2919 025a 1449     		ldr	r1, .L99+52
 2920 025c D7F89820 		ldr	r2, [r7, #152]
 2921 0260 41F82320 		str	r2, [r1, r3, lsl #2]
 613:Core/Src/main.c **** 	
 614:Core/Src/main.c **** 	return mandelbrot_sum;
 2922              		.loc 1 614 9
 2923 0264 D7F89C30 		ldr	r3, [r7, #156]
 615:Core/Src/main.c **** }
 2924              		.loc 1 615 1
 2925 0268 1846     		mov	r0, r3
 2926 026a A037     		adds	r7, r7, #160
 2927              	.LCFI72:
 2928              		.cfi_def_cfa_offset 32
 2929 026c BD46     		mov	sp, r7
 2930              	.LCFI73:
 2931              		.cfi_def_cfa_register 13
 2932              		@ sp needed
 2933 026e BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 2934              	.L100:
 2935 0272 00BFAFF3 		.align	3
 2935      0080
 2936              	.L99:
 2937 0278 00000000 		.word	0
 2938 027c 00000040 		.word	1073741824
 2939 0280 00000000 		.word	0
 2940 0284 00001040 		.word	1074790400
 2941 0288 00000000 		.word	0
 2942 028c 00000C40 		.word	1074528256
 2943 0290 00000000 		.word	0
 2944 0294 00000440 		.word	1074003968
 2945 0298 00000000 		.word	0
 2946 029c 0000F03F 		.word	1072693248
 2947 02a0 41420F00 		.word	1000001
 2948 02a4 C0BDF0FF 		.word	-1000000
 2949 02a8 00000000 		.word	g_current_scaling_index
 2950 02ac 00000000 		.word	g_fixed_overflow_count
 2951              		.cfi_endproc
 2952              	.LFE151:
 2954              		.section	.rodata
 2955 028f 00       		.align	2
 2956              	.LC17:
 2957 0290 0D0A3D3D 		.ascii	"\015\012=== Task 8: Power Measurement Analysis - ST"
 2957      3D205461 
 2957      736B2038 
 2957      3A20506F 
 2957      77657220 
 2958 02bd 4D333246 		.ascii	"M32F4 ===\015\000"
 2958      34203D3D 
 2958      3D0D00
 2959              		.align	2
 2960              	.LC18:
 2961 02c8 46342050 		.ascii	"F4 Power Analysis:\015\000"
 2961      6F776572 
 2961      20416E61 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 65


 2961      6C797369 
 2961      733A0D00 
 2962              		.align	2
 2963              	.LC19:
 2964 02dc 2D204361 		.ascii	"- Calculation cycles: %lu\015\012\000"
 2964      6C63756C 
 2964      6174696F 
 2964      6E206379 
 2964      636C6573 
 2965              		.align	2
 2966              	.LC20:
 2967 02f8 2D204361 		.ascii	"- Calculation time: %.6f seconds\015\012\000"
 2967      6C63756C 
 2967      6174696F 
 2967      6E207469 
 2967      6D653A20 
 2968 031b 00       		.align	2
 2969              	.LC21:
 2970 031c 2D204573 		.ascii	"- Estimated power: %.2f mW\015\012\000"
 2970      74696D61 
 2970      74656420 
 2970      706F7765 
 2970      723A2025 
 2971 0339 000000   		.align	2
 2972              	.LC22:
 2973 033c 2D20456E 		.ascii	"- Energy consumption: %.6f mJ\015\012\000"
 2973      65726779 
 2973      20636F6E 
 2973      73756D70 
 2973      74696F6E 
 2974              		.align	2
 2975              	.LC23:
 2976 035c 2D204368 		.ascii	"- Checksum: %lu\015\012\000"
 2976      65636B73 
 2976      756D3A20 
 2976      256C750D 
 2976      0A00
 2977              		.section	.text.analyze_power_consumption_f4,"ax",%progbits
 2978              		.align	1
 2979              		.syntax unified
 2980              		.thumb
 2981              		.thumb_func
 2983              	analyze_power_consumption_f4:
 2984              	.LFB152:
 616:Core/Src/main.c **** 
 617:Core/Src/main.c **** /* Task 8: Power Measurement Analysis - STM32F4 */
 618:Core/Src/main.c **** static void analyze_power_consumption_f4(void)
 619:Core/Src/main.c **** {
 2985              		.loc 1 619 1
 2986              		.cfi_startproc
 2987              		@ args = 0, pretend = 0, frame = 48
 2988              		@ frame_needed = 1, uses_anonymous_args = 0
 2989 0000 B0B5     		push	{r4, r5, r7, lr}
 2990              	.LCFI74:
 2991              		.cfi_def_cfa_offset 16
 2992              		.cfi_offset 4, -16
 2993              		.cfi_offset 5, -12
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 66


 2994              		.cfi_offset 7, -8
 2995              		.cfi_offset 14, -4
 2996 0002 8CB0     		sub	sp, sp, #48
 2997              	.LCFI75:
 2998              		.cfi_def_cfa_offset 64
 2999 0004 00AF     		add	r7, sp, #0
 3000              	.LCFI76:
 3001              		.cfi_def_cfa_register 7
 620:Core/Src/main.c **** 	printf("\r\n=== Task 8: Power Measurement Analysis - STM32F4 ===\r\n");
 3002              		.loc 1 620 2
 3003 0006 3848     		ldr	r0, .L102
 3004 0008 FFF7FEFF 		bl	puts
 621:Core/Src/main.c **** 	
 622:Core/Src/main.c **** 	/* Power estimation based on CPU activity */
 623:Core/Src/main.c **** 	uint32_t total_cycles = 0;
 3005              		.loc 1 623 11
 3006 000c 0023     		movs	r3, #0
 3007 000e FB62     		str	r3, [r7, #44]
 624:Core/Src/main.c **** 	uint32_t active_cycles = 0;
 3008              		.loc 1 624 11
 3009 0010 0023     		movs	r3, #0
 3010 0012 BB62     		str	r3, [r7, #40]
 625:Core/Src/main.c **** 	
 626:Core/Src/main.c **** 	/* Measure during Mandelbrot calculation */
 627:Core/Src/main.c **** 	DWT->CYCCNT = 0;
 3011              		.loc 1 627 5
 3012 0014 354B     		ldr	r3, .L102+4
 3013              		.loc 1 627 14
 3014 0016 0022     		movs	r2, #0
 3015 0018 5A60     		str	r2, [r3, #4]
 628:Core/Src/main.c **** 	uint32_t start_cycles = dwt_get_cycles();
 3016              		.loc 1 628 26
 3017 001a FFF7FEFF 		bl	dwt_get_cycles
 3018 001e 7862     		str	r0, [r7, #36]
 629:Core/Src/main.c **** 	
 630:Core/Src/main.c **** 	/* Run Mandelbrot calculation */
 631:Core/Src/main.c **** 	uint32_t checksum = generate_mandelbrot_checksum_double(128, 128, 100);
 3019              		.loc 1 631 22
 3020 0020 6422     		movs	r2, #100
 3021 0022 8021     		movs	r1, #128
 3022 0024 8020     		movs	r0, #128
 3023 0026 FFF7FEFF 		bl	generate_mandelbrot_checksum_double
 3024 002a 3862     		str	r0, [r7, #32]
 632:Core/Src/main.c **** 	
 633:Core/Src/main.c **** 	uint32_t end_cycles = dwt_get_cycles();
 3025              		.loc 1 633 24
 3026 002c FFF7FEFF 		bl	dwt_get_cycles
 3027 0030 F861     		str	r0, [r7, #28]
 634:Core/Src/main.c **** 	uint32_t calculation_cycles = end_cycles - start_cycles;
 3028              		.loc 1 634 11
 3029 0032 FA69     		ldr	r2, [r7, #28]
 3030 0034 7B6A     		ldr	r3, [r7, #36]
 3031 0036 D31A     		subs	r3, r2, r3
 3032 0038 BB61     		str	r3, [r7, #24]
 635:Core/Src/main.c **** 	
 636:Core/Src/main.c **** 	/* Estimate power consumption */
 637:Core/Src/main.c **** 	double calculation_time_s = (double)calculation_cycles / (double)SystemCoreClock;
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 67


 3033              		.loc 1 637 30
 3034 003a B869     		ldr	r0, [r7, #24]
 3035 003c FFF7FEFF 		bl	__aeabi_ui2d
 3036 0040 0446     		mov	r4, r0
 3037 0042 0D46     		mov	r5, r1
 3038              		.loc 1 637 59
 3039 0044 2A4B     		ldr	r3, .L102+8
 3040 0046 1B68     		ldr	r3, [r3]
 3041 0048 1846     		mov	r0, r3
 3042 004a FFF7FEFF 		bl	__aeabi_ui2d
 3043 004e 0246     		mov	r2, r0
 3044 0050 0B46     		mov	r3, r1
 3045              		.loc 1 637 9
 3046 0052 2046     		mov	r0, r4
 3047 0054 2946     		mov	r1, r5
 3048 0056 FFF7FEFF 		bl	__aeabi_ddiv
 3049 005a 0246     		mov	r2, r0
 3050 005c 0B46     		mov	r3, r1
 3051 005e C7E90423 		strd	r2, [r7, #16]
 638:Core/Src/main.c **** 	double estimated_power_mw = estimate_power_consumption_f4(calculation_cycles);
 3052              		.loc 1 638 30
 3053 0062 B869     		ldr	r0, [r7, #24]
 3054 0064 FFF7FEFF 		bl	estimate_power_consumption_f4
 3055 0068 87ED020B 		vstr.64	d0, [r7, #8]
 639:Core/Src/main.c **** 	double energy_consumption_mj = estimated_power_mw * calculation_time_s * 1000.0;
 3056              		.loc 1 639 52
 3057 006c D7E90423 		ldrd	r2, [r7, #16]
 3058 0070 D7E90201 		ldrd	r0, [r7, #8]
 3059 0074 FFF7FEFF 		bl	__aeabi_dmul
 3060 0078 0246     		mov	r2, r0
 3061 007a 0B46     		mov	r3, r1
 3062 007c 1046     		mov	r0, r2
 3063 007e 1946     		mov	r1, r3
 3064              		.loc 1 639 9
 3065 0080 4FF00002 		mov	r2, #0
 3066 0084 1B4B     		ldr	r3, .L102+12
 3067 0086 FFF7FEFF 		bl	__aeabi_dmul
 3068 008a 0246     		mov	r2, r0
 3069 008c 0B46     		mov	r3, r1
 3070 008e C7E90023 		strd	r2, [r7]
 640:Core/Src/main.c **** 	
 641:Core/Src/main.c **** 	/* Store results for Live Expressions */
 642:Core/Src/main.c **** 	g_estimated_power_f4_mw = estimated_power_mw;
 3071              		.loc 1 642 26
 3072 0092 1949     		ldr	r1, .L102+16
 3073 0094 D7E90223 		ldrd	r2, [r7, #8]
 3074 0098 C1E90023 		strd	r2, [r1]
 643:Core/Src/main.c **** 	g_energy_consumption_f4_mj = energy_consumption_mj;
 3075              		.loc 1 643 29
 3076 009c 1749     		ldr	r1, .L102+20
 3077 009e D7E90023 		ldrd	r2, [r7]
 3078 00a2 C1E90023 		strd	r2, [r1]
 644:Core/Src/main.c **** 	g_power_measurement_cycles_f4 = calculation_cycles;
 3079              		.loc 1 644 32
 3080 00a6 164A     		ldr	r2, .L102+24
 3081 00a8 BB69     		ldr	r3, [r7, #24]
 3082 00aa 1360     		str	r3, [r2]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 68


 645:Core/Src/main.c **** 	
 646:Core/Src/main.c **** 	printf("F4 Power Analysis:\r\n");
 3083              		.loc 1 646 2
 3084 00ac 1548     		ldr	r0, .L102+28
 3085 00ae FFF7FEFF 		bl	puts
 647:Core/Src/main.c **** 	printf("- Calculation cycles: %lu\r\n", (unsigned long)calculation_cycles);
 3086              		.loc 1 647 2
 3087 00b2 B969     		ldr	r1, [r7, #24]
 3088 00b4 1448     		ldr	r0, .L102+32
 3089 00b6 FFF7FEFF 		bl	printf
 648:Core/Src/main.c **** 	printf("- Calculation time: %.6f seconds\r\n", calculation_time_s);
 3090              		.loc 1 648 2
 3091 00ba D7E90423 		ldrd	r2, [r7, #16]
 3092 00be 1348     		ldr	r0, .L102+36
 3093 00c0 FFF7FEFF 		bl	printf
 649:Core/Src/main.c **** 	printf("- Estimated power: %.2f mW\r\n", estimated_power_mw);
 3094              		.loc 1 649 2
 3095 00c4 D7E90223 		ldrd	r2, [r7, #8]
 3096 00c8 1148     		ldr	r0, .L102+40
 3097 00ca FFF7FEFF 		bl	printf
 650:Core/Src/main.c **** 	printf("- Energy consumption: %.6f mJ\r\n", energy_consumption_mj);
 3098              		.loc 1 650 2
 3099 00ce D7E90023 		ldrd	r2, [r7]
 3100 00d2 1048     		ldr	r0, .L102+44
 3101 00d4 FFF7FEFF 		bl	printf
 651:Core/Src/main.c **** 	printf("- Checksum: %lu\r\n", (unsigned long)checksum);
 3102              		.loc 1 651 2
 3103 00d8 396A     		ldr	r1, [r7, #32]
 3104 00da 0F48     		ldr	r0, .L102+48
 3105 00dc FFF7FEFF 		bl	printf
 652:Core/Src/main.c **** }
 3106              		.loc 1 652 1
 3107 00e0 00BF     		nop
 3108 00e2 3037     		adds	r7, r7, #48
 3109              	.LCFI77:
 3110              		.cfi_def_cfa_offset 16
 3111 00e4 BD46     		mov	sp, r7
 3112              	.LCFI78:
 3113              		.cfi_def_cfa_register 13
 3114              		@ sp needed
 3115 00e6 B0BD     		pop	{r4, r5, r7, pc}
 3116              	.L103:
 3117              		.align	2
 3118              	.L102:
 3119 00e8 90020000 		.word	.LC17
 3120 00ec 001000E0 		.word	-536866816
 3121 00f0 00000000 		.word	SystemCoreClock
 3122 00f4 00408F40 		.word	1083129856
 3123 00f8 00000000 		.word	g_estimated_power_f4_mw
 3124 00fc 00000000 		.word	g_energy_consumption_f4_mj
 3125 0100 00000000 		.word	g_power_measurement_cycles_f4
 3126 0104 C8020000 		.word	.LC18
 3127 0108 DC020000 		.word	.LC19
 3128 010c F8020000 		.word	.LC20
 3129 0110 1C030000 		.word	.LC21
 3130 0114 3C030000 		.word	.LC22
 3131 0118 5C030000 		.word	.LC23
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 69


 3132              		.cfi_endproc
 3133              	.LFE152:
 3135              		.section	.text.estimate_power_consumption_f4,"ax",%progbits
 3136              		.align	1
 3137              		.syntax unified
 3138              		.thumb
 3139              		.thumb_func
 3141              	estimate_power_consumption_f4:
 3142              	.LFB153:
 653:Core/Src/main.c **** 
 654:Core/Src/main.c **** static double estimate_power_consumption_f4(uint32_t cycles)
 655:Core/Src/main.c **** {
 3143              		.loc 1 655 1
 3144              		.cfi_startproc
 3145              		@ args = 0, pretend = 0, frame = 24
 3146              		@ frame_needed = 1, uses_anonymous_args = 0
 3147 0000 80B5     		push	{r7, lr}
 3148              	.LCFI79:
 3149              		.cfi_def_cfa_offset 8
 3150              		.cfi_offset 7, -8
 3151              		.cfi_offset 14, -4
 3152 0002 86B0     		sub	sp, sp, #24
 3153              	.LCFI80:
 3154              		.cfi_def_cfa_offset 32
 3155 0004 00AF     		add	r7, sp, #0
 3156              	.LCFI81:
 3157              		.cfi_def_cfa_register 7
 3158 0006 7860     		str	r0, [r7, #4]
 656:Core/Src/main.c **** 	/* Power estimation based on STM32F446 datasheet */
 657:Core/Src/main.c **** 	/* Typical power consumption at 180 MHz: ~100-150 mW */
 658:Core/Src/main.c **** 	/* This is a rough estimation based on CPU activity */
 659:Core/Src/main.c **** 	
 660:Core/Src/main.c **** 	double base_power_mw = 120.0;  /* Base power consumption */
 3159              		.loc 1 660 9
 3160 0008 4FF00002 		mov	r2, #0
 3161 000c 0C4B     		ldr	r3, .L106
 3162 000e C7E90423 		strd	r2, [r7, #16]
 661:Core/Src/main.c **** 	double cpu_activity_factor = 1.0;  /* Assume full CPU utilization */
 3163              		.loc 1 661 9
 3164 0012 4FF00002 		mov	r2, #0
 3165 0016 0B4B     		ldr	r3, .L106+4
 3166 0018 C7E90223 		strd	r2, [r7, #8]
 662:Core/Src/main.c **** 	
 663:Core/Src/main.c **** 	return base_power_mw * cpu_activity_factor;
 3167              		.loc 1 663 23
 3168 001c D7E90223 		ldrd	r2, [r7, #8]
 3169 0020 D7E90401 		ldrd	r0, [r7, #16]
 3170 0024 FFF7FEFF 		bl	__aeabi_dmul
 3171 0028 0246     		mov	r2, r0
 3172 002a 0B46     		mov	r3, r1
 3173              		.loc 1 663 23 is_stmt 0 discriminator 1
 3174 002c 43EC172B 		vmov	d7, r2, r3
 664:Core/Src/main.c **** }
 3175              		.loc 1 664 1 is_stmt 1
 3176 0030 B0EE470A 		vmov.f32	s0, s14
 3177 0034 F0EE670A 		vmov.f32	s1, s15
 3178 0038 1837     		adds	r7, r7, #24
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 70


 3179              	.LCFI82:
 3180              		.cfi_def_cfa_offset 8
 3181 003a BD46     		mov	sp, r7
 3182              	.LCFI83:
 3183              		.cfi_def_cfa_register 13
 3184              		@ sp needed
 3185 003c 80BD     		pop	{r7, pc}
 3186              	.L107:
 3187 003e 00BF     		.align	2
 3188              	.L106:
 3189 0040 00005E40 		.word	1079902208
 3190 0044 0000F03F 		.word	1072693248
 3191              		.cfi_endproc
 3192              	.LFE153:
 3194              		.section	.rodata
 3195 036e 0000     		.align	2
 3196              	.LC24:
 3197 0370 0D0A3D3D 		.ascii	"\015\012=== F4 Power Extrapolation ===\015\000"
 3197      3D204634 
 3197      20506F77 
 3197      65722045 
 3197      78747261 
 3198 0392 0000     		.align	2
 3199              	.LC25:
 3200 0394 5265736F 		.ascii	"Resolution Scaling (100 iterations):\015\000"
 3200      6C757469 
 3200      6F6E2053 
 3200      63616C69 
 3200      6E672028 
 3201              		.global	__aeabi_i2d
 3202 03ba 0000     		.align	2
 3203              	.LC26:
 3204 03bc 25733A20 		.ascii	"%s: %.1f mW, %.3f mJ\015\012\000"
 3204      252E3166 
 3204      206D572C 
 3204      20252E33 
 3204      66206D4A 
 3205 03d3 00       		.align	2
 3206              	.LC27:
 3207 03d4 0D0A4974 		.ascii	"\015\012Iteration Scaling (128x128):\015\000"
 3207      65726174 
 3207      696F6E20 
 3207      5363616C 
 3207      696E6720 
 3208              		.align	2
 3209              	.LC28:
 3210 03f4 256C7520 		.ascii	"%lu iter: %.1f mW, %.3f mJ\015\012\000"
 3210      69746572 
 3210      3A20252E 
 3210      3166206D 
 3210      572C2025 
 3211              		.section	.text.extrapolate_power_consumption_f4,"ax",%progbits
 3212              		.align	1
 3213              		.syntax unified
 3214              		.thumb
 3215              		.thumb_func
 3217              	extrapolate_power_consumption_f4:
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 71


 3218              	.LFB154:
 665:Core/Src/main.c **** 
 666:Core/Src/main.c **** static void extrapolate_power_consumption_f4(void)
 667:Core/Src/main.c **** {
 3219              		.loc 1 667 1
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 56
 3222              		@ frame_needed = 1, uses_anonymous_args = 0
 3223 0000 80B5     		push	{r7, lr}
 3224              	.LCFI84:
 3225              		.cfi_def_cfa_offset 8
 3226              		.cfi_offset 7, -8
 3227              		.cfi_offset 14, -4
 3228 0002 90B0     		sub	sp, sp, #64
 3229              	.LCFI85:
 3230              		.cfi_def_cfa_offset 72
 3231 0004 02AF     		add	r7, sp, #8
 3232              	.LCFI86:
 3233              		.cfi_def_cfa 7, 64
 668:Core/Src/main.c **** 	printf("\r\n=== F4 Power Extrapolation ===\r\n");
 3234              		.loc 1 668 2
 3235 0006 4648     		ldr	r0, .L113
 3236 0008 FFF7FEFF 		bl	puts
 669:Core/Src/main.c **** 	
 670:Core/Src/main.c **** 	/* Extrapolation for different resolutions */
 671:Core/Src/main.c **** 	static const uint16_t resolutions[5] = {128, 160, 192, 224, 256};
 672:Core/Src/main.c **** 	static const char* resolution_names[5] = {"128x128", "160x160", "192x192", "224x224", "256x256"};
 673:Core/Src/main.c **** 	
 674:Core/Src/main.c **** 	printf("Resolution Scaling (100 iterations):\r\n");
 3237              		.loc 1 674 2
 3238 000c 4548     		ldr	r0, .L113+4
 3239 000e FFF7FEFF 		bl	puts
 3240              	.LBB38:
 675:Core/Src/main.c **** 	for (int i = 0; i < 5; ++i)
 3241              		.loc 1 675 11
 3242 0012 0023     		movs	r3, #0
 3243 0014 7B63     		str	r3, [r7, #52]
 3244              		.loc 1 675 2
 3245 0016 3CE0     		b	.L109
 3246              	.L110:
 3247              	.LBB39:
 676:Core/Src/main.c **** 	{
 677:Core/Src/main.c **** 		double scale_factor = (double)(resolutions[i] * resolutions[i]) / (double)(128 * 128);
 3248              		.loc 1 677 45
 3249 0018 434A     		ldr	r2, .L113+8
 3250 001a 7B6B     		ldr	r3, [r7, #52]
 3251 001c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 3252 0020 1946     		mov	r1, r3
 3253              		.loc 1 677 62
 3254 0022 414A     		ldr	r2, .L113+8
 3255 0024 7B6B     		ldr	r3, [r7, #52]
 3256 0026 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 3257              		.loc 1 677 49
 3258 002a 01FB03F3 		mul	r3, r1, r3
 3259              		.loc 1 677 25
 3260 002e 1846     		mov	r0, r3
 3261 0030 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 72


 3262              		.loc 1 677 10
 3263 0034 4FF00002 		mov	r2, #0
 3264 0038 3C4B     		ldr	r3, .L113+12
 3265 003a FFF7FEFF 		bl	__aeabi_ddiv
 3266 003e 0246     		mov	r2, r0
 3267 0040 0B46     		mov	r3, r1
 3268 0042 C7E90423 		strd	r2, [r7, #16]
 678:Core/Src/main.c **** 		double estimated_power = g_estimated_power_f4_mw * scale_factor;
 3269              		.loc 1 678 52
 3270 0046 3A4B     		ldr	r3, .L113+16
 3271 0048 D3E90023 		ldrd	r2, [r3]
 3272              		.loc 1 678 10
 3273 004c D7E90401 		ldrd	r0, [r7, #16]
 3274 0050 FFF7FEFF 		bl	__aeabi_dmul
 3275 0054 0246     		mov	r2, r0
 3276 0056 0B46     		mov	r3, r1
 3277 0058 C7E90223 		strd	r2, [r7, #8]
 679:Core/Src/main.c **** 		double estimated_energy = g_energy_consumption_f4_mj * scale_factor;
 3278              		.loc 1 679 56
 3279 005c 354B     		ldr	r3, .L113+20
 3280 005e D3E90023 		ldrd	r2, [r3]
 3281              		.loc 1 679 10
 3282 0062 D7E90401 		ldrd	r0, [r7, #16]
 3283 0066 FFF7FEFF 		bl	__aeabi_dmul
 3284 006a 0246     		mov	r2, r0
 3285 006c 0B46     		mov	r3, r1
 3286 006e C7E90023 		strd	r2, [r7]
 680:Core/Src/main.c **** 		
 681:Core/Src/main.c **** 		printf("%s: %.1f mW, %.3f mJ\r\n", resolution_names[i], estimated_power, estimated_energy);
 3287              		.loc 1 681 3
 3288 0072 314A     		ldr	r2, .L113+24
 3289 0074 7B6B     		ldr	r3, [r7, #52]
 3290 0076 52F82310 		ldr	r1, [r2, r3, lsl #2]
 3291 007a D7E90023 		ldrd	r2, [r7]
 3292 007e CDE90023 		strd	r2, [sp]
 3293 0082 D7E90223 		ldrd	r2, [r7, #8]
 3294 0086 2D48     		ldr	r0, .L113+28
 3295 0088 FFF7FEFF 		bl	printf
 3296              	.LBE39:
 675:Core/Src/main.c **** 	{
 3297              		.loc 1 675 25 discriminator 3
 3298 008c 7B6B     		ldr	r3, [r7, #52]
 3299 008e 0133     		adds	r3, r3, #1
 3300 0090 7B63     		str	r3, [r7, #52]
 3301              	.L109:
 675:Core/Src/main.c **** 	{
 3302              		.loc 1 675 20 discriminator 1
 3303 0092 7B6B     		ldr	r3, [r7, #52]
 3304 0094 042B     		cmp	r3, #4
 3305 0096 BFDD     		ble	.L110
 3306              	.LBE38:
 682:Core/Src/main.c **** 	}
 683:Core/Src/main.c **** 	
 684:Core/Src/main.c **** 	/* Extrapolation for different iterations */
 685:Core/Src/main.c **** 	static const uint32_t iterations[5] = {100, 250, 500, 750, 1000};
 686:Core/Src/main.c **** 	
 687:Core/Src/main.c **** 	printf("\r\nIteration Scaling (128x128):\r\n");
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 73


 3307              		.loc 1 687 2
 3308 0098 2948     		ldr	r0, .L113+32
 3309 009a FFF7FEFF 		bl	puts
 3310              	.LBB40:
 688:Core/Src/main.c **** 	for (int i = 0; i < 5; ++i)
 3311              		.loc 1 688 11
 3312 009e 0023     		movs	r3, #0
 3313 00a0 3B63     		str	r3, [r7, #48]
 3314              		.loc 1 688 2
 3315 00a2 35E0     		b	.L111
 3316              	.L112:
 3317              	.LBB41:
 689:Core/Src/main.c **** 	{
 690:Core/Src/main.c **** 		double scale_factor = (double)iterations[i] / 100.0;
 3318              		.loc 1 690 43
 3319 00a4 274A     		ldr	r2, .L113+36
 3320 00a6 3B6B     		ldr	r3, [r7, #48]
 3321 00a8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3322              		.loc 1 690 25
 3323 00ac 1846     		mov	r0, r3
 3324 00ae FFF7FEFF 		bl	__aeabi_ui2d
 3325              		.loc 1 690 10
 3326 00b2 4FF00002 		mov	r2, #0
 3327 00b6 244B     		ldr	r3, .L113+40
 3328 00b8 FFF7FEFF 		bl	__aeabi_ddiv
 3329 00bc 0246     		mov	r2, r0
 3330 00be 0B46     		mov	r3, r1
 3331 00c0 C7E90A23 		strd	r2, [r7, #40]
 691:Core/Src/main.c **** 		double estimated_power = g_estimated_power_f4_mw * scale_factor;
 3332              		.loc 1 691 52
 3333 00c4 1A4B     		ldr	r3, .L113+16
 3334 00c6 D3E90023 		ldrd	r2, [r3]
 3335              		.loc 1 691 10
 3336 00ca D7E90A01 		ldrd	r0, [r7, #40]
 3337 00ce FFF7FEFF 		bl	__aeabi_dmul
 3338 00d2 0246     		mov	r2, r0
 3339 00d4 0B46     		mov	r3, r1
 3340 00d6 C7E90823 		strd	r2, [r7, #32]
 692:Core/Src/main.c **** 		double estimated_energy = g_energy_consumption_f4_mj * scale_factor;
 3341              		.loc 1 692 56
 3342 00da 164B     		ldr	r3, .L113+20
 3343 00dc D3E90023 		ldrd	r2, [r3]
 3344              		.loc 1 692 10
 3345 00e0 D7E90A01 		ldrd	r0, [r7, #40]
 3346 00e4 FFF7FEFF 		bl	__aeabi_dmul
 3347 00e8 0246     		mov	r2, r0
 3348 00ea 0B46     		mov	r3, r1
 3349 00ec C7E90623 		strd	r2, [r7, #24]
 693:Core/Src/main.c **** 		
 694:Core/Src/main.c **** 		printf("%lu iter: %.1f mW, %.3f mJ\r\n", (unsigned long)iterations[i], estimated_power, estimated
 3350              		.loc 1 694 69
 3351 00f0 144A     		ldr	r2, .L113+36
 3352 00f2 3B6B     		ldr	r3, [r7, #48]
 3353 00f4 52F82310 		ldr	r1, [r2, r3, lsl #2]
 3354              		.loc 1 694 3
 3355 00f8 D7E90623 		ldrd	r2, [r7, #24]
 3356 00fc CDE90023 		strd	r2, [sp]
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 74


 3357 0100 D7E90823 		ldrd	r2, [r7, #32]
 3358 0104 1148     		ldr	r0, .L113+44
 3359 0106 FFF7FEFF 		bl	printf
 3360              	.LBE41:
 688:Core/Src/main.c **** 	{
 3361              		.loc 1 688 25 discriminator 3
 3362 010a 3B6B     		ldr	r3, [r7, #48]
 3363 010c 0133     		adds	r3, r3, #1
 3364 010e 3B63     		str	r3, [r7, #48]
 3365              	.L111:
 688:Core/Src/main.c **** 	{
 3366              		.loc 1 688 20 discriminator 1
 3367 0110 3B6B     		ldr	r3, [r7, #48]
 3368 0112 042B     		cmp	r3, #4
 3369 0114 C6DD     		ble	.L112
 3370              	.LBE40:
 695:Core/Src/main.c **** 	}
 696:Core/Src/main.c **** }
 3371              		.loc 1 696 1
 3372 0116 00BF     		nop
 3373 0118 00BF     		nop
 3374 011a 3837     		adds	r7, r7, #56
 3375              	.LCFI87:
 3376              		.cfi_def_cfa_offset 8
 3377 011c BD46     		mov	sp, r7
 3378              	.LCFI88:
 3379              		.cfi_def_cfa_register 13
 3380              		@ sp needed
 3381 011e 80BD     		pop	{r7, pc}
 3382              	.L114:
 3383              		.align	2
 3384              	.L113:
 3385 0120 70030000 		.word	.LC24
 3386 0124 94030000 		.word	.LC25
 3387 0128 00000000 		.word	resolutions.2
 3388 012c 0000D040 		.word	1087373312
 3389 0130 00000000 		.word	g_estimated_power_f4_mw
 3390 0134 00000000 		.word	g_energy_consumption_f4_mj
 3391 0138 00000000 		.word	resolution_names.1
 3392 013c BC030000 		.word	.LC26
 3393 0140 D4030000 		.word	.LC27
 3394 0144 00000000 		.word	iterations.0
 3395 0148 00005940 		.word	1079574528
 3396 014c F4030000 		.word	.LC28
 3397              		.cfi_endproc
 3398              	.LFE154:
 3400              		.section	.text.Error_Handler,"ax",%progbits
 3401              		.align	1
 3402              		.global	Error_Handler
 3403              		.syntax unified
 3404              		.thumb
 3405              		.thumb_func
 3407              	Error_Handler:
 3408              	.LFB155:
 697:Core/Src/main.c **** 
 698:Core/Src/main.c **** /* USER CODE END 4 */
 699:Core/Src/main.c **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 75


 700:Core/Src/main.c **** /**
 701:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 702:Core/Src/main.c ****   * @retval None
 703:Core/Src/main.c ****   */
 704:Core/Src/main.c **** void Error_Handler(void)
 705:Core/Src/main.c **** {
 3409              		.loc 1 705 1
 3410              		.cfi_startproc
 3411              		@ args = 0, pretend = 0, frame = 0
 3412              		@ frame_needed = 1, uses_anonymous_args = 0
 3413              		@ link register save eliminated.
 3414 0000 80B4     		push	{r7}
 3415              	.LCFI89:
 3416              		.cfi_def_cfa_offset 4
 3417              		.cfi_offset 7, -4
 3418 0002 00AF     		add	r7, sp, #0
 3419              	.LCFI90:
 3420              		.cfi_def_cfa_register 7
 3421              	.LBB42:
 3422              	.LBB43:
 3423              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 76


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 77


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 78


 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 79


 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 80


 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 81


 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 82


 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 83


 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 84


 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 85


 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 86


 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 87


 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 88


 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 89


 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 90


 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 91


 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 92


 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 3424              		.loc 2 962 3
 3425              		.syntax unified
 3426              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3427 0004 72B6     		cpsid i
 3428              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3429              		.loc 2 963 1
 3430              		.thumb
 3431              		.syntax unified
 3432 0006 00BF     		nop
 3433              	.L116:
 3434              	.LBE43:
 3435              	.LBE42:
 706:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 707:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 708:Core/Src/main.c ****   __disable_irq();
 709:Core/Src/main.c ****   while (1)
 3436              		.loc 1 709 9
 3437 0008 00BF     		nop
 3438 000a FDE7     		b	.L116
 3439              		.cfi_endproc
 3440              	.LFE155:
 3442              		.section	.rodata.resolutions.2,"a"
 3443              		.align	2
 3446              	resolutions.2:
 3447 0000 8000     		.short	128
 3448 0002 A000     		.short	160
 3449 0004 C000     		.short	192
 3450 0006 E000     		.short	224
 3451 0008 0001     		.short	256
 3452              		.section	.rodata
 3453 0411 000000   		.align	2
 3454              	.LC29:
 3455 0414 31323878 		.ascii	"128x128\000"
 3455      31323800 
 3456              		.align	2
 3457              	.LC30:
 3458 041c 31363078 		.ascii	"160x160\000"
 3458      31363000 
 3459              		.align	2
 3460              	.LC31:
 3461 0424 31393278 		.ascii	"192x192\000"
 3461      31393200 
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 93


 3462              		.align	2
 3463              	.LC32:
 3464 042c 32323478 		.ascii	"224x224\000"
 3464      32323400 
 3465              		.align	2
 3466              	.LC33:
 3467 0434 32353678 		.ascii	"256x256\000"
 3467      32353600 
 3468              		.section	.data.resolution_names.1,"aw"
 3469              		.align	2
 3472              	resolution_names.1:
 3473 0000 14040000 		.word	.LC29
 3474 0004 1C040000 		.word	.LC30
 3475 0008 24040000 		.word	.LC31
 3476 000c 2C040000 		.word	.LC32
 3477 0010 34040000 		.word	.LC33
 3478              		.section	.rodata.iterations.0,"a"
 3479              		.align	2
 3482              	iterations.0:
 3483 0000 64000000 		.word	100
 3484 0004 FA000000 		.word	250
 3485 0008 F4010000 		.word	500
 3486 000c EE020000 		.word	750
 3487 0010 E8030000 		.word	1000
 3488              		.text
 3489              	.Letext0:
 3490              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 3491              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 3492              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 3493              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3494              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3495              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3496              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3497              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3498              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3499              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3500              		.file 13 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltoo
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 94


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:21     .rodata.kMaxIter:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:24     .rodata.kMaxIter:00000000 kMaxIter
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:27     .rodata.kNumResolutions:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:30     .rodata.kNumResolutions:00000000 kNumResolutions
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:33     .rodata.kWidths:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:36     .rodata.kWidths:00000000 kWidths
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:43     .rodata.kHeights:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:46     .rodata.kHeights:00000000 kHeights
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:57     .bss.g_current_width:00000000 g_current_width
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:54     .bss.g_current_width:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:64     .bss.g_current_height:00000000 g_current_height
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:61     .bss.g_current_height:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:71     .bss.g_current_cycles:00000000 g_current_cycles
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:68     .bss.g_current_cycles:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:78     .bss.g_current_checksum:00000000 g_current_checksum
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:75     .bss.g_current_checksum:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:85     .bss.g_current_execution_time:00000000 g_current_execution_time
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:82     .bss.g_current_execution_time:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:92     .bss.g_current_throughput:00000000 g_current_throughput
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:89     .bss.g_current_throughput:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:99     .bss.checksum_float:00000000 checksum_float
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:96     .bss.checksum_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:106    .bss.execution_time_ms_float:00000000 execution_time_ms_float
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:103    .bss.execution_time_ms_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:113    .bss.cpu_cycles_float:00000000 cpu_cycles_float
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:110    .bss.cpu_cycles_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:120    .bss.throughput_pps_float:00000000 throughput_pps_float
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:117    .bss.throughput_pps_float:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:127    .bss.checksum_double:00000000 checksum_double
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:124    .bss.checksum_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:134    .bss.execution_time_ms_double:00000000 execution_time_ms_double
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:131    .bss.execution_time_ms_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:141    .bss.cpu_cycles_double:00000000 cpu_cycles_double
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:138    .bss.cpu_cycles_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:148    .bss.throughput_pps_double:00000000 throughput_pps_double
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:145    .bss.throughput_pps_double:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:155    .bss.accuracy_diff_percent:00000000 accuracy_diff_percent
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:152    .bss.accuracy_diff_percent:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:162    .bss.speedup_factor:00000000 speedup_factor
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:159    .bss.speedup_factor:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:169    .bss.g_current_test_mode:00000000 g_current_test_mode
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:166    .bss.g_current_test_mode:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:176    .data.g_fpu_enabled:00000000 g_fpu_enabled
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:173    .data.g_fpu_enabled:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:183    .bss.g_total_program_cycles:00000000 g_total_program_cycles
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:180    .bss.g_total_program_cycles:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:190    .bss.g_total_program_time_ms:00000000 g_total_program_time_ms
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:187    .bss.g_total_program_time_ms:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:197    .bss.g_total_time_sum:00000000 g_total_time_sum
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:194    .bss.g_total_time_sum:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:200    .rodata.kNumScalingFactors:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:203    .rodata.kNumScalingFactors:00000000 kNumScalingFactors
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:206    .rodata.kScalingFactors:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:209    .rodata.kScalingFactors:00000000 kScalingFactors
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:214    .rodata:00000000 $d
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 95


C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:224    .data.kScalingFactorNames:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:227    .data.kScalingFactorNames:00000000 kScalingFactorNames
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:236    .bss.g_fixed_checksum:00000000 g_fixed_checksum
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:233    .bss.g_fixed_checksum:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:243    .bss.g_fixed_execution_time_ms:00000000 g_fixed_execution_time_ms
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:240    .bss.g_fixed_execution_time_ms:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:250    .bss.g_fixed_overflow_count:00000000 g_fixed_overflow_count
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:247    .bss.g_fixed_overflow_count:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:257    .bss.g_current_scaling_factor:00000000 g_current_scaling_factor
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:254    .bss.g_current_scaling_factor:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:264    .bss.g_current_scaling_index:00000000 g_current_scaling_index
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:261    .bss.g_current_scaling_index:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:271    .bss.g_estimated_power_f4_mw:00000000 g_estimated_power_f4_mw
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:268    .bss.g_estimated_power_f4_mw:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:278    .bss.g_energy_consumption_f4_mj:00000000 g_energy_consumption_f4_mj
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:275    .bss.g_energy_consumption_f4_mj:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:285    .bss.g_power_measurement_cycles_f4:00000000 g_power_measurement_cycles_f4
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:282    .bss.g_power_measurement_cycles_f4:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:337    .text.main:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:343    .text.main:00000000 main
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1304   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1455   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2038   .text.dwt_cycle_counter_init:00000000 dwt_cycle_counter_init
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2096   .text.dwt_get_cycles:00000000 dwt_get_cycles
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1571   .text.generate_mandelbrot_checksum_float:00000000 generate_mandelbrot_checksum_float
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2142   .text.log_fpu_benchmark:00000000 log_fpu_benchmark
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:586    .text.main:000001bc $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:611    .text.main:00000214 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1763   .text.generate_mandelbrot_checksum_double:00000000 generate_mandelbrot_checksum_double
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:783    .text.main:00000388 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:803    .text.main:000003cc $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2232   .text.log_fpu_comparison:00000000 log_fpu_comparison
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1079   .text.main:00000624 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1102   .text.main:00000674 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2626   .text.generate_mandelbrot_checksum_fixed_point:00000000 generate_mandelbrot_checksum_fixed_point
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2983   .text.analyze_power_consumption_f4:00000000 analyze_power_consumption_f4
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3217   .text.extrapolate_power_consumption_f4:00000000 extrapolate_power_consumption_f4
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1281   .text.main:000007e8 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1298   .text.SystemClock_Config:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3407   .text.Error_Handler:00000000 Error_Handler
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1444   .text.SystemClock_Config:000000d4 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1450   .text.MX_GPIO_Init:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1560   .text.MX_GPIO_Init:00000098 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1566   .text.generate_mandelbrot_checksum_float:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:1758   .text.generate_mandelbrot_checksum_double:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2025   .text.generate_mandelbrot_checksum_double:000001d0 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2033   .text.dwt_cycle_counter_init:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2085   .text.dwt_cycle_counter_init:0000002c $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2091   .text.dwt_get_cycles:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2127   .text.dwt_get_cycles:00000014 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2137   .text.log_fpu_benchmark:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2216   .text.log_fpu_benchmark:00000070 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2227   .text.log_fpu_comparison:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2280   .text.log_fpu_comparison:00000038 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2285   .text.__io_putchar:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2291   .text.__io_putchar:00000000 __io_putchar
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2374   .text.__io_putchar:00000050 $d
ARM GAS  C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s 			page 96


C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2380   .text.fixed_multiply:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2385   .text.fixed_multiply:00000000 fixed_multiply
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2452   .text.fixed_add:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2457   .text.fixed_add:00000000 fixed_add
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2508   .text.double_to_fixed:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2513   .text.double_to_fixed:00000000 double_to_fixed
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2562   .text.fixed_to_double:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2567   .text.fixed_to_double:00000000 fixed_to_double
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2621   .text.generate_mandelbrot_checksum_fixed_point:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2937   .text.generate_mandelbrot_checksum_fixed_point:00000278 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:2978   .text.analyze_power_consumption_f4:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3141   .text.estimate_power_consumption_f4:00000000 estimate_power_consumption_f4
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3119   .text.analyze_power_consumption_f4:000000e8 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3136   .text.estimate_power_consumption_f4:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3189   .text.estimate_power_consumption_f4:00000040 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3212   .text.extrapolate_power_consumption_f4:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3385   .text.extrapolate_power_consumption_f4:00000120 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3446   .rodata.resolutions.2:00000000 resolutions.2
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3472   .data.resolution_names.1:00000000 resolution_names.1
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3482   .rodata.iterations.0:00000000 iterations.0
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3401   .text.Error_Handler:00000000 $t
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3443   .rodata.resolutions.2:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3469   .data.resolution_names.1:00000000 $d
C:\Users\einom\AppData\Local\Temp\ccY2fYNX.s:3479   .rodata.iterations.0:00000000 $d

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dcmpeq
__aeabi_dadd
HAL_Init
puts
printf
HAL_GPIO_WritePin
SystemCoreClock
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_GPIO_Init
__aeabi_dcmple
__aeabi_ldivmod
__aeabi_d2lz
__aeabi_l2d
__aeabi_i2d
